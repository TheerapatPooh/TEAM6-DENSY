// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// เก็บข้อมูลเซสชันของผู้ใช้แต่ละคน เช่น Token, วันหมดอายุ
model Session {
  id        Int      @id @default(autoincrement()) @map("session_id")
  userId    Int      @unique @map("session_user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique @map("session_token")
  createdAt DateTime @default(now()) @map("session_created_at")
  expiresAt DateTime @map("session_expires_at")
}

// เก็บข้อมูลผู้ใช้ เช่น ชื่อผู้ใช้, อีเมล, บทบาท และรหัสผ่าน
model User {
  id         Int      @id @default(autoincrement()) @map("us_id")
  username   String   @unique @map("us_username")
  email      String?  @unique @map("us_email")
  password   String   @map("us_password")
  role       Role     @map("us_role")
  department String?  @map("us_department")
  createdAt  DateTime @default(now()) @map("us_created_at")
  active     Boolean  @default(true) @map("us_active")

  resetToken        String?   @map("us_reset_token")
  resetTokenExpires DateTime? @map("us_reset_token_expires")

  presets            Preset[]
  comments           Comment[]
  profile            Profile?
  notifications      Notification[]
  defects            Defect[]
  supervisedDefects  Defect[]          @relation(name: "DefectSupervisor")
  supervisedComments Comment[]         @relation(name: "CommentSupervisor")
  zone               Zone?
  patrolChecklists   PatrolChecklist[]
  images             Image[]
  Checklists         Checklist[]
  PatrolResult       PatrolResult[]
  Session            Session?

  @@map("users")
}

// บันทึกข้อบกพร่องที่พบระหว่างการตรวจสอบ พร้อมสถานะและผู้รับผิดชอบ
model Defect {
  id             Int          @id @default(autoincrement()) @map("df_id")
  name           String       @map("df_name")
  description    String       @map("df_description")
  type           ItemType     @map("df_type")
  status         DefectStatus @map("df_status")
  startTime      DateTime     @default(now()) @map("df_start_time")
  endTime        DateTime     @default(now()) @map("df_finish_time")
  userId         Int          @map("df_us_id")
  supervisorId   Int          @map("df_su_id")
  patrolResultId Int          @map("df_pr_id")

  user         User          @relation(fields: [userId], references: [id])
  supervisor   User          @relation(name: "DefectSupervisor", fields: [supervisorId], references: [id])
  patrolResult PatrolResult  @relation(fields: [patrolResultId], references: [id])
  images       DefectImage[]

  @@map("defects")
}

// จัดเก็บข้อความแจ้งเตือนที่เกี่ยวข้องกับผู้ใช้
model Notification {
  id        Int              @id @default(autoincrement()) @map("nt_id")
  message   String           @map("nt_message")
  read      Boolean          @map("nt_read")
  timestamp DateTime         @default(now()) @map("nt_timestamp")
  type      NotificationType @map("nt_type")
  url       String?          @map("nt_url")
  userId    Int              @map("nt_us_id")

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// เก็บข้อมูลส่วนตัวของผู้ใช้ เช่น ชื่อ, อายุ, ที่อยู่
model Profile {
  id      Int     @id @default(autoincrement()) @map("pf_id")
  name    String? @map("pf_name")
  age     Int?    @map("pf_age")
  tel     String? @map("pf_tel")
  address String? @map("pf_address")
  userId  Int     @unique @map("pf_us_id")
  imageId Int?    @unique @map("pf_im_id")

  image Image? @relation("ProfileImage", fields: [imageId], references: [id])
  user  User   @relation(fields: [userId], references: [id])

  @@map("profiles")
}

// บันทึกการตรวจตรา รวมถึงเวลาที่เริ่มและสิ้นสุด
model Patrol {
  id        Int          @id @default(autoincrement()) @map("pt_id")
  date      DateTime     @map("pt_date")
  startTime DateTime?    @map("pt_start_time")
  endTime   DateTime?    @map("pt_end_time")
  duration  String?      @map("pt_duration")
  status    PatrolStatus @map("pt_status")
  presetId  Int          @map("pt_ps_id")

  patrolChecklists PatrolChecklist[]
  preset           Preset            @relation(fields: [presetId], references: [id])
  results          PatrolResult[]

  @@map("patrols")
}

// บันทึกการตรวจตราของแต่ละรายการในรอบการตรวจตรา
model PatrolChecklist {
  id          Int @id @default(autoincrement()) @map("ptcl_id")
  patrolId    Int @map("ptcl_pt_id")
  checklistId Int @map("ptcl_cl_id")
  userId      Int @map("ptcl_us_id")

  patrol    Patrol    @relation(fields: [patrolId], references: [id])
  checklist Checklist @relation(fields: [checklistId], references: [id])
  inspector User      @relation(fields: [userId], references: [id])

  @@index([patrolId, checklistId, userId])
  @@map("patrol_checklists")
}

// รายการรูปแบบการตรวจตรา
model Preset {
  id          Int      @id @default(autoincrement()) @map("ps_id")
  title       String   @map("ps_title")
  description String   @map("ps_description")
  version     Int      @map("ps_version")
  latest      Boolean  @map("ps_latest")
  updatedAt   DateTime @map("ps_update_at")
  updatedBy   Int      @map("ps_update_by")

  user             User              @relation(fields: [updatedBy], references: [id])
  presetChecklists PresetChecklist[]
  patrols          Patrol[]

  @@map("presets")
}

// รายการตรวจตราของแต่ละรายการในรูปแบบการตรวจตรา
model PresetChecklist {
  presetId    Int @map("pscl_ps_id")
  checklistId Int @map("pscl_cl_id")

  preset    Preset    @relation(fields: [presetId], references: [id])
  checklist Checklist @relation(fields: [checklistId], references: [id])

  @@id([presetId, checklistId])
  @@map("preset_checklists")
}

// รายการตรวจตรา
model Checklist {
  id        Int      @id @default(autoincrement()) @map("cl_id")
  title     String   @map("cl_title")
  version   Int      @map("cl_version")
  latest    Boolean  @map("cl_latest")
  updatedAt DateTime @default(now()) @map("cl_update_at")
  updatedBy Int      @map("cl_update_by")

  patrols          PatrolChecklist[]
  user             User              @relation(fields: [updatedBy], references: [id])
  presetChecklists PresetChecklist[]
  items            Item[]

  @@map("checklists")
}

// บันทึกผลการตรวจตราของแต่ละรายการในรอบการตรวจตรา
model PatrolResult {
  id           Int      @id @default(autoincrement()) @map("pr_id")
  status       Boolean? @map("pr_status")
  itemId       Int      @map("pr_itze_it_id")
  zoneId       Int      @map("pr_itze_ze_id")
  patrolId     Int      @map("pr_pt_id")
  supervisorId Int      @map("pr_su_id")

  comments   Comment[]
  defects    Defect[]
  itemZone   ItemZone  @relation(fields: [itemId, zoneId], references: [itemId, zoneId])
  patrol     Patrol    @relation(fields: [patrolId], references: [id])
  supervisor User      @relation(fields: [supervisorId], references: [id])

  @@map("patrol_results")
}

// หัวข้อการตรวจตรา
model Item {
  id          Int      @id @default(autoincrement()) @map("it_id")
  name        String   @map("it_name")
  type        ItemType @map("it_type")
  checklistId Int      @map("it_cl_id")

  itemZones ItemZone[]
  checklist Checklist  @relation(fields: [checklistId], references: [id])

  @@map("items")
}

// พื้นที่ตรวจตรา
model Zone {
  id         Int    @id @default(autoincrement()) @map("ze_id")
  name       String @map("ze_name")
  locationId Int    @map("ze_lt_id")
  userId     Int?   @unique @map("ze_us_id")

  itemZones  ItemZone[]
  location   Location   @relation(fields: [locationId], references: [id])
  supervisor User?      @relation(fields: [userId], references: [id])

  @@map("zones")
}

// รายการตรวจตราของแต่ละรายการในพื้นที่ตรวจตรา
model ItemZone {
  itemId Int @map("itze_it_id")
  zoneId Int @map("itze_ze_id")

  results PatrolResult[]
  item    Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  zone    Zone           @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  @@id([itemId, zoneId])
  @@map("item_zones")
}

// สถานที่ตรวจตรา
model Location {
  id   Int    @id @default(autoincrement()) @map("lt_id")
  name String @map("lt_name")

  zones Zone[]

  @@map("locations")
}

// รายการข้อเสนอแนะ
model Comment {
  id             Int      @id @default(autoincrement()) @map("cm_id")
  message        String   @map("cm_message")
  timestamp      DateTime @default(now()) @map("cm_timestamp")
  status         Boolean  @default(false)
  userId         Int      @map("cm_us_id")
  patrolResultId Int      @map("cm_pr_id")
  supervisorId   Int      @map("df_su_id")

  user         User         @relation(fields: [userId], references: [id])
  supervisor   User         @relation(name: "CommentSupervisor", fields: [supervisorId], references: [id])
  patrolResult PatrolResult @relation(fields: [patrolResultId], references: [id])

  @@map("comments")
}

// รูปภาพ
model Image {
  id        Int      @id @default(autoincrement()) @map("im_id")
  path      String   @map("im_path")
  timestamp DateTime @default(now()) @map("im_timestamp")
  updatedBy Int      @map("im_update_by")

  user     User          @relation(fields: [updatedBy], references: [id])
  profiles Profile[]     @relation("ProfileImage")
  defects  DefectImage[]

  @@map("images")
}

// บันทึกรูปภาพของข้อบกพร่องที่พบระหว่างการตรวจสอบ
model DefectImage {
  defectId Int @map("dfim_df_id")
  imageId  Int @map("dfim_im_id")

  defect Defect @relation(fields: [defectId], references: [id])
  image  Image  @relation(fields: [imageId], references: [id])

  @@id([defectId, imageId])
  @@map("defect_images")
}

// บทบาทของผู้ใช้
enum Role {
  admin
  inspector
  supervisor
}

// สถานะการตรวจตรา
enum PatrolStatus {
  pending
  scheduled
  on_going
  completed
}

// สถานะข้อบกพร่อง
enum DefectStatus {
  reported
  in_progress
  pending_inspection
  resolved
  completed
}

// ประเภทข้อบกพร่อง
enum ItemType {
  safety
  environment
  maintenance
}

// ประเภทข้อความแจ้งเตือน
enum NotificationType {
  information
  request
  system
}
