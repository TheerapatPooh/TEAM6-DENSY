// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  us_id         Int      @id @default(autoincrement())
  us_username   String   @unique 
  us_email      String?  @unique
  us_password   String
  us_role       Role
  us_department String?
  us_created_at DateTime @default(now())

  preset           Preset[]
  update_checklist Checklist[]       @relation("user")
  comment          Comment[]
  profile          Profile?
  notification     Notification[]
  defect           Defect[]
  zone             Zone?
  checklist        PatrolChecklist[]

  @@map("users")
}

model Defect {
  df_id          Int          @id @default(autoincrement())
  df_name        String
  df_description String
  df_type        String
  df_status      DefectStatus
  df_timestamp   DateTime     @default(now())
  df_us_id       Int
  df_pr_id       Int

  user          User          @relation(fields: [df_us_id], references: [us_id])
  patrol_result PatrolResult  @relation(fields: [df_pr_id], references: [pr_id])
  image         DefectImage[]

  @@map("defects")
}

model Notification {
  nt_id        Int      @id @default(autoincrement())
  nt_message   String
  nt_status    Boolean
  nt_timestamp DateTime @default(now())
  nt_us_id     Int

  user User @relation(fields: [nt_us_id], references: [us_id])

  @@map("notifications")
}

model Profile {
  pf_id      Int     @id @default(autoincrement())
  pf_name    String?
  pf_age     Int?
  pf_tel     String?
  pf_address String?
  pf_us_id   Int     @unique
  pf_im_id   Int?    @unique 
  pf_image   Image?  @relation("ProfileImage", fields: [pf_im_id], references: [im_id])

  user User @relation(fields: [pf_us_id], references: [us_id])

  @@map("profiles")
}

model Patrol {
  pt_id         Int          @id @default(autoincrement())
  pt_date       DateTime
  pt_start_time DateTime?
  pt_end_time   DateTime?
  pt_duration   String?
  pt_status     PatrolStatus
  pt_ps_id      Int

  checklist     PatrolChecklist[]
  preset        Preset            @relation(fields: [pt_ps_id], references: [ps_id])
  patrol_result PatrolResult[]

  @@map("patrols")
}

model PatrolChecklist {
  ptcl_id    Int @id @default(autoincrement())
  ptcl_pt_id Int
  ptcl_cl_id Int
  ptcl_us_id Int

  patrol    Patrol    @relation(fields: [ptcl_pt_id], references: [pt_id])
  checklist Checklist @relation(fields: [ptcl_cl_id], references: [cl_id])
  inspector User      @relation(fields: [ptcl_us_id], references: [us_id])

  @@index([ptcl_pt_id, ptcl_cl_id, ptcl_us_id])
  @@map("patrol_checklists")
}

model Preset {
  ps_id          Int      @id @default(autoincrement())
  ps_title       String
  ps_description String
  ps_version     Int
  ps_latest      Boolean
  ps_update_at   DateTime
  ps_us_id       Int

  user      User              @relation(fields: [ps_us_id], references: [us_id])
  checklist PresetChecklist[]
  patrol    Patrol[]

  @@map("presets")
}

model PresetChecklist {
  pscl_ps_id Int
  pscl_cl_id Int

  preset    Preset    @relation(fields: [pscl_ps_id], references: [ps_id])
  checklist Checklist @relation(fields: [pscl_cl_id], references: [cl_id])

  @@id([pscl_ps_id, pscl_cl_id])
  @@map("preset_checklists")
}

model Checklist {
  cl_id        Int      @id @default(autoincrement())
  cl_title     String
  cl_version   Int
  cl_latest    Boolean
  cl_update_at DateTime @default(now())
  cl_update_by Int

  patrol PatrolChecklist[]
  user   User              @relation("user", fields: [cl_update_by], references: [us_id])
  preset PresetChecklist[]
  item   Item[]

  @@map("checklists")
}

model PatrolResult {
  pr_id       Int     @id @default(autoincrement())
  pr_status   Boolean?
  pr_iz_it_id Int
  pr_iz_ze_id Int
  pr_pt_id    Int

  comment   Comment[]
  defects   Defect[]
  item_zone ItemZone  @relation(fields: [pr_iz_it_id, pr_iz_ze_id], references: [itze_it_id, itze_ze_id])
  patrol    Patrol    @relation(fields: [pr_pt_id], references: [pt_id])

  @@map("patrol_results")
}

model Item {
  it_id    Int        @id @default(autoincrement())
  it_name  String
  it_type  ItemStatus
  it_cl_id Int

  item_zone ItemZone[]
  checklist Checklist  @relation(fields: [it_cl_id], references: [cl_id])

  @@map("items")
}

model Zone {
  ze_id    Int    @id @default(autoincrement())
  ze_name  String
  ze_lt_id Int
  ze_us_id Int    @unique

  zone_items ItemZone[]
  location   Location   @relation(fields: [ze_lt_id], references: [lt_id])
  supervisor User       @relation(fields: [ze_us_id], references: [us_id])

  @@map("zones")
}

model ItemZone {
  itze_it_id Int
  itze_ze_id Int

  patrol_result PatrolResult[]
  item          Item           @relation(fields: [itze_it_id], references: [it_id], onDelete: Cascade)
  zone          Zone           @relation(fields: [itze_ze_id], references: [ze_id], onDelete: Cascade)

  @@id([itze_it_id, itze_ze_id])
  @@map("item_zones")
}

model Location {
  lt_id   Int    @id @default(autoincrement())
  lt_name String

  zone Zone[]

  @@map("locations")
}

model Comment {
  cm_id        Int      @id @default(autoincrement())
  cm_message   String
  cm_timestamp DateTime @default(now())
  cm_us_id     Int
  cm_pr_id     Int

  user          User         @relation(fields: [cm_us_id], references: [us_id])
  patrol_result PatrolResult @relation(fields: [cm_pr_id], references: [pr_id])

  @@map("comments")
}

model Image {
  im_id        Int      @id @default(autoincrement())
  im_path      String
  im_timestamp DateTime @default(now())
  
  profiles Profile[] @relation("ProfileImage") 
  defect  DefectImage[]

  @@map("images")
}

model DefectImage {
  dfim_df_id Int
  dfim_im_id Int

  defect Defect @relation(fields: [dfim_df_id], references: [df_id])
  image  Image  @relation(fields: [dfim_im_id], references: [im_id])

  @@id([dfim_df_id, dfim_im_id])
  @@map("defect_images")
}

enum Role {
  admin
  inspector
  supervisor
}

enum PatrolStatus {
  pending
  scheduled
  on_going
  completed
}

enum DefectStatus {
  reported
  in_progress
  pending_inspection
  resolved
  completed
}

enum ItemStatus {
  safety
  environment
  maintenance
}
