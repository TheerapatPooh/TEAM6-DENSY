[{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\eslint-report.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Controllers\\defect-controller.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":17,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":28,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2477,2543],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { prisma } from '@Utils/database.js'\r\nimport { Request, Response } from 'express'\r\nimport transformKeys, { keyMap } from '@Utils/key-map';\r\n\r\nexport async function createDefect(req: Request, res: Response) {\r\n    try {\r\n        const role = (req as any).user.role;\r\n        const userId = (req as any).user.userId;\r\n        const { name, description, type, status, defectUserId, patrolResultId } = req.body;\r\n        const imageFiles = req.files as Express.Multer.File[]; // Cast to an array of Multer files\r\n\r\n        if (role !== 'admin' && role !== 'inspector') {\r\n            res.status(403).json({ message: \"Access Denied: Admins or Inspectors only\" });\r\n            return\r\n        }\r\n\r\n        const validPatrol = await prisma.patrol.findFirst({\r\n            where: {\r\n                result: {\r\n                    some: {\r\n                        pr_id: parseInt(patrolResultId),\r\n                    },\r\n                },\r\n                patrolChecklist: {\r\n                    some: {\r\n                        ptcl_us_id: parseInt(userId),\r\n                    },\r\n                },\r\n            },\r\n        });\r\n\r\n        if (!validPatrol) {\r\n            res.status(404).json({ message: \"You are not associated with this Patrol or PatrolResult not found\" });\r\n            return\r\n        }\r\n\r\n        const newDefect = await prisma.defect.create({\r\n            data: {\r\n                df_name: name,\r\n                df_description: description,\r\n                df_type: type,\r\n                df_status: status,\r\n                user: { connect: { us_id: parseInt(defectUserId) } },\r\n                patrolResult: { connect: { pr_id: parseInt(patrolResultId) } },\r\n            },\r\n        });\r\n        const updateResult = async (patrolResultId: number) => {\r\n            try {\r\n                const result = await prisma.patrolResult.findUnique({\r\n                    where: {\r\n                        pr_id: parseInt(patrolResultId.toString()), // Ensure it's an integer\r\n                    },\r\n                });\r\n\r\n                if (!result) {\r\n                    console.error(\"Patrol result not found\");\r\n                    return;\r\n                }\r\n\r\n                const updatedResult = await prisma.patrolResult.update({\r\n                    where: { pr_id: parseInt(patrolResultId.toString()) },\r\n                    data: {\r\n                        pr_status: false,\r\n                    },\r\n                });\r\n\r\n                console.log(\"Patrol result updated successfully:\", updatedResult);\r\n                return updatedResult;\r\n            } catch (error) {\r\n                console.error(\"Error updating patrol result:\", error);\r\n            }\r\n        };\r\n        updateResult(patrolResultId)\r\n        if (Array.isArray(imageFiles)) {\r\n            for (const imageFile of imageFiles) {\r\n                const imagePath = imageFile.filename; // Get the path of each uploaded file\r\n                const image = await prisma.image.create({\r\n                    data: {\r\n                        im_path: imagePath,\r\n                        im_update_by: parseInt(defectUserId),\r\n                    },\r\n                });\r\n\r\n                if (image) {\r\n                    await prisma.defectImage.create({\r\n                        data: {\r\n                            dfim_df_id: newDefect.df_id,\r\n                            dfim_im_id: image.im_id,\r\n                        },\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            console.error(\"No files uploaded or incorrect file structure.\");\r\n        }\r\n\r\n        let result = transformKeys(newDefect, keyMap);\r\n\r\n\r\n        res.status(201).json(result);\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n    }\r\n}\r\n\r\nexport async function getDefect(req: Request, res: Response) {\r\n    try {\r\n        const role = (req as any).user.role;\r\n        const userId = (req as any).user.userId;\r\n\r\n        if (role !== 'admin' && role !== 'inspector') {\r\n            res.status(403).json({ message: \"Access Denied: Admins or Inspectors only\" });\r\n            return\r\n        }\r\n\r\n        const { id } = req.params;\r\n\r\n        const defect = await prisma.defect.findUnique({\r\n            where: {\r\n                df_id: Number(id),\r\n            },\r\n        });\r\n\r\n        if (!defect) {\r\n            res.status(404).json({ message: \"Defect not found\" });\r\n            return\r\n        }\r\n\r\n        const validPatrol = await prisma.patrol.findFirst({\r\n            where: {\r\n                result: {\r\n                    some: {\r\n                        pr_id: defect.df_pr_id,\r\n                    }\r\n                },\r\n                patrolChecklist: {\r\n                    some: {\r\n                        ptcl_us_id: userId,\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (!validPatrol) {\r\n            res.status(404).json({ message: \"You are not associated with this Patrol\" });\r\n            return\r\n        }\r\n\r\n        let result = transformKeys(defect, keyMap);\r\n\r\n        res.status(200).json(result);\r\n        return\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n        return\r\n    }\r\n}\r\n\r\nexport async function getAllDefect(req: Request, res: Response) {\r\n    try {\r\n        const role = (req as any).user.role;\r\n        const userId = (req as any).user.userId;\r\n\r\n        if (role !== 'admin' && role !== 'inspector') {\r\n            res.status(403).json({ message: \"Access Denied: Admins or Inspectors only\" });\r\n            return\r\n        }\r\n\r\n        const patrolId = parseInt(req.params.id, 10);\r\n        const validPatrol = await prisma.patrol.findFirst({\r\n            where: {\r\n                pt_id: patrolId,\r\n                patrolChecklist: {\r\n                    some: {\r\n                        ptcl_us_id: userId,\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (!validPatrol) {\r\n            res.status(404).json({ message: \"You are not associated with this Patrol\" });\r\n            return\r\n        }\r\n\r\n        const defects = await prisma.defect.findMany({\r\n            where: {\r\n                patrolResult: {\r\n                    pr_pt_id: patrolId\r\n                },\r\n            },\r\n            include: {\r\n                patrolResult: {\r\n                    select: {\r\n                        pr_itze_ze_id: true\r\n                    }\r\n                },\r\n                image:{\r\n                    select: {\r\n                        image: {\r\n                            select: {\r\n                                im_id: true,\r\n                                im_path: true,\r\n                                user: true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        let result = defects.map((defect: any) => transformKeys(defect, keyMap));\r\n        res.status(200).json(result);\r\n        return\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n        return\r\n    }\r\n}\r\n\r\nexport async function updateDefect(req: Request, res: Response) {\r\n    try {\r\n        const role = (req as any).user.role;\r\n        const userId = (req as any).user.userId;\r\n\r\n        const { id } = req.params;\r\n        const { name, description, type, status, userId: defectUserId, patrolResultId } = req.body;\r\n\r\n        if (role !== 'admin' && role !== 'inspector') {\r\n            res.status(403).json({ message: \"Access Denied: Admins or Inspectors only\" });\r\n            return\r\n        }\r\n\r\n        const defect = await prisma.defect.findUnique({\r\n            where: {\r\n                df_id: Number(id),\r\n            }\r\n        });\r\n\r\n        if (!defect) {\r\n            res.status(404).json({ message: \"Defect not found\" });\r\n            return\r\n        }\r\n\r\n        const validPatrol = await prisma.patrol.findFirst({\r\n            where: {\r\n                result: {\r\n                    some: {\r\n                        pr_id: defect.df_pr_id,\r\n                    }\r\n                },\r\n                patrolChecklist: {\r\n                    some: {\r\n                        ptcl_us_id: userId,\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (!validPatrol) {\r\n            res.status(404).json({ message: \"You are not associated with this Patrol\" });\r\n            return\r\n        }\r\n\r\n        const updatedDefect = await prisma.defect.update({\r\n            where: {\r\n                df_id: Number(id),\r\n            },\r\n            data: {\r\n                df_name: name,\r\n                df_description: description,\r\n                df_type: type,\r\n                df_status: status,\r\n                user: { connect: { us_id: defectUserId } },\r\n                patrolResult: { connect: { pr_id: patrolResultId } }\r\n            },\r\n        });\r\n\r\n        const result = {\r\n            name: updatedDefect.df_name,\r\n            description: updatedDefect.df_description,\r\n            type: updatedDefect.df_type,\r\n            status: updatedDefect.df_status,\r\n            userId: updatedDefect.df_us_id,\r\n            patrolResultId: updatedDefect.df_pr_id\r\n        };\r\n\r\n        res.status(200).json(result);\r\n        return\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n        return\r\n    }\r\n}\r\n\r\nexport async function deleteDefect(req: Request, res: Response): Promise<void> {\r\n    try {\r\n        const role = (req as any).user.role;\r\n        const userId = (req as any).user.userId;\r\n\r\n        if (role !== 'admin' && role !== 'inspector') {\r\n            res.status(403).json({ message: \"Access Denied: Admins or Inspectors only\" });\r\n            return\r\n        }\r\n\r\n        const { id } = req.params;\r\n\r\n        const defect = await prisma.defect.findUnique({\r\n            where: {\r\n                df_id: Number(id),\r\n            }\r\n        });\r\n\r\n        if (!defect) {\r\n            res.status(404).json({ message: \"Defect not found\" });\r\n            return\r\n        }\r\n\r\n        const validPatrol = await prisma.patrol.findFirst({\r\n            where: {\r\n                result: {\r\n                    some: {\r\n                        pr_id: defect.df_pr_id,\r\n                    }\r\n                },\r\n                patrolChecklist: {\r\n                    some: {\r\n                        ptcl_us_id: userId,\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (!validPatrol) {\r\n            res.status(404).json({ message: \"You are not associated with this Patrol\" });\r\n            return\r\n        }\r\n\r\n        await prisma.defect.delete({\r\n            where: {\r\n                df_id: Number(id),\r\n            }\r\n        });\r\n        res.status(200).json({ message: 'Defect deleted successfully', });\r\n        return\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n        return\r\n    }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Controllers\\location-controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":35,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":65,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { prisma } from '@Utils/database.js'\r\nimport { Request, Response } from 'express'\r\nimport transformKeys, { keyMap } from '@Utils/key-map';\r\n\r\nexport async function getZone(req: Request, res: Response) {\r\n    try {\r\n        const userRole = (req as any).user.role;\r\n        if (userRole !== 'admin' && userRole !== 'inspector') {\r\n            res.status(403).json({ message: \"Access Denied: Admins only\" });\r\n            return\r\n        }\r\n        const zoneId = parseInt(req.params.id, 10)\r\n        const zone = await prisma.zone.findUnique({\r\n            where: { ze_id: zoneId },\r\n            include: {\r\n                supervisor: {\r\n                    include: {\r\n                        profile: {\r\n                            include: {\r\n                                image: true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        if (!zone) {\r\n            res.status(404)\r\n            return\r\n        }\r\n        let result = transformKeys(zone, keyMap);\r\n     \r\n        res.status(200).send(result)\r\n        return\r\n    } catch (err) {\r\n        res.status(500)\r\n        return\r\n    }\r\n}\r\n\r\nexport async function getLocation(req: Request, res: Response) {\r\n    try {\r\n        const id = parseInt(req.params.id, 10);\r\n        const userRole = (req as any).user.role;\r\n        if (userRole !== 'admin' && userRole !== 'inspector') {\r\n            res.status(403).json({ message: \"Access Denied: Admins only\" });\r\n            return\r\n        }\r\n        const location = await prisma.location.findUnique({\r\n            where: { lt_id: id },\r\n            include: {\r\n                zone: true\r\n            }\r\n        })\r\n\r\n        if (!location) {\r\n            res.status(404)\r\n            return\r\n        }\r\n\r\n        let result = transformKeys(location, keyMap);\r\n\r\n        res.send(result)\r\n        return\r\n    } catch (err) {\r\n        res.status(500)\r\n        return\r\n    }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Controllers\\patrol-controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":181,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":181,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":249,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":249,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":311,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":311,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":378,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":378,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":540,"column":21,"nodeType":"MemberExpression","messageId":"unexpected","endLine":540,"endColumn":32,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17994,18059],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":551,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":551,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18470,18532],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { prisma } from '@Utils/database.js'\r\nimport { Request, Response } from 'express'\r\nimport axios from 'axios';\r\nimport { createNotification } from '@Controllers/util-controller.js';\r\nimport { NotificationType, PatrolStatus } from '@prisma/client';\r\nimport transformKeys, { keyMap } from '@Utils/key-map.js';\r\n\r\nexport async function getPatrol(req: Request, res: Response) {\r\n    try {\r\n        const includePreset = req.query.preset === \"true\";\r\n        const includeResult = req.query.result === \"true\";\r\n\r\n        const role = (req as any).user.role\r\n        const userId = (req as any).user.userId\r\n        const patrolId = parseInt(req.params.id, 10)\r\n\r\n        if (role !== 'admin' && role !== 'inspector') {\r\n            res.status(403).json({ message: \"Access Denied: Admins or Inspectors only\" })\r\n            return\r\n        }\r\n\r\n        let patrol: any\r\n\r\n        patrol = await prisma.patrol.findFirst({\r\n            where: {\r\n                pt_id: patrolId,\r\n                patrolChecklist: {\r\n                    some: {\r\n                        ptcl_us_id: userId\r\n                    }\r\n                }\r\n            },\r\n            include: {\r\n                preset: includePreset ? {\r\n                    select: {\r\n                        ps_id: true,\r\n                        ps_title: true,\r\n                        ps_description: true,\r\n                    }\r\n                } : undefined,\r\n                patrolChecklist: {\r\n                    include: {\r\n                        checklist: {\r\n                            select: {\r\n                                cl_id: true,\r\n                                cl_title: true,\r\n                                item: {\r\n                                    include: {\r\n                                        itemZone: {\r\n                                            select: {\r\n                                                zone: {\r\n                                                    select: {\r\n                                                        ze_id: true,\r\n                                                        ze_name: true,\r\n                                                        supervisor: {\r\n                                                            select: {\r\n                                                                us_id: true,\r\n                                                                profile: {\r\n                                                                    select: {\r\n                                                                        pf_name: true\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        inspector: {\r\n                            include: {\r\n                                profile: {\r\n                                    include: {\r\n                                        image: true\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                result: includeResult ? {\r\n                    include: {\r\n                        defects: true\r\n                    }\r\n                } : undefined\r\n            }\r\n        })\r\n\r\n        if (!patrol) {\r\n            res.status(404)\r\n            return\r\n        }\r\n        let result = transformKeys(patrol, keyMap);\r\n\r\n        res.status(200).json(result)\r\n        return\r\n    } catch (error) {\r\n        console.error(error)\r\n        res.status(500).json({ message: \"Internal server error\" })\r\n        return\r\n    }\r\n}\r\n\r\nexport async function getAllPatrols(req: Request, res: Response) {\r\n    try {\r\n        const filterStatus = req.query.status as PatrolStatus | undefined;\r\n\r\n        const role = (req as any).user.role\r\n        const userId = (req as any).user.userId\r\n        if (role !== 'admin' && role !== 'inspector') {\r\n            res.status(403).json({ message: \"Access Denied: Admins only\" })\r\n            return\r\n        }\r\n        let allPatrols: any\r\n\r\n        allPatrols = await prisma.patrol.findMany({\r\n            where: {\r\n                pt_status: filterStatus,\r\n                patrolChecklist: {\r\n                    some: {\r\n                        ptcl_us_id: userId\r\n                    }\r\n                }\r\n            },\r\n            select: {\r\n                pt_id: true,\r\n                pt_date: true,\r\n                pt_status: true,\r\n                preset: {\r\n                    select: {\r\n                        ps_title: true,\r\n                    }\r\n                },\r\n                patrolChecklist: {\r\n                    include: {\r\n                        checklist: {\r\n                            select: {\r\n                                cl_id: true,\r\n                                cl_title: true,\r\n                                item: {\r\n                                    include: {\r\n                                        itemZone: {\r\n                                            select: {\r\n                                                zone: {\r\n                                                    select: {\r\n                                                        ze_id: true,\r\n                                                        ze_name: true\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        inspector: {\r\n                            select: {\r\n                                us_id: true,\r\n                                us_email: true,\r\n                                profile: {\r\n                                    include: {\r\n                                        image: true\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        let result = allPatrols.map((patrol: any) => transformKeys(patrol, keyMap));\r\n\r\n        res.status(200).json(result)\r\n        return\r\n    } catch (error) {\r\n        res.status(500)\r\n        return\r\n    }\r\n}\r\n\r\nexport async function createPatrol(req: Request, res: Response) {\r\n    try {\r\n        const userRole = (req as any).user.role;\r\n        if (userRole !== 'admin' && userRole !== 'inspector') {\r\n            res.status(403).json({ message: \"Access Denied: Admins only\" });\r\n            return\r\n        }\r\n\r\n        const { date, presetId, checklists } = req.body;\r\n\r\n        if (!date || !presetId || !checklists) {\r\n            res.status(400).json({ message: \"Missing required fields\" });\r\n            return\r\n        }\r\n\r\n        const patrolDate = new Date(date);\r\n        const today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        patrolDate.setHours(0, 0, 0, 0);\r\n\r\n        const status = patrolDate.getTime() === today.getTime() ? \"scheduled\" : \"pending\";\r\n\r\n        const newPatrol = await prisma.patrol.create({\r\n            data: {\r\n                pt_date: patrolDate,\r\n                pt_status: status,\r\n                pt_ps_id: parseInt(presetId, 10),\r\n            },\r\n        });\r\n\r\n        const notifiedInspectors = new Set<number>();\r\n\r\n        for (const checklist of checklists) {\r\n            const { checklistId, userId } = checklist;\r\n\r\n            if (!checklistId || !userId) {\r\n                continue\r\n            }\r\n\r\n            await prisma.patrolChecklist.create({\r\n                data: {\r\n                    ptcl_pt_id: newPatrol.pt_id,\r\n                    ptcl_cl_id: checklistId,\r\n                    ptcl_us_id: userId,\r\n                },\r\n            });\r\n\r\n            if (!notifiedInspectors.has(userId)) {\r\n                const message = `You have been assigned to a patrol scheduled for ${new Date(date).toLocaleDateString()}.`;\r\n                await createNotification({\r\n                    nt_message: message,\r\n                    nt_type: 'request' as NotificationType,\r\n                    nt_url: `/patrol/${newPatrol.pt_id}`,\r\n                    nt_us_id: userId,\r\n                });\r\n\r\n                notifiedInspectors.add(userId);\r\n            }\r\n        }\r\n        let result = transformKeys(newPatrol, keyMap);\r\n        res.status(201).json(result);\r\n\r\n    } catch (err) {\r\n    }\r\n}\r\n\r\nexport async function startPatrol(req: Request, res: Response) {\r\n    try {\r\n        const role = (req as any).user.role\r\n        const userId = (req as any).user.userId\r\n        const patrolId = parseInt(req.params.id, 10)\r\n        const { status, checklist } = req.body\r\n\r\n        const isUserInspector = checklist.some((checklistObj: any) => {\r\n            return checklistObj.inspector.id === userId;\r\n        });\r\n\r\n        if (!isUserInspector) {\r\n            res.status(403).json({ message: \"You are not authorized to start this patrol. Only assigned inspectors can start the patrol.\" });\r\n            return\r\n        }\r\n\r\n        if (role !== 'admin' && role !== 'inspector') {\r\n            res.status(403).json({ message: \"Access Denied\" })\r\n            return\r\n        }\r\n\r\n        if (!status || !checklist) {\r\n            res.status(400)\r\n            return\r\n        }\r\n\r\n        if (status !== 'scheduled') {\r\n            res.status(403).json({ message: \"Cannot start patrol.\" });\r\n            return\r\n        }\r\n\r\n        const updatePatrol = await prisma.patrol.update({\r\n            where: {\r\n                pt_id: patrolId,\r\n            },\r\n            data: {\r\n                pt_status: 'on_going',\r\n                pt_start_time: new Date(),\r\n            },\r\n        });\r\n\r\n        for (const checklistObj of checklist) {\r\n            for (const item of checklistObj.checklist.item) {\r\n                for (const zone of item.itemZone) {\r\n                    await prisma.patrolResult.create({\r\n                        data: {\r\n                            pr_status: null,\r\n                            pr_itze_it_id: item.id,\r\n                            pr_itze_ze_id: zone.zone.id,\r\n                            pr_pt_id: updatePatrol.pt_id,\r\n                        },\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        let result = transformKeys(updatePatrol, keyMap);\r\n        res.status(200).json(result)\r\n        return\r\n    } catch (err) {\r\n        res.status(500)\r\n        return\r\n    }\r\n}\r\n\r\nexport async function finishPatrol(req: Request, res: Response) {\r\n    try {\r\n        const role = (req as any).user.role\r\n        const userId = (req as any).user.userId\r\n        const patrolId = parseInt(req.params.id, 10)\r\n        const { status, checklist, result, startTime } = req.body\r\n\r\n        if (role !== 'admin' && role !== 'inspector') {\r\n            res.status(403).json({ message: \"Access Denied\" })\r\n            return\r\n        }\r\n\r\n        const isUserInspector = checklist.some((checklistObj: any) => {\r\n            return checklistObj.inspector.id === userId;\r\n        });\r\n\r\n        if (!isUserInspector) {\r\n            res.status(403).json({ message: \"You are not authorized to finish this patrol. Only assigned inspectors can start the patrol.\" });\r\n            return\r\n        }\r\n\r\n\r\n        if (!checklist || !result) {\r\n            res.status(400).json({ message: \"Invalid Data\" })\r\n            return\r\n        }\r\n\r\n        if (status !== 'on_going') {\r\n            res.status(403).json({ message: \"Cannot finish patrol.\" });\r\n            return\r\n        }\r\n        const duration = calculateDuration(startTime);\r\n\r\n        const updatePatrol = await prisma.patrol.update({\r\n            where: {\r\n                pt_id: patrolId,\r\n            },\r\n            data: {\r\n                pt_status: 'completed',\r\n                pt_end_time: new Date(),\r\n                pt_duration: duration,\r\n            },\r\n        });\r\n\r\n        for (const resultObj of result) {\r\n            const { id, status } = resultObj;\r\n\r\n            await prisma.patrolResult.update({\r\n                where: {\r\n                    pr_id: id,\r\n                },\r\n                data: {\r\n                    pr_status: status,\r\n                },\r\n            });\r\n        }\r\n        let json = transformKeys(updatePatrol, keyMap);\r\n\r\n        res.status(200).json(json)\r\n        return\r\n\r\n    } catch (err) {\r\n        res.status(500)\r\n        return\r\n    }\r\n}\r\n\r\nexport async function removePatrol(req: Request, res: Response) {\r\n    try {\r\n        const patrolId = parseInt(req.params.id, 10);\r\n\r\n        await prisma.patrolChecklist.deleteMany({\r\n            where: {\r\n                ptcl_pt_id: patrolId,\r\n            },\r\n        });\r\n\r\n        await prisma.patrolResult.deleteMany({\r\n            where: {\r\n                pr_pt_id: patrolId,\r\n            }\r\n        });\r\n\r\n        await prisma.patrol.delete({\r\n            where: {\r\n                pt_id: patrolId,\r\n            },\r\n        });\r\n\r\n        res.status(200).json({\r\n            message: 'Patrol and related records successfully deleted',\r\n        });\r\n        return\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({\r\n            message: 'Failed to delete patrol',\r\n        });\r\n        return\r\n    }\r\n\r\n}\r\n\r\nexport async function updatePatrolStatus(req: Request, res: Response) {\r\n    try {\r\n        const { patrolId, status } = req.body; // Destructure patrolId and status from the request body\r\n\r\n        // Validate input\r\n        if (!patrolId || !status) {\r\n            return res.status(400).json({ message: \"Patrol ID and status are required.\" });\r\n        }\r\n\r\n        // Update the patrol status in the database\r\n        const updatedPatrol = await prisma.patrol.update({\r\n            where: { pt_id: patrolId },\r\n            data: { pt_status: status },\r\n        });\r\n        let result = transformKeys(updatedPatrol, keyMap);\r\n        res.status(200).json(result);\r\n        return\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ message: \"An error occurred while updating the patrol status.\" });\r\n        return\r\n    }\r\n}\r\n\r\nexport async function commentPatrol(req: Request, res: Response) {\r\n    try {\r\n        const role = (req as any).user.role;\r\n        const userId = (req as any).user.userId;\r\n\r\n        // ตรวจสอบสิทธิ์ว่าเป็น Inspector หรือไม่\r\n        if (role !== 'inspector') {\r\n            res.status(403).json({ message: \"Access Denied: Inspectors only\" });\r\n            return\r\n        }\r\n\r\n        // รับข้อมูลจาก request body\r\n        const { patrolId, message, checklist, patrolResultId } = req.body;\r\n\r\n        // ตรวจสอบว่าข้อมูลที่ส่งมาครบถ้วน\r\n        if (!patrolId || !message || !checklist || !patrolResultId) {\r\n            res.status(400).json({ message: \"Bad Request: Missing required fields\" });\r\n            return\r\n        }\r\n\r\n        // ตรวจสอบว่าผู้ใช้เกี่ยวข้องกับ Patrol นี้หรือไม่\r\n        const validPatrol = await prisma.patrol.findUnique({\r\n            where: {\r\n                pt_id: parseInt(patrolId, 10),\r\n                patrolChecklist: {\r\n                    some: {\r\n                        ptcl_us_id: userId,\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        if (!validPatrol) {\r\n            res.status(404).json({ message: \"Patrol or checklist not found\" });\r\n            return\r\n        }\r\n\r\n        // รับ message เข้ามา และเชื่อมกับ PatrolResult\r\n        const newComment = await prisma.comment.create({\r\n            data: {\r\n                cm_message: message,\r\n                cm_timestamp: new Date(),\r\n                cm_us_id: userId,\r\n                cm_pr_id: patrolResultId\r\n            }\r\n        });\r\n\r\n        // ส่งข้อมูลคอมเมนต์พร้อมวันที่และเวลาที่บันทึกกลับไป\r\n        let result = transformKeys(newComment, keyMap);\r\n        res.status(201).json(result);\r\n        return\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n        return\r\n    }\r\n}\r\n\r\nexport async function getCommentPatrol(req: Request, res: Response) {\r\n    try {\r\n        const commentId = parseInt(req.params.id, 10);\r\n\r\n        const comments = await prisma.comment.findMany({\r\n            where: {\r\n                cm_id: commentId\r\n            }\r\n        });\r\n\r\n        let result = transformKeys(comments, keyMap);\r\n        res.status(200).json(result);\r\n        return\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ message: \"Internal server error\" });\r\n        return\r\n    }\r\n}\r\n\r\n// ฟังก์ชันสำหรับตรวจสอบและอัปเดต patrols ที่มีสถานะ pending\r\nexport async function checkAndUpdatePendingPatrols() {\r\n    try {\r\n        const response = await axios.get(`${process.env.SERVER_URL}/patrols?status=pending`);\r\n        const patrols = response.data;\r\n\r\n        const today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n\r\n        for (const patrol of patrols) {\r\n            const patrolDate = new Date(patrol.date);\r\n            patrolDate.setHours(0, 0, 0, 0);\r\n\r\n            if (patrolDate.getTime() === today.getTime()) {\r\n                try {\r\n                    await axios.put(`${process.env.SERVER_URL}/patrol/${patrol.id}/status`, {\r\n                        patrolId: patrol.id,\r\n                        status: \"scheduled\"\r\n                    });\r\n                    console.log(`Patrol ${patrol.id} status updated to \"on_going\".`);\r\n                } catch (error) {\r\n                    if (axios.isAxiosError(error)) {\r\n                        console.error(`Error updating patrol ${patrol.id}:`, error.response?.data || error.message);\r\n                    } else {\r\n                        console.error(`Unknown error updating patrol ${patrol.id}:`, error);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(\"Checked and updated pending patrols for today.\");\r\n    } catch (error) {\r\n        if (axios.isAxiosError(error)) {\r\n            console.error(\"Error fetching patrol:\", error.response?.data || error.message);\r\n        } else {\r\n            console.error(\"Unknown error fetching or updating patrols:\", error);\r\n        }\r\n    }\r\n}\r\n\r\n// ฟังก์ชันสำหรับ schedule การ update status ของ patrol ทุกเที่ยงคืน\r\nexport function schedulePatrolStatusUpdate() {\r\n    const now = new Date();\r\n    const nextMidnight = new Date();\r\n    nextMidnight.setHours(24, 0, 0, 0);\r\n    const timeUntilMidnight = nextMidnight.getTime() - now.getTime();\r\n\r\n    setTimeout(() => {\r\n        checkAndUpdatePendingPatrols();\r\n        setInterval(checkAndUpdatePendingPatrols, 24 * 60 * 60 * 1000);\r\n    }, timeUntilMidnight);\r\n}\r\n\r\n// ฟังก์ชันสำหรับ คำนวณ Duration ของ patrol\r\nconst calculateDuration = (startTime: string): string => {\r\n    // แปลง startTime เป็น Date object\r\n    const start = new Date(startTime);\r\n\r\n    // คำนวณเวลาปัจจุบัน\r\n    const end = new Date();\r\n\r\n    // คำนวณความแตกต่างในหน่วยมิลลิวินาที\r\n    const durationMs = end.getTime() - start.getTime();\r\n\r\n    // แปลงมิลลิวินาทีเป็นหน่วยชั่วโมง นาที และวินาที\r\n    const hours = Math.floor(durationMs / (1000 * 60 * 60));\r\n    const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((durationMs % (1000 * 60)) / 1000);\r\n\r\n    // แสดงผลในรูปแบบที่อ่านง่าย เช่น \"2h 15m 30s\"\r\n    return `${hours}h ${minutes}m ${seconds}s`;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Controllers\\preset-controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Preset' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":48,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":96,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { prisma } from '@Utils/database.js'\r\nimport { Request, Response } from 'express'\r\nimport transformKeys, { keyMap } from '@Utils/key-map.js'\r\nimport { Preset } from '@prisma/client'\r\n\r\nexport async function getPreset(req: Request, res: Response) {\r\n    try {\r\n        const presetId = parseInt(req.params.id, 10)\r\n        const preset = await prisma.preset.findUnique({\r\n            where: { ps_id: presetId },\r\n            select: {\r\n                ps_id: true,\r\n                ps_title: true,\r\n                ps_description: true,\r\n                presetChecklist: {\r\n                    select: {\r\n                        checklist: {\r\n                            select: {\r\n                                cl_id: true,\r\n                                cl_title: true,\r\n                                item: {\r\n                                    include: {\r\n                                        itemZone: {\r\n                                            select: {\r\n                                                zone: {\r\n                                                    select: {\r\n                                                        ze_id: true,\r\n                                                        ze_name: true,\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        if (!preset) {\r\n            res.status(404)\r\n            return\r\n        }\r\n        let result = transformKeys(preset, keyMap);\r\n        res.status(200).json(result)\r\n    } catch (err) {\r\n        res.status(500)\r\n    }\r\n}\r\n\r\nexport async function getAllPresets(req: Request, res: Response) {\r\n    try {\r\n        const latest = req.query.latest === \"true\";\r\n        const presets = await prisma.preset.findMany({\r\n            where: latest ? { ps_latest: latest } : undefined,\r\n            select: {\r\n                ps_id: true,\r\n                ps_title: true,\r\n                ps_description: true,\r\n                presetChecklist: {\r\n                    select: {\r\n                        checklist: {\r\n                            select: {\r\n                                cl_id: true,\r\n                                cl_title: true,\r\n                                item: {\r\n                                    include: {\r\n                                        itemZone: {\r\n                                            select: {\r\n                                                zone: {\r\n                                                    select: {\r\n                                                        ze_id: true,\r\n                                                        ze_name: true,\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        if (!presets.length) {\r\n            res.status(404)\r\n            return\r\n        }\r\n\r\n        let result = presets.map((preset: any) => transformKeys(preset, keyMap));\r\n        res.status(200).json(result)\r\n    } catch (err) {\r\n        res.status(500)\r\n    }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Controllers\\user-controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Controllers\\util-controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":88,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":203,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":203,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5844,5912],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":228,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":228,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6438,6489],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import bcrypt from \"bcryptjs\";\r\nimport { prisma } from \"@Utils/database.js\";\r\nimport { NextFunction, Request, Response } from \"express\";\r\nimport jwt, { JwtPayload } from 'jsonwebtoken'\r\nimport multer from 'multer';\r\nimport { getIOInstance } from '@Utils/socket.js';\r\nimport nodemailer from 'nodemailer';\r\nimport transformKeys, { keyMap } from \"@Utils/key-map.js\";\r\n\r\n\r\n\r\n\r\ndeclare global {\r\n  namespace Express {\r\n    interface Request {\r\n      user?: string | JwtPayload;\r\n    }\r\n  }\r\n}\r\n//Login\r\nexport async function login(req: Request, res: Response) {\r\n  const { username, password, rememberMe } = req.body;\r\n  try {\r\n    const user = await prisma.user.findUnique({\r\n      where: { us_username: username },\r\n    });\r\n\r\n    if (!user) {\r\n      res.status(401).json({ message: \"Invalid username or password\" })\r\n      return\r\n    }\r\n\r\n    const passwordMatch = await bcrypt.compare(password, user.us_password)\r\n\r\n    if (!passwordMatch) {\r\n      res.status(401).json({ message: \"Invalid username or password\" })\r\n      return\r\n    }\r\n    const jwtSecret = process.env.JWT_SECRET || \"defaultSecretKey\"; \r\n    const token = jwt.sign({ userId: user.us_id, role: user.us_role }, jwtSecret, { expiresIn: \"1h\" })\r\n    // Set HttpOnly cookie with the token\r\n    const maxAge = rememberMe ? 30 * 24 * 60 * 60 * 1000 : 1 * 60 * 60 * 1000\r\n    const isProduction = process.env.NODE_ENV === 'production';\r\n\r\n    res.cookie(\"authToken\", token, {\r\n      httpOnly: true,\r\n      secure: isProduction,\r\n      sameSite: isProduction ? 'none' : 'lax',\r\n      maxAge: maxAge\r\n    })\r\n\r\n    res.status(200).json({ message: \"Login Success\", token })\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Login failed\", error })\r\n  }\r\n}\r\n\r\n//Logout\r\nexport async function logout(req: Request, res: Response) {\r\n  const isProduction = process.env.NODE_ENV === 'production';\r\n  try {\r\n    // ลบ cookie authToken\r\n    res.clearCookie(\"authToken\", {\r\n      httpOnly: true,\r\n      secure: isProduction,\r\n      sameSite: isProduction ? 'none' : 'lax',\r\n    });\r\n    // ส่ง response กลับไปหาผู้ใช้เพื่อแจ้งว่า logout สำเร็จ\r\n    res.status(200).json({ message: \"Logout successful\" });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Logout failed\", error });\r\n  }\r\n}\r\n\r\nexport function authenticateUser(req: Request, res: Response, next: NextFunction) {\r\n  const token = req.cookies.authToken\r\n\r\n  if (!token) {\r\n    res.status(401).json({ message: \"Access Denied, No Token Provided\" })\r\n    return \r\n  }\r\n\r\n  try {\r\n    const jwtSecret = process.env.JWT_SECRET || \"defaultSecretKey\"\r\n    const decoded = jwt.verify(token, jwtSecret)\r\n    req.user = decoded\r\n    next();\r\n  } catch (error) {\r\n    res.status(400).json({ message: \"Invalid Token\" })\r\n    return \r\n  }\r\n}\r\n\r\n\r\n\r\n//Upload Image\r\nconst storage = multer.diskStorage({\r\n  destination: function (req, file, callback) {\r\n    callback(null, 'uploads/'); // Keep the upload path for file storage\r\n  },\r\n  filename: function (req, file, callback) {\r\n    const uniqueSuffix = Date.now() + '-' + file.originalname;\r\n    callback(null, uniqueSuffix); // Store only the filename\r\n  }\r\n});\r\n\r\nexport const upload = multer({ storage: storage });\r\n\r\n\r\n\r\n//Notification\r\nexport async function getNotifications(req: Request, res: Response) {\r\n  try {\r\n    const userId = (req as any).user.userId;\r\n\r\n    const notifications = await prisma.notification.findMany({\r\n      where: { nt_us_id: userId },\r\n      orderBy: { nt_timestamp: 'desc' },\r\n    });\r\n    let result = transformKeys(notifications, keyMap);\r\n\r\n    res.status(200).json(result);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error fetching notifications\", error });\r\n  }\r\n}\r\n\r\nexport async function createNotification({ nt_message, nt_type, nt_url, nt_us_id }: any) {\r\n  try {\r\n    const notification = await prisma.notification.create({\r\n      data: {\r\n        nt_message,\r\n        nt_timestamp: new Date(),\r\n        nt_type,\r\n        nt_url,\r\n        nt_read: false,\r\n        nt_us_id,\r\n      },\r\n    });\r\n\r\n    const user = await prisma.user.findUnique({\r\n      where: { us_id: nt_us_id },\r\n      select: { us_email: true },\r\n    });\r\n\r\n    // ส่งอีเมลแจ้งเตือนไปยังผู้ใช้\r\n    if (user?.us_email) {\r\n      const emailSubject = 'New Notification';\r\n      const emailMessage = `You have a new notification: ${nt_message}. Check it here: ${nt_url}`;\r\n\r\n      await sendEmail(user.us_email, emailSubject, emailMessage);\r\n    }\r\n\r\n    const io = getIOInstance();\r\n    io.to(nt_us_id).emit('new_notification', notification);\r\n\r\n    return notification;\r\n  } catch (error) {\r\n    console.error(\"Error creating notification\", error);\r\n  }\r\n}\r\n\r\nexport async function updateNotification(req: Request, res: Response) {\r\n  try {\r\n    const { id } = req.params\r\n    const notification = await prisma.notification.update({\r\n      where: { nt_id: parseInt(id, 10) },\r\n      data: { nt_read: true },\r\n    });\r\n    res.status(200).json(notification);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error updating notification\", error });\r\n  }\r\n}\r\n\r\nexport async function markAllAsRead(req: Request, res: Response) {\r\n  try {\r\n    const userId = (req as any).user.userId;\r\n    await prisma.notification.updateMany({\r\n      where: { nt_us_id: userId, nt_read: false },\r\n      data: { nt_read: true },\r\n    });\r\n\r\n    res.status(200).json({ message: \"All notifications marked as read\" });\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error updating notifications\", error });\r\n  }\r\n}\r\n\r\nexport async function deleteOldNotifications() {\r\n  try {\r\n    const sevenDaysAgo = new Date();\r\n    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\r\n\r\n    const deletedNotifications = await prisma.notification.deleteMany({\r\n      where: {\r\n        nt_timestamp: {\r\n          lt: sevenDaysAgo,\r\n        },\r\n      },\r\n    });\r\n\r\n    console.log(`${deletedNotifications.count} notifications deleted.`);\r\n  } catch (error) {\r\n    console.error(\"Error deleting old notifications:\", error);\r\n  }\r\n}\r\n\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  service: 'gmail',\r\n  auth: {\r\n    user: process.env.EMAIL_USER,\r\n    pass: process.env.EMAIL_PASSWORD,\r\n  },\r\n});\r\n\r\n//Send Email\r\nexport async function sendEmail(email: string, subject: string, message: string) {\r\n  try {\r\n    await transporter.sendMail({\r\n      from: process.env.EMAIL_USER,\r\n      to: email,\r\n      subject: subject,\r\n      text: message,\r\n    });\r\n\r\n    console.log(`Notification email sent to ${email}`);\r\n  } catch (error) {\r\n    console.error('Error sending email:', error);\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Routes\\defect-route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":8,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":8,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[309,331],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":9,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":9,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[374,397],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createDefect,getDefect, getAllDefect, deleteDefect, updateDefect,} from \"@Controllers/defect-controller.js\";\r\nimport { Router } from 'express'\r\nimport { authenticateUser, upload } from \"@Controllers/util-controller.js\";\r\n\r\nconst router = Router()\r\n\r\nrouter.post('/defect', (req, res, next) => {\r\n    console.log(req.body); // This will log all non-file fields\r\n    console.log(req.files); // This will log the uploaded files\r\n    next();\r\n}, upload.array('imageFiles', 10), authenticateUser, createDefect);\r\nrouter.get('/defect/:id', authenticateUser, getDefect)\r\nrouter.get('/defects/:id', authenticateUser, getAllDefect)\r\nrouter.put('/defect/:id', authenticateUser, updateDefect)\r\nrouter.delete('/defect/:id', authenticateUser, deleteDefect)\r\n\r\nexport default router\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Routes\\location-route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Routes\\patrol-route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Routes\\preset-route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Routes\\user-route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Routes\\util-route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\cors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\data\\checklists.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\data\\images.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\data\\item-zones.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\data\\items.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\data\\locations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\data\\patrol-checklists.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\data\\patrols.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\data\\preset-checklist.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\data\\presets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\data\\profiles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\data\\users.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\data\\zones.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\key-map.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is defined but never used. Allowed unused args must match /^_/u.","line":91,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":92,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const keyMap: Record<string, string> = {\r\n    us_id: 'id',\r\n    us_username: 'username',\r\n    us_email: 'email',\r\n    us_password: 'password',\r\n    us_role: 'role',\r\n    us_department: 'department',\r\n    us_created_at: 'createdAt',\r\n    df_id: 'id',\r\n    df_name: 'name',\r\n    df_description: 'description',\r\n    df_type: 'type',\r\n    df_status: 'status',\r\n    df_timestamp: 'timestamp',\r\n    df_us_id: 'userId',\r\n    df_pr_id: 'patrolResultId',\r\n    nt_id: 'id',\r\n    nt_message: 'message',\r\n    nt_read: 'read',\r\n    nt_timestamp: 'timestamp',\r\n    nt_type: 'type',\r\n    nt_url: 'url',\r\n    nt_us_id: 'userId',\r\n    pf_id: 'id',\r\n    pf_name: 'name',\r\n    pf_age: 'age',\r\n    pf_tel: 'tel',\r\n    pf_address: 'address',\r\n    pf_us_id: 'userId',\r\n    pf_im_id: 'imageId',\r\n    pt_id: 'id',\r\n    pt_date: 'date',\r\n    pt_start_time: 'startTime',\r\n    pt_end_time: 'endTime',\r\n    pt_duration: 'duration',\r\n    pt_status: 'status',\r\n    pt_ps_id: 'presetId',\r\n    ptcl_id: 'id',\r\n    ptcl_pt_id: 'patrolId',\r\n    ptcl_cl_id: 'checklistId',\r\n    ptcl_us_id: 'userId',\r\n    ps_id: 'id',\r\n    ps_title: 'title',\r\n    ps_description: 'description',\r\n    ps_version: 'version',\r\n    ps_latest: 'latest',\r\n    ps_update_at: 'updatedAt',\r\n    ps_update_by: 'updatedBy',\r\n    pscl_ps_id: 'presetId',\r\n    pscl_cl_id: 'checklistId',\r\n    cl_id: 'id',\r\n    cl_title: 'title',\r\n    cl_version: 'version',\r\n    cl_latest: 'latest',\r\n    cl_update_at: 'updatedAt',\r\n    cl_update_by: 'updatedBy',\r\n    pr_id: 'id',\r\n    pr_status: 'status',\r\n    pr_itze_it_id: 'itemId',\r\n    pr_itze_ze_id: 'zoneId',\r\n    pr_pt_id: 'patrolId',\r\n    item_zone: 'itemZone',\r\n    it_id: 'id',\r\n    it_name: 'name',\r\n    it_type: 'type',\r\n    it_cl_id: 'checklistId',\r\n    ze_id: 'id',\r\n    ze_name: 'name',\r\n    ze_lt_id: 'locationId',\r\n    ze_us_id: 'userId',\r\n    itze_it_id: 'itemId',\r\n    itze_ze_id: 'zoneId',\r\n    lt_id: 'id',\r\n    lt_name: 'name',\r\n    cm_id: 'id',\r\n    cm_message: 'message',\r\n    cm_timestamp: 'timestamp',\r\n    cm_us_id: 'userId',\r\n    cm_pr_id: 'patrolResultId',\r\n    im_id: 'id',\r\n    im_path: 'path',\r\n    im_timestamp: 'timestamp',\r\n    im_update_by: 'updatedBy',\r\n    dfim_df_id: 'defectId',\r\n    dfim_im_id: 'imageId',\r\n};\r\n\r\n// สร้างรายการคีย์ที่เป็นข้อมูลสำคัญ (Sensitive Keys)\r\nconst sensitiveValues = new Set(['password', 'secretKey', 'apiKey']);\r\nconst sensitiveKeys = Object.entries(keyMap)\r\n    .filter(([key, value]) => sensitiveValues.has(value))\r\n    .map(([key, value]) => key)\r\n    .concat(Array.from(sensitiveValues))\r\n\r\nexport default function transformKeys<T>(data: T, keyMap: Record<string, string>): any {\r\n    data = removeSensitiveData(data); \r\n\r\n    if (Array.isArray(data)) {\r\n        return data.map(item => transformKeys(item, keyMap));\r\n    } else if (typeof data === 'object' && data !== null) {\r\n        return Object.entries(data).reduce((acc, [key, value]) => {\r\n            const newKey = keyMap[key] || key;\r\n            if (value instanceof Date) {\r\n                acc[newKey] = value.toISOString();\r\n            } else {\r\n                acc[newKey] = Array.isArray(value) || (typeof value === 'object' && value !== null)\r\n                    ? transformKeys(value, keyMap)\r\n                    : value;\r\n            }\r\n            return acc;\r\n        }, {} as Record<string, any>);\r\n    }\r\n    return data;\r\n}\r\n\r\nfunction removeSensitiveData(data: any): any {\r\n    if (data instanceof Date) {\r\n        return data;\r\n    }\r\n    if (Array.isArray(data)) {\r\n        return data.map(item => removeSensitiveData(item));\r\n    } else if (typeof data === 'object' && data !== null) {\r\n        const filteredData = { ...data };\r\n        // ลบคีย์ที่เป็นข้อมูลสำคัญ\r\n        for (const key of sensitiveKeys) {\r\n            if (key in filteredData) {\r\n                delete filteredData[key];\r\n            }\r\n        }\r\n        // วนลูปสำหรับ nested objects\r\n        for (const key in filteredData) {\r\n            filteredData[key] = removeSensitiveData(filteredData[key]);\r\n        }\r\n        return filteredData;\r\n    }\r\n    return data;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\seed.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[774,806],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1041,1109],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2026,2059],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { PrismaClient } from '@prisma/client';\r\n\r\nimport { users } from '@Utils/data/users.js';\r\nimport { checklists } from '@Utils/data/checklists.js';\r\nimport { item_zones } from '@Utils/data/item-zones.js';\r\nimport { items } from '@Utils/data/items.js';\r\nimport { locations } from '@Utils/data/locations.js';\r\nimport { patrol_checklists } from '@Utils/data/patrol-checklists.js';\r\nimport { patrols } from '@Utils/data/patrols.js';\r\nimport { preset_checklists } from '@Utils/data/preset-checklist.js';\r\nimport { presets } from '@Utils/data/presets.js';\r\nimport { profiles } from '@Utils/data/profiles.js';\r\nimport { zones } from '@Utils/data/zones.js';\r\nimport { images } from '@Utils/data/images.js';\r\n\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nasync function main() {\r\n  console.log('Start seeding...');\r\n\r\n  const totalSteps = 12; // จำนวนขั้นตอนทั้งหมดที่เราต้องทำ\r\n  let currentStep = 0; // ขั้นตอนปัจจุบัน\r\n\r\n  const logProgress = () => {\r\n    currentStep += 1;\r\n    const percent = Math.round((currentStep / totalSteps) * 100);\r\n    console.log(`Progress: ${percent}% (${currentStep}/${totalSteps})`);\r\n  };\r\n  await prisma.location.createMany({ data: locations });\r\n  logProgress();\r\n  await prisma.user.createMany({ data: users });\r\n  logProgress();\r\n  await prisma.image.createMany({ data: images });\r\n  logProgress();\r\n  await prisma.profile.createMany({ data: profiles });\r\n  logProgress();\r\n  await prisma.zone.createMany({ data: zones });\r\n  logProgress();\r\n  await prisma.checklist.createMany({ data: checklists });\r\n  logProgress();\r\n  await prisma.item.createMany({ data: items });\r\n  logProgress();\r\n  await prisma.itemZone.createMany({ data: item_zones });\r\n  logProgress();\r\n  await prisma.preset.createMany({ data: presets });\r\n  logProgress();\r\n  await prisma.presetChecklist.createMany({ data: preset_checklists });\r\n  logProgress();\r\n  await prisma.patrol.createMany({ data: patrols });\r\n  logProgress();\r\n  await prisma.patrolChecklist.createMany({ data: patrol_checklists });\r\n  logProgress();\r\n\r\n  console.log('Seeding finished.');\r\n}\r\n\r\nmain()\r\n  .catch((e) => {\r\n    console.error(e);\r\n    process.exit(1);\r\n  })\r\n  .finally(async () => {\r\n    await prisma.$disconnect();\r\n  });\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\Utils\\socket.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":16,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":16,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[359,403],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[507,560],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":30,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":30,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[860,907],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Server } from 'socket.io';\r\nimport http from 'http';\r\n\r\nlet io: Server;\r\n\r\nexport function initSocketIO(server: http.Server) {\r\n    io = new Server(server, {\r\n        cors: {\r\n            origin: process.env.CLIENT_URL,\r\n            credentials: true\r\n        },\r\n        path: \"/socket.io\"\r\n    });\r\n\r\n    io.on('connection', (socket) => {\r\n        console.log(`User connected: ${socket.id}`);\r\n\r\n        socket.on('join_room', (userId: string) => {\r\n            socket.join(userId);\r\n            console.log(`User ${userId} joined room: ${userId}`);\r\n            socket.broadcast.emit(\"new_user_joined\", userId);\r\n\r\n        });\r\n\r\n        socket.on('patrol_result_update', (updatedResults, patrolId) => {\r\n            io.to(patrolId).emit('patrol_result_update', updatedResults);\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n            console.log(`User disconnected: ${socket.id}`);\r\n        });\r\n    });\r\n\r\n    return io;\r\n}\r\n\r\nexport function getIOInstance() {\r\n    return io;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\src\\index.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[996,1055],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { readdirSync } from 'fs'\r\nimport bodyParse from 'body-parser'\r\nimport express from 'express'\r\nimport dotenv from 'dotenv'\r\nimport cookieParser from 'cookie-parser';\r\nimport path from 'path'\r\nimport http from 'http';\r\nimport corsMiddleware from '@Utils/cors.js'\r\nimport { initSocketIO } from '@Utils/socket.js';\r\nimport { fileURLToPath } from 'url';\r\n\r\ndotenv.config()\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\nconst app = express()\r\nconst PORT = process.env.SERVER_PORT\r\n\r\napp.use(cookieParser());\r\napp.use(corsMiddleware)\r\napp.use('/uploads', express.static(path.join(__dirname, '../../server/uploads')));\r\napp.use(bodyParse.json({ limit: '10mb' }))\r\n\r\n\r\nreaddirSync(path.join(__dirname, 'Routes')).map(async (file) => {\r\n  const route = await import(`./Routes/${file}`);\r\n  app.use('/api', route.default || route);\r\n});\r\n\r\nconst server = http.createServer(app)\r\n\r\ninitSocketIO(server);\r\n\r\nserver.listen(PORT || 4000, () => {\r\n  console.log(`Server is running at http://0.0.0.0:${PORT}`);\r\n});\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\tests\\defect.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\tests\\patrol.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\tests\\preset.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\tests\\user.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\ปี 3\\TEAM6-DENSY\\server\\tests\\util.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]