[{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\_rsc_messages_en_json.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\_rsc_messages_th_json.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\patrol-defect\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\patrol-defect\\page_client-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\patrol\\[id]\\detail\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\patrol\\[id]\\detail\\page_client-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\patrol\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\patrol\\page_client-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\favicon.ico\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\edge-runtime-webpack.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\interception-route-rewrite-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\middleware-build-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\middleware-react-loadable-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\middleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\next-font-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\server-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@fast-csv.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@floating-ui.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@formatjs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@radix-ui.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@socket.io.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@swc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\archiver-utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\archiver.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\aria-hidden.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\async.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\asynckit.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\axios.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\balanced-match.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\big-integer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\binary.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\bl.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\bluebird.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\brace-expansion.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\buffer-crc32.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\buffer-indexof-polyfill.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\buffers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\chainsaw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\class-variance-authority.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\clsx.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\combined-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\compress-commons.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\concat-map.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\core-util-is.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\crc-32.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\crc32-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\date-fns.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\dayjs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\debug.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\delayed-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\duplexer2.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\embla-carousel-react.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\embla-carousel-reactive-utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\embla-carousel.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\end-of-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\engine.io-client.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\engine.io-parser.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\exceljs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\fast-csv.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\follow-redirects.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\form-data.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\fs-constants.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\fs.realpath.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\fstream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\get-nonce.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\graceful-fs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\has-flag.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\immediate.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\inflight.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\inherits.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\intl-messageformat.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\its-fine.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\jszip.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\konva.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lazystream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lie.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\listenercount.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.defaults.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.difference.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.escaperegexp.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.flatten.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.groupby.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.isboolean.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.isequal.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.isfunction.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.isnil.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.isplainobject.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.isundefined.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.union.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.uniq.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lucide-react.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\mime-db.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\mime-types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\mkdirp.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\ms.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\next-intl.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\next-themes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\next.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\normalize-path.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\object-assign.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\once.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\pako.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\path-is-absolute.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\process-nextick-args.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\prop-types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\proxy-from-env.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-day-picker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-is.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-konva.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-reconciler.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-remove-scroll-bar.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-remove-scroll.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-style-singleton.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-swipeable-list.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\readable-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\readdir-glob.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\safe-buffer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\saxes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\scheduler.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\socket.io-client.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\socket.io-parser.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\string_decoder.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\supports-color.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\tailwind-merge.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\tar-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\tmp.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\traverse.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\tslib.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\unzipper.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\use-callback-ref.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\use-intl.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\use-sidecar.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\util-deprecate.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\uuid.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\wrappy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\ws.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\xmlchars.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\xmlhttprequest-ssl.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\zip-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\zod.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\webpack-runtime.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app-pages-internals.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\patrol-defect\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\patrol-defect\\loading.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\patrol-defect\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\patrol\\[id]\\detail\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\patrol\\[id]\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\patrol\\[id]\\loading.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\patrol\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\patrol\\loading.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\patrol\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\main-app.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\polyfills.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\webpack.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\development\\_buildManifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\development\\_ssgManifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.03f7de141dbe0926.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.2058f7fda82fee4b.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.57277f6ed1d87402.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.94506c15c2970bb0.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.9ff8b54e329f4e19.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.03f7de141dbe0926.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.2058f7fda82fee4b.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.57277f6ed1d87402.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.94506c15c2970bb0.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.9ff8b54e329f4e19.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.ca8c3d4b35629ebd.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\patrol-defect\\layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\patrol-defect\\page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\patrol\\[id]\\detail\\page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\patrol\\[id]\\layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\patrol\\layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\patrol\\page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\dashboard\\heat-map\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\dashboard\\overview\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\employees\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\checklistview\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\create\\checklist\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\location-&-zone\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-checklist\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-preset\\[id]\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-preset\\[id]\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'presetData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":36,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":48,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from '@/components/ui/input'\r\nimport { Textarea } from '@/components/ui/textarea'\r\nimport {\r\n    AlertDialog,\r\n    AlertDialogTrigger,\r\n    AlertDialogContent,\r\n    AlertDialogHeader,\r\n    AlertDialogTitle,\r\n    AlertDialogDescription,\r\n    AlertDialogCancel,\r\n    AlertDialogAction,\r\n    AlertDialogFooter,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport {\r\n    Accordion,\r\n    AccordionContent,\r\n    AccordionItem,\r\n    AccordionTrigger,\r\n} from \"@/components/ui/accordion\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport Loading from \"@/components/loading\";\r\nimport { fetchData, getItemTypeVariant } from \"@/lib/utils\";\r\nimport { IChecklist, IItem, IItemZone, IPreset } from \"@/app/type\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport { useParams, useRouter } from \"next/navigation\";\r\n\r\nexport default function page() {\r\n\r\n    const [allChecklists, setAllChecklists] = useState<[]>([])\r\n    const [presetData, setPresetData] = useState<IPreset[]>([])\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n    const [selectChecklists, setSelectChecklists] = useState<number[]>([])\r\n    const [tempSelectChecklists, setTempSelectChecklists] = useState<number[]>([])\r\n    const [formPreset, setFormPreset] = useState({\r\n        title: '',\r\n        description: '',\r\n        checklists: []\r\n    })\r\n    const param = useParams();\r\n    const router = useRouter();\r\n\r\n    const t = useTranslations(\"General\");\r\n    const s = useTranslations(\"Status\");\r\n    const z = useTranslations(\"Zone\");\r\n\r\n    const getAllChecklists = async () => {\r\n        try {\r\n            const allData = await fetchData(\"get\", \"/checklists\", true);\r\n            setAllChecklists(allData);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch all defect:\", error);\r\n        }\r\n    };\r\n\r\n    const getPresetData = async () => {\r\n        try {\r\n            const data = await fetchData(\"get\", `/preset/${param.id}`, true)\r\n            setPresetData(data)\r\n            setFormPreset({\r\n                title: data.title || '',\r\n                description: data.description || '',\r\n                checklists: data.presetChecklists || [],\r\n            })\r\n            setSelectChecklists(data.presetChecklists.map((preset) => preset.checklist.id))\r\n            setTempSelectChecklists(data.presetChecklists.map((preset) => preset.checklist.id))\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch defect data:\", error);\r\n        }\r\n    }\r\n\r\n    const handleSelectChecklists = (checklistId: number) => {\r\n        setTempSelectChecklists((prev) => {\r\n            if (prev.includes(checklistId)) {\r\n                return prev.filter((id) => id !== checklistId);\r\n            } else {\r\n                const selectLists = [...prev, checklistId];\r\n                return selectLists.sort((a, b) => a - b);\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleDoneChecklist = (() => {\r\n        setSelectChecklists(tempSelectChecklists)\r\n    })\r\n\r\n    const handleRemoveChecklist = ((checklistId: number) => {\r\n        setSelectChecklists((prev) => prev.filter((id) => id !== checklistId))\r\n        setTempSelectChecklists((prev) => prev.filter((id) => id !== checklistId))\r\n    })\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const { name, value } = e.target;\r\n        setFormPreset((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handleEditPreset = async () => {\r\n        const presetForm = new FormData()\r\n\r\n        presetForm.append(\"title\", formPreset.title)\r\n        presetForm.append(\"description\", formPreset.description)\r\n\r\n        selectChecklists.forEach((checklistId: number) => {\r\n            presetForm.append(\"checklists[]\", checklistId.toString());\r\n        });\r\n\r\n        try {\r\n            const fetch = await fetchData(\"put\", `/preset/${param.id}`, true, presetForm)\r\n            alert(\"Preset Edited successfully!\");\r\n            router.push(`${fetch.preset.id}`)  // เปลี่่ยนหน้าไปยัง id ของตัวที่อัพเดท\r\n        } catch (error) {\r\n            console.error(\"Error Edited Preset:\", error);\r\n            alert(\"Failed to Edited Preset\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllChecklists()\r\n        getPresetData()\r\n        setLoading(false)\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return <Loading />\r\n    }\r\n\r\n    return (\r\n        <div className='bg-card px-6 py-4 '>\r\n            {/* Edit patrol preset and button */}\r\n            <div className='flex flex-row justify-between mb-4'>\r\n                <div className='text-2xl font-bold'>\r\n                    Edit Patrol Preset\r\n                </div>\r\n\r\n                <div className='flex flex-row gap-2'>\r\n                    <Button variant='secondary'>Cancel</Button>\r\n\r\n                    <Button variant='primary' onClick={handleEditPreset}>\r\n                        <span className=\"material-symbols-outlined mr-2\">save</span>\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* title */}\r\n            <div className=\"flex flex-col mb-4\">\r\n                <div className='text-base font-semibold mb-2'>\r\n                    Title\r\n                </div>\r\n\r\n                <div>\r\n                    <Input name=\"title\" value={formPreset.title} className='bg-secondary w-1/3 border-none text-xl' placeholder='title' onChange={handleInputChange}></Input>\r\n                </div>\r\n            </div>\r\n\r\n            {/* description */}\r\n            <div className=\"flex flex-col mb-4\">\r\n                <div className='text-base font-semibold mb-2'>\r\n                    Description\r\n                </div>\r\n\r\n                <div>\r\n                    <Textarea name=\"description\" value={formPreset.description} className='bg-secondary border-none text-xl h-44' placeholder='description' onChange={handleInputChange}></Textarea>\r\n                </div>\r\n            </div>\r\n\r\n            {/* new checklist */}\r\n            <div className='flex flex-row gap-2'>\r\n                <div className='text-2xl font-bold'>\r\n                    Checklist\r\n                </div>\r\n                <AlertDialog>\r\n                    <AlertDialogTrigger asChild>\r\n                        <Button className=\"w-8 h-8\" variant=\"primary\">\r\n                            <span className=\"material-symbols-outlined\">add</span>\r\n                        </Button>\r\n                    </AlertDialogTrigger>\r\n                    <AlertDialogContent>\r\n                        <AlertDialogHeader>\r\n                            <AlertDialogTitle className=\"text-2xl font-semibold\">\r\n                                Checklist Group\r\n                            </AlertDialogTitle>\r\n                            <AlertDialogDescription className=\"flex items-start justify-start text-lg text-input\">\r\n                                Please add a checklist group\r\n                            </AlertDialogDescription>\r\n                        </AlertDialogHeader>\r\n\r\n                        {allChecklists ? (\r\n                            <>\r\n                                <ScrollArea className=\"h-[400px] overflow-y-auto rounded-lg w-full\">\r\n                                    {allChecklists.map((checklist: IChecklist) => {\r\n                                        return (\r\n                                            <div className=\"flex flex-row justify-between bg-secondary px-6 py-4 mb-2 rounded-lg\">\r\n                                                <div>\r\n                                                    <div className=\"flex text-base gap-1 mb-2 \">\r\n                                                        <span className=\"material-symbols-outlined\">history</span>\r\n                                                        Version {checklist.version}\r\n                                                    </div>\r\n\r\n                                                    <div className=\"text-2xl font-bold\">\r\n                                                        {checklist.title}\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div className=\"flex justify-center items-center\">\r\n                                                    <Checkbox\r\n                                                        key={checklist.id}\r\n                                                        value={checklist.id}\r\n                                                        checked={tempSelectChecklists.includes(checklist.id)}\r\n                                                        className=\"bg-card\"\r\n                                                        onCheckedChange={() => handleSelectChecklists(checklist.id)}>\r\n                                                    </Checkbox>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                </ScrollArea>\r\n                                <AlertDialogFooter>\r\n                                    <div className=\"flex items-end justify-end gap-[10px]\">\r\n                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n                                        <AlertDialogAction className=\"bg-primary\" onClick={handleDoneChecklist}>\r\n                                            Done\r\n                                        </AlertDialogAction>\r\n                                    </div>\r\n                                </AlertDialogFooter>\r\n\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <div>\r\n                                    <div className=\"flex flex-col justify-center items-center h-[400px] gap-4\">\r\n                                        <div className=\"text-2xl font-semibold\">\r\n                                            You don't have any Checklist want to create now?\r\n                                        </div>\r\n                                        <AlertDialogFooter>\r\n                                            <div className=\"flex gap-[10px]\">\r\n                                                <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n                                                <AlertDialogAction className=\"bg-primary\">\r\n                                                    Sure\r\n                                                </AlertDialogAction>\r\n                                            </div>\r\n                                        </AlertDialogFooter>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </>\r\n                        )}\r\n                    </AlertDialogContent>\r\n                </AlertDialog>\r\n            </div>\r\n\r\n            {/* checklist info */}\r\n            {\r\n                selectChecklists.map((checklistId: number) => {\r\n                    return allChecklists.map((checklist: IChecklist) => {\r\n                        if (checklist.id === checklistId) {\r\n                            return (\r\n                                <div className=\"px-6 py-4\">\r\n                                    <Accordion type=\"single\" collapsible>\r\n                                        <AccordionItem value=\"item-1\" className=\"border-none\">\r\n                                            <div className=\"flex flex-row gap-1 text-base\">\r\n                                                <span className=\"material-symbols-outlined\">history</span>\r\n                                                Version {checklist.version}\r\n                                            </div>\r\n                                            <div className=\"flex flex-col\">\r\n                                                <AccordionTrigger className=\"flex flex-row justify-between hover:no-underline\">\r\n                                                    <div className=\"flex flex-row text-2xl font-bold\">\r\n                                                        <Button variant=\"ghost\" onClick={() => handleRemoveChecklist(checklist.id)}>\r\n                                                            <span className=\"material-symbols-outlined flex justify-center items-center text-destructive\">delete</span>\r\n                                                        </Button>\r\n                                                        {checklist.title}\r\n                                                    </div>\r\n                                                </AccordionTrigger>\r\n\r\n                                                {checklist.items.map((item: IItem) => {\r\n                                                    return (\r\n                                                        <AccordionContent>\r\n                                                            <Accordion type=\"single\" collapsible>\r\n                                                                <AccordionItem value=\"item-1\" className=\"border-none px-6\">\r\n                                                                    <AccordionTrigger className=\"hover:no-underline\">\r\n                                                                        <div className=\"flex items-center justify-between w-full pe-2\">\r\n                                                                            <p className=\"text-xl font-semibold\">{item.name}</p>\r\n                                                                            {(() => {\r\n                                                                                const { iconName, variant } = getItemTypeVariant(item.type);\r\n                                                                                return (\r\n                                                                                    <BadgeCustom\r\n                                                                                        variant={variant}\r\n                                                                                        showIcon={true}\r\n                                                                                        shape={\"square\"}\r\n                                                                                        iconName={iconName}\r\n                                                                                    >\r\n                                                                                        {s(item.type)}\r\n                                                                                    </BadgeCustom>\r\n                                                                                );\r\n                                                                            })()}\r\n                                                                        </div>\r\n                                                                    </AccordionTrigger>\r\n                                                                    <AccordionContent className=\"flex flex-col gap-4\">\r\n                                                                        {item.itemZones.map((itemZone: IItemZone) => {\r\n                                                                            return (\r\n                                                                                <div key={itemZone.zone.id} className=\"bg-background rounded-md px-4 py-2\">\r\n                                                                                    <div className=\"flex flex-row justify-between items-center\">\r\n                                                                                        <div className=\"flex flex-col\">\r\n                                                                                            <div className=\"flex items-center gap-2 mb-2\">\r\n                                                                                                <span className=\"material-symbols-outlined\">\r\n                                                                                                    location_on\r\n                                                                                                </span>\r\n                                                                                                <p className=\"font-semibold text-lg\">\r\n                                                                                                    Zone\r\n                                                                                                </p>\r\n                                                                                                <p className=\"text-lg\">{z(itemZone.zone.name)}</p>\r\n                                                                                            </div>\r\n                                                                                            <div className=\"flex items-center gap-2\">\r\n                                                                                                <span className=\"material-symbols-outlined\">\r\n                                                                                                    badge\r\n                                                                                                </span>\r\n                                                                                                <p className=\"font-semibold text-lg\">\r\n                                                                                                    Supervisor\r\n                                                                                                </p>\r\n                                                                                                <div className=\"flex flex-row items-center\">\r\n                                                                                                    <Avatar className=\"mr-1 h-6 w-6\" >\r\n                                                                                                        <AvatarImage />\r\n                                                                                                        <AvatarFallback id={itemZone.zone.supervisor.id.toString()}>\r\n                                                                                                        </AvatarFallback>\r\n                                                                                                    </Avatar>\r\n                                                                                                    <p className=\"text-lg\">\r\n                                                                                                        {itemZone.zone.supervisor.profile.name}\r\n                                                                                                    </p>\r\n                                                                                                </div>\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                                        <div className=\"flex gap-2 pe-2\">\r\n                                                                                            <Button variant=\"secondary\" className=\"w-[155px] cursor-not-allowed opacity-50\">\r\n                                                                                                <span className=\"material-symbols-outlined\">\r\n                                                                                                    check\r\n                                                                                                </span>\r\n                                                                                                Yes\r\n                                                                                            </Button>\r\n                                                                                            <Button variant=\"secondary\" className=\"w-[155px] cursor-not-allowed opacity-50\">\r\n                                                                                                <span className=\"material-symbols-outlined\">\r\n                                                                                                    close\r\n                                                                                                </span>\r\n                                                                                                No\r\n                                                                                            </Button>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                            )\r\n                                                                        })}\r\n                                                                    </AccordionContent>\r\n                                                                </AccordionItem>\r\n                                                            </Accordion>\r\n                                                        </AccordionContent>\r\n                                                    )\r\n                                                })}\r\n                                            </div>\r\n                                        </AccordionItem>\r\n                                    </Accordion>\r\n                                </div>\r\n                            );\r\n                        }\r\n                    });\r\n                })\r\n            }\r\n        </div >\r\n    )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-preset\\create\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-preset\\create\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":43,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from '@/components/ui/input'\r\nimport { Textarea } from '@/components/ui/textarea'\r\nimport {\r\n    AlertDialog,\r\n    AlertDialogTrigger,\r\n    AlertDialogContent,\r\n    AlertDialogHeader,\r\n    AlertDialogTitle,\r\n    AlertDialogDescription,\r\n    AlertDialogCancel,\r\n    AlertDialogAction,\r\n    AlertDialogFooter,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport {\r\n    Accordion,\r\n    AccordionContent,\r\n    AccordionItem,\r\n    AccordionTrigger,\r\n} from \"@/components/ui/accordion\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport Loading from \"@/components/loading\";\r\nimport { fetchData, getItemTypeVariant } from \"@/lib/utils\";\r\nimport { IChecklist, IItem, IItemZone } from \"@/app/type\";\r\nimport { useTranslations } from \"next-intl\";\r\n\r\nexport default function page() {\r\n    const [allChecklists, setAllChecklists] = useState<[]>([])\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n    const [selectChecklists, setSelectChecklists] = useState<number[]>([])\r\n    const [tempSelectChecklists, setTempSelectChecklists] = useState<number[]>([])\r\n    const [formPreset, setFormPreset] = useState({\r\n        title: '',\r\n        description: '',\r\n        checklists: []\r\n    })\r\n\r\n    const t = useTranslations(\"General\");\r\n    const s = useTranslations(\"Status\");\r\n    const z = useTranslations(\"Zone\");\r\n\r\n    const getAllChecklists = async () => {\r\n        try {\r\n            const allData = await fetchData(\"get\", \"/checklists\", true);\r\n            setAllChecklists(allData);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch all defect:\", error);\r\n        }\r\n    };\r\n\r\n    const handleSelectChecklists = ((checklistId: number) => {\r\n        setTempSelectChecklists((prev) => {\r\n            if (prev.includes(checklistId)) {\r\n                return prev.filter((id) => id !== checklistId);\r\n            } else {\r\n                return [...prev, checklistId]\r\n            }\r\n        })\r\n    })\r\n\r\n    const handleDoneChecklist = (() => {\r\n        setSelectChecklists(tempSelectChecklists)\r\n    })\r\n\r\n    const handleRemoveChecklist = ((checklistId: number) => {\r\n        setSelectChecklists((prev) => prev.filter((id) => id !== checklistId))\r\n        setTempSelectChecklists((prev) => prev.filter((id) => id !== checklistId))\r\n    })\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const { name, value } = e.target;\r\n        setFormPreset((prev) => ({\r\n            ...prev,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handleCreatePreset = async () => {\r\n        const presetForm = new FormData()\r\n\r\n        presetForm.append(\"title\", formPreset.title)\r\n        presetForm.append(\"description\", formPreset.description)\r\n\r\n        selectChecklists.forEach((checklistId: number) => {\r\n            presetForm.append(\"checklists[]\", checklistId.toString());\r\n        });\r\n\r\n        try {\r\n            await fetchData(\"post\", `/preset`, true, presetForm)\r\n            alert(\"Preset Created successfully!\");\r\n        } catch (error) {\r\n            console.error(\"Error Creating Preset:\", error);\r\n            alert(\"Failed to Create Preset\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllChecklists()\r\n        setLoading(false)\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return <Loading />\r\n    }\r\n\r\n    return (\r\n        <div className='bg-card px-6 py-4 '>\r\n            {/* create patrol preset and button */}\r\n            <div className='flex flex-row justify-between mb-4'>\r\n                <div className='text-2xl font-bold'>\r\n                    Create Patrol Preset\r\n                </div>\r\n\r\n                <div className='flex flex-row gap-2'>\r\n                    <Button variant='secondary'>Cancel</Button>\r\n\r\n                    <Button variant='primary' onClick={handleCreatePreset}>\r\n                        <span className=\"material-symbols-outlined mr-2\">save</span>\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* title */}\r\n            <div className=\"flex flex-col mb-4\">\r\n                <div className='text-base font-semibold mb-2'>\r\n                    Title\r\n                </div>\r\n\r\n                <div>\r\n                    <Input name=\"title\" value={formPreset.title} className='bg-secondary w-1/3 border-none text-xl' placeholder='title' onChange={handleInputChange}></Input>\r\n                </div>\r\n            </div>\r\n\r\n            {/* description */}\r\n            <div className=\"flex flex-col mb-4\">\r\n                <div className='text-base font-semibold mb-2'>\r\n                    Description\r\n                </div>\r\n\r\n                <div>\r\n                    <Textarea name=\"description\" value={formPreset.description} className='bg-secondary border-none text-xl h-44' placeholder='description' onChange={handleInputChange}></Textarea>\r\n                </div>\r\n            </div>\r\n\r\n            {/* new checklist */}\r\n            <div className='flex flex-row gap-2'>\r\n                <div className='text-2xl font-bold'>\r\n                    Checklist\r\n                </div>\r\n                <AlertDialog>\r\n                    <AlertDialogTrigger asChild>\r\n                        <Button className=\"w-8 h-8\" variant=\"primary\">\r\n                            <span className=\"material-symbols-outlined\">add</span>\r\n                        </Button>\r\n                    </AlertDialogTrigger>\r\n                    <AlertDialogContent>\r\n                        <AlertDialogHeader>\r\n                            <AlertDialogTitle className=\"text-2xl font-semibold\">\r\n                                Checklist Group\r\n                            </AlertDialogTitle>\r\n                            <AlertDialogDescription className=\"flex items-start justify-start text-lg text-input\">\r\n                                Please add a checklist group\r\n                            </AlertDialogDescription>\r\n                        </AlertDialogHeader>\r\n\r\n                        {allChecklists ? (\r\n                            <>\r\n                                <ScrollArea className=\"h-[400px] overflow-y-auto rounded-lg w-full\">\r\n                                    {allChecklists.map((checklist: IChecklist) => {\r\n                                        return (\r\n                                            <div className=\"flex flex-row justify-between bg-secondary px-6 py-4 mb-2 rounded-lg\">\r\n                                                <div>\r\n                                                    <div className=\"flex text-base gap-1 mb-2 \">\r\n                                                        <span className=\"material-symbols-outlined\">history</span>\r\n                                                        Version {checklist.version}\r\n                                                    </div>\r\n\r\n                                                    <div className=\"text-2xl font-bold\">\r\n                                                        {checklist.title}\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div className=\"flex justify-center items-center\">\r\n                                                    <Checkbox\r\n                                                        key={checklist.id}\r\n                                                        value={checklist.id}\r\n                                                        checked={tempSelectChecklists.includes(checklist.id)}\r\n                                                        className=\"bg-card\"\r\n                                                        onCheckedChange={() => handleSelectChecklists(checklist.id)}>\r\n                                                    </Checkbox>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                </ScrollArea>\r\n                                <AlertDialogFooter>\r\n                                    <div className=\"flex items-end justify-end gap-[10px]\">\r\n                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n                                        <AlertDialogAction className=\"bg-primary\" onClick={handleDoneChecklist}>\r\n                                            Done\r\n                                        </AlertDialogAction>\r\n                                    </div>\r\n                                </AlertDialogFooter>\r\n\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <div>\r\n                                    <div className=\"flex flex-col justify-center items-center h-[400px] gap-4\">\r\n                                        <div className=\"text-2xl font-semibold\">\r\n                                            You don't have any Checklist want to create now?\r\n                                        </div>\r\n                                        <AlertDialogFooter>\r\n                                            <div className=\"flex gap-[10px]\">\r\n                                                <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n                                                <AlertDialogAction className=\"bg-primary\">\r\n                                                    Sure\r\n                                                </AlertDialogAction>\r\n                                            </div>\r\n                                        </AlertDialogFooter>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </>\r\n                        )}\r\n                    </AlertDialogContent>\r\n                </AlertDialog>\r\n            </div>\r\n\r\n            {/* checklist info */}\r\n            {\r\n                selectChecklists.map((checklistId: number) => {\r\n                    return allChecklists.map((checklist: IChecklist) => {\r\n                        if (checklist.id === checklistId) {\r\n                            return (\r\n                                <div className=\"px-6 py-4\">\r\n                                    <Accordion type=\"single\" collapsible>\r\n                                        <AccordionItem value=\"item-1\" className=\"border-none\">\r\n                                            <div className=\"flex flex-row gap-1 text-base\">\r\n                                                <span className=\"material-symbols-outlined\">history</span>\r\n                                                Version {checklist.version}\r\n                                            </div>\r\n                                            <div className=\"flex flex-col\">\r\n                                                <AccordionTrigger className=\"flex flex-row justify-between hover:no-underline\">\r\n                                                    <div className=\"flex flex-row text-2xl font-bold\">\r\n                                                        <Button variant=\"ghost\" onClick={() => handleRemoveChecklist(checklist.id)}>\r\n                                                            <span className=\"material-symbols-outlined flex justify-center items-center text-destructive\">delete</span>\r\n                                                        </Button>\r\n                                                        {checklist.title}\r\n                                                    </div>\r\n                                                </AccordionTrigger>\r\n\r\n                                                {checklist.items.map((item: IItem) => {\r\n                                                    return (\r\n                                                        <AccordionContent>\r\n                                                            <Accordion type=\"single\" collapsible>\r\n                                                                <AccordionItem value=\"item-1\" className=\"border-none px-6\">\r\n                                                                    <AccordionTrigger className=\"hover:no-underline\">\r\n                                                                        <div className=\"flex items-center justify-between w-full pe-2\">\r\n                                                                            <p className=\"text-xl font-semibold\">{item.name}</p>\r\n                                                                            {(() => {\r\n                                                                                const { iconName, variant } = getItemTypeVariant(item.type);\r\n                                                                                return (\r\n                                                                                    <BadgeCustom\r\n                                                                                        variant={variant}\r\n                                                                                        showIcon={true}\r\n                                                                                        shape={\"square\"}\r\n                                                                                        iconName={iconName}\r\n                                                                                    >\r\n                                                                                        {s(item.type)}\r\n                                                                                    </BadgeCustom>\r\n                                                                                );\r\n                                                                            })()}\r\n                                                                        </div>\r\n                                                                    </AccordionTrigger>\r\n                                                                    <AccordionContent className=\"flex flex-col gap-4\">\r\n                                                                        {item.itemZones.map((itemZone: IItemZone) => {\r\n                                                                            return (\r\n                                                                                <div key={itemZone.zone.id} className=\"bg-background rounded-md px-4 py-2\">\r\n                                                                                    <div className=\"flex flex-row justify-between items-center\">\r\n                                                                                        <div className=\"flex flex-col\">\r\n                                                                                            <div className=\"flex items-center gap-2 mb-2\">\r\n                                                                                                <span className=\"material-symbols-outlined\">\r\n                                                                                                    location_on\r\n                                                                                                </span>\r\n                                                                                                <p className=\"font-semibold text-lg\">\r\n                                                                                                    Zone\r\n                                                                                                </p>\r\n                                                                                                <p className=\"text-lg\">{z(itemZone.zone.name)}</p>\r\n                                                                                            </div>\r\n                                                                                            <div className=\"flex items-center gap-2\">\r\n                                                                                                <span className=\"material-symbols-outlined\">\r\n                                                                                                    badge\r\n                                                                                                </span>\r\n                                                                                                <p className=\"font-semibold text-lg\">\r\n                                                                                                    Supervisor\r\n                                                                                                </p>\r\n                                                                                                <div className=\"flex flex-row items-center\">\r\n                                                                                                    <Avatar className=\"mr-1 h-6 w-6\" >\r\n                                                                                                        <AvatarImage />\r\n                                                                                                        <AvatarFallback id={itemZone.zone.supervisor.id.toString()}>\r\n                                                                                                        </AvatarFallback>\r\n                                                                                                    </Avatar>\r\n                                                                                                    <p className=\"text-lg\">\r\n                                                                                                        {itemZone.zone.supervisor.profile.name}\r\n                                                                                                    </p>\r\n                                                                                                </div>\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                                        <div className=\"flex gap-2 pe-2\">\r\n                                                                                            <Button variant=\"secondary\" className=\"w-[155px] cursor-not-allowed opacity-50\">\r\n                                                                                                <span className=\"material-symbols-outlined\">\r\n                                                                                                    check\r\n                                                                                                </span>\r\n                                                                                                Yes\r\n                                                                                            </Button>\r\n                                                                                            <Button variant=\"secondary\" className=\"w-[155px] cursor-not-allowed opacity-50\">\r\n                                                                                                <span className=\"material-symbols-outlined\">\r\n                                                                                                    close\r\n                                                                                                </span>\r\n                                                                                                No\r\n                                                                                            </Button>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                            )\r\n                                                                        })}\r\n                                                                    </AccordionContent>\r\n                                                                </AccordionItem>\r\n                                                            </Accordion>\r\n                                                        </AccordionContent>\r\n                                                    )\r\n                                                })}\r\n                                            </div>\r\n                                        </AccordionItem>\r\n                                    </Accordion>\r\n                                </div>\r\n                            );\r\n                        }\r\n                    });\r\n                })\r\n            }\r\n        </div >\r\n    )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-preset\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\comment\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\comment\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\comment\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuCheckboxItem' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogAction' is defined but never used. Allowed unused vars must match /^_/u.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":52,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'buttonVariants' is defined but never used. Allowed unused vars must match /^_/u.","line":58,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":91,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":91,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2714,2739],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport { FilterComment, IComment, itemType } from \"@/app/type\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport { DatePickerWithRange } from \"@/components/date-picker\";\r\nimport Loading from \"@/components/loading\";\r\nimport Textfield from \"@/components/textfield\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuRadioGroup,\r\n  DropdownMenuRadioItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectGroup,\r\n  SelectItem,\r\n  SelectLabel,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport {\r\n  fetchData,\r\n  getInitials,\r\n  getItemTypeVariant,\r\n  sortData,\r\n} from \"@/lib/utils\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { DateRange } from \"react-day-picker\";\r\nimport { formatTime } from \"@/lib/utils\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { buttonVariants } from \"@/components/ui/button\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\nexport default function Page() {\r\n  const t = useTranslations(\"General\");\r\n  const s = useTranslations(\"Status\");\r\n  const z = useTranslations(\"Zone\");\r\n  const a = useTranslations(\"Alert\");\r\n\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [isSortOpen, setIsSortOpen] = useState(false);\r\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n  const [allComments, setAllComments] = useState<IComment[]>([]);\r\n\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [pendingAction, setPendingAction] = useState<(() => void) | null>(null);\r\n\r\n  const handleDialogResult = (result: boolean) => {\r\n    setIsDialogOpen(false);\r\n    if (result && pendingAction) {\r\n      pendingAction(); // Execute the pending action\r\n      setPendingAction(null); // Clear the pending action\r\n    }\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const getAllComments = async () => {\r\n    try {\r\n      const queryString = buildQueryString(filter, searchTerm);\r\n      console.log(queryString);\r\n      const data = await fetchData(\"get\", `/comments?${queryString}`, true);\r\n      setAllComments(data);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch patrol data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleConfirmComment = (id) => {\r\n    setPendingAction(() => () => confirmComment(id));\r\n    handleOpenDialog();\r\n  };\r\n\r\n  const confirmComment = async (id) => {\r\n    try {\r\n      await fetchData(\"put\", `/comment/${id}`, true);\r\n      setAllComments((prev) =>\r\n        prev.map((comment) =>\r\n          comment.id === id ? { ...comment, status: true } : comment\r\n        )\r\n      );\r\n      toast({\r\n        variant: \"success\",\r\n        title: a(\"CommentConfirmSuccessTitle\"),\r\n        description: a(\"CommentConfirmSuccessDescription\"),\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error deleting patrol:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSortChange = (type: string, value: string) => {\r\n    setSort((prevSort) => ({\r\n      ...prevSort,\r\n      [type]: value,\r\n    }));\r\n  };\r\n\r\n  const commentStatus = [\"completed\", \"pending\"];\r\n\r\n  const initialFilter = {\r\n    commentStatus: \"All\",\r\n    dateRange: { start: undefined, end: undefined },\r\n  };\r\n\r\n  const getStoredFilter = () => {\r\n    if (typeof window !== \"undefined\") {\r\n      const storedFilter = localStorage.getItem(\"commentFilter\");\r\n      if (storedFilter) {\r\n        return JSON.parse(storedFilter);\r\n      }\r\n    }\r\n    return initialFilter;\r\n  };\r\n\r\n  const [filter, setFilter] = useState<FilterComment | null>(getStoredFilter());\r\n\r\n  const [sort, setSort] = useState<{ by: string; order: string }>({\r\n    by: \"Date\",\r\n    order: \"Ascending\",\r\n  });\r\n\r\n  const applyFilter = () => {\r\n    getAllComments();\r\n  };\r\n\r\n  const resetFilter = () => {\r\n    setFilter(initialFilter);\r\n  };\r\n\r\n  const handleDateSelect = (dateRange: DateRange) => {\r\n    const startDate = dateRange.from ?? null;\r\n    const endDate = dateRange.to\r\n      ? new Date(new Date(dateRange.to).setHours(23, 59, 59, 999))\r\n      : null;\r\n    setFilter({\r\n      commentStatus: filter?.commentStatus || null,\r\n      dateRange: {\r\n        start: startDate || undefined,\r\n        end: endDate || undefined,\r\n      },\r\n    });\r\n  };\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const handleSearch = (event: any) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const buildQueryString = (\r\n    filter: FilterComment | null,\r\n    searchTerm: string\r\n  ) => {\r\n    const params: Record<string, string | undefined> = {};\r\n\r\n    // เพิ่ม search term ถ้ามี\r\n    if (searchTerm) params.search = searchTerm;\r\n\r\n    // เพิ่ม status filter ถ้าไม่ใช่ \"All\"\r\n    if (filter?.commentStatus && filter.commentStatus !== \"All\") {\r\n      params.status = filter.commentStatus === \"completed\" ? \"true\" : \"false\";\r\n    }\r\n\r\n    // เพิ่ม startDate\r\n    if (filter?.dateRange?.start) {\r\n      params.startDate = filter?.dateRange.start.toISOString();\r\n    }\r\n\r\n    // เพิ่ม endDate\r\n    if (filter?.dateRange?.end) {\r\n      params.endDate = filter?.dateRange?.end.toISOString();\r\n    }\r\n\r\n    return new URLSearchParams(params).toString();\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllComments();\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getAllComments();\r\n  }, [searchTerm]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"commentFilter\", JSON.stringify(filter));\r\n  }, [filter]);\r\n\r\n  useEffect(() => {\r\n    const sortedData = sortData(allComments, sort);\r\n    if (JSON.stringify(sortedData) !== JSON.stringify(allComments)) {\r\n      setAllComments(sortedData);\r\n    }\r\n  }, [sort, allComments]);\r\n\r\n  if (loading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      <div className=\"flex items-center gap-2\">\r\n        <Textfield\r\n          iconName=\"search\"\r\n          showIcon={true}\r\n          placeholder={t(\"Search\")}\r\n          onChange={handleSearch}\r\n        />\r\n\r\n        <DropdownMenu onOpenChange={(open) => setIsSortOpen(open)}>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium \r\n          ${isSortOpen ? \"border border-destructive\" : \"border-none\"}`}\r\n          >\r\n            <span className=\"material-symbols-outlined\">swap_vert</span>\r\n            <div className=\"text-lg\">{t(\"Sort\")}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align=\"end\" className=\"p-2 gap-2\">\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n              {t(\"SortBy\")}\r\n            </DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sort.by}\r\n              onValueChange={(value) => handleSortChange(\"by\", value)}\r\n            >\r\n              <DropdownMenuRadioItem\r\n                value=\"Date\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Date\")}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem\r\n                value=\"Status\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Status\")}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n              {t(\"Order\")}\r\n            </DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sort.order}\r\n              onValueChange={(value) => handleSortChange(\"order\", value)}\r\n            >\r\n              <DropdownMenuRadioItem\r\n                value=\"Ascending\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Ascending\")}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem\r\n                value=\"Descending\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Descending\")}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n\r\n        <DropdownMenu onOpenChange={(open) => setIsFilterOpen(open)}>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium \r\n          ${isFilterOpen ? \"border border-destructive\" : \"border-none\"}`}\r\n          >\r\n            <span className=\"material-symbols-outlined\">page_info</span>\r\n            <div className=\"text-lg\">{t(\"Filter\")}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent\r\n            className=\"flex flex-col justify-center gap-2 p-2 z-50\"\r\n            align=\"end\"\r\n          >\r\n            <div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                {t(\"Date\")}\r\n              </DropdownMenuLabel>\r\n              <DatePickerWithRange\r\n                startDate={filter?.dateRange.start}\r\n                endDate={filter?.dateRange.end}\r\n                onSelect={handleDateSelect}\r\n                className=\"my-date-picker\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                {t(\"Status\")}\r\n              </DropdownMenuLabel>\r\n              <Select\r\n                value={filter?.commentStatus || \"All\"}\r\n                onValueChange={(value) =>\r\n                  setFilter({\r\n                    commentStatus: value,\r\n                    dateRange: {\r\n                      start: filter?.dateRange.start,\r\n                      end: filter?.dateRange.end,\r\n                    },\r\n                  })\r\n                }\r\n              >\r\n                <SelectTrigger className=\"\">\r\n                  <SelectValue\r\n                    placeholder={\r\n                      filter?.commentStatus === \"All\"\r\n                        ? t(\"All\")\r\n                        : filter?.commentStatus\r\n                    }\r\n                  />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectGroup>\r\n                    <SelectLabel>{t(\"Status\")}</SelectLabel>\r\n                    <SelectItem value=\"All\">{t(\"All\")}</SelectItem>\r\n                    {commentStatus.map((status) => (\r\n                      <SelectItem value={status} key={status}>\r\n                        {s(status)}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectGroup>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div className=\"flex w-full justify-end mt-4 gap-2\">\r\n              <Button size=\"sm\" variant=\"secondary\" onClick={resetFilter}>\r\n                {t(\"Reset\")}\r\n              </Button>\r\n              <Button size=\"sm\" variant=\"primary\" onClick={applyFilter}>\r\n                {t(\"Apply\")}\r\n              </Button>\r\n            </div>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </div>\r\n      <Table>\r\n        <TableHeader>\r\n          <TableRow>\r\n            <TableHead>{t(\"Message\")}</TableHead>\r\n            <TableHead className=\"w-[180px]\">{t(\"Date\")}</TableHead>\r\n            <TableHead className=\"w-[240px]\">{t(\"Status\")}</TableHead>\r\n            <TableHead className=\"w-[240px]\">{t(\"inspector\")}</TableHead>\r\n            <TableHead className=\"text-end w-[10px]\"></TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          {allComments.map((comment, index) => (\r\n            <TableRow key={index}>\r\n              <TableCell className=\"font-medium\">{comment.message}</TableCell>\r\n              <TableCell className=\"font-medium\">\r\n                {formatTime(comment.timestamp)}\r\n              </TableCell>\r\n              <TableCell className=\"font-medium\">\r\n                <BadgeCustom\r\n                  variant={comment.status === false ? \"blue\" : \"green\"}\r\n                  iconName={\r\n                    comment.status === false ? \"hourglass_top\" : \"check\"\r\n                  }\r\n                  showIcon={true}\r\n                >\r\n                  {s(comment.status === false ? \"pending\" : \"completed\")}\r\n                </BadgeCustom>\r\n              </TableCell>\r\n              <TableCell className=\"font-medium flex flex-row gap-2 items-center\">\r\n                {comment.user.profile.name ? (\r\n                  <Avatar>\r\n                    <AvatarImage\r\n                      src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${comment.user.profile.image?.path}`}\r\n                    />\r\n                    <AvatarFallback id={comment.user.id.toString()}>\r\n                      {getInitials(comment.user.profile.name)}\r\n                    </AvatarFallback>\r\n                  </Avatar>\r\n                ) : (\r\n                  <Skeleton className=\"h-12 w-12 rounded-full bg-input\" />\r\n                )}\r\n                <div>\r\n                  {comment.user.profile.name ? (\r\n                    comment.user.profile.name\r\n                  ) : (\r\n                    <div className=\"text-destructive\">\r\n                      {comment.user.username}\r\n                      <div className=\"text-[14px]\">No profile is provided</div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </TableCell>\r\n              <TableCell>\r\n                <DropdownMenu>\r\n                  <DropdownMenuTrigger onClick={(e) => e.stopPropagation()}>\r\n                    <Button variant=\"ghost\" className=\"w-[45px] h-[45px]\">\r\n                      <span className=\"material-symbols-outlined items-center text-input\">\r\n                        more_horiz\r\n                      </span>\r\n                    </Button>\r\n                  </DropdownMenuTrigger>\r\n\r\n                  <DropdownMenuContent align=\"end\" className=\"p-0\">\r\n                    <DropdownMenuItem className=\"p-0\">\r\n                      <AlertDialog>\r\n                        <AlertDialogTrigger\r\n                          asChild\r\n                          className=\"pl-2 py-2\"\r\n                          onClick={(e) => e.stopPropagation()}\r\n                        >\r\n                          <div\r\n                            className=\"cursor-pointer w-full h-full flex\"\r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                            }}\r\n                          >\r\n                            {t(\"Detail\")}\r\n                          </div>\r\n                        </AlertDialogTrigger>\r\n                        <AlertDialogContent className=\"px-6 py-4 gap-4\">\r\n                          <div className=\"flex flex-col gap-2\">\r\n                            <p className=\"text-lg font-semibold text-muted-foreground\">\r\n                              {formatTime(comment.timestamp)}\r\n                            </p>\r\n                            <p className=\"text-2xl font-bold text-card-foreground\">\r\n                              {\r\n                                comment.patrolResult.itemZone.item.checklist\r\n                                  .title\r\n                              }\r\n                            </p>\r\n                          </div>\r\n                          <div className=\"flex flex-col gap-2\">\r\n                            <p className=\"text-xl text-muted-foreground\">\r\n                              {comment.patrolResult.itemZone.item.name}\r\n                            </p>\r\n                            <div className=\"flex items-center gap-1 text-base text-muted-foreground\">\r\n                              <span className=\"material-symbols-outlined\">\r\n                                location_on\r\n                              </span>\r\n                              <p>\r\n                                {z(comment.patrolResult.itemZone.zone.name)}\r\n                              </p>\r\n                            </div>\r\n                          </div>\r\n                          <BadgeCustom\r\n                            variant={\r\n                              getItemTypeVariant(\r\n                                comment.patrolResult.itemZone.item\r\n                                  .type as itemType\r\n                              ).variant\r\n                            }\r\n                            shape=\"square\"\r\n                            showIcon={true}\r\n                            iconName={\r\n                              getItemTypeVariant(\r\n                                comment.patrolResult.itemZone.item\r\n                                  .type as itemType\r\n                              ).iconName\r\n                            }\r\n                          >\r\n                            {s(comment.patrolResult.itemZone.item.type)}\r\n                          </BadgeCustom>\r\n\r\n                          <AlertDialogFooter>\r\n                            <AlertDialogCancel\r\n                              onClick={(e) => e.stopPropagation()}\r\n                            >\r\n                              {t(\"Close\")}\r\n                            </AlertDialogCancel>\r\n                          </AlertDialogFooter>\r\n                        </AlertDialogContent>\r\n                      </AlertDialog>\r\n                    </DropdownMenuItem>\r\n                    {isDialogOpen && (\r\n                      <AlertCustom\r\n                        title={a(\"ConfirmCommentTitle\")}\r\n                        description={a(\"ConfirmCommentDescription\")}\r\n                        primaryButtonText={t(\"Confirm\")}\r\n                        primaryIcon=\"check\"\r\n                        primaryVariant=\"primary\"\r\n                        secondaryButtonText={t(\"Cancel\")}\r\n                        backResult={handleDialogResult}\r\n                      ></AlertCustom>\r\n                    )}\r\n                    <DropdownMenuItem\r\n                      className=\"cursor-pointer w-full h-full flex\"\r\n                      disabled={comment.status === true}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        handleConfirmComment(comment.id);\r\n                        e.stopPropagation();\r\n                      }}\r\n                    >\r\n                      <p className=\"text-primary\">{t(\"Resolve\")}</p>\r\n                    </DropdownMenuItem>\r\n                  </DropdownMenuContent>\r\n                </DropdownMenu>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\defect\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\defect\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\defect\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\defect\\page.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1444,1468],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport Textfield from \"@/components/textfield\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuLabel,\r\n  DropdownMenuRadioGroup,\r\n  DropdownMenuRadioItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectGroup,\r\n  SelectItem,\r\n  SelectLabel,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport Defect from \"@/components/defect\";\r\nimport { FilterDefect, IDefect, itemType, defectStatus } from \"@/app/type\";\r\nimport { fetchData, sortData } from \"@/lib/utils\";\r\nimport Loading from \"@/components/loading\";\r\nimport { DatePickerWithRange } from \"@/components/date-picker\";\r\nimport { DateRange } from \"react-day-picker\";\r\n\r\n\r\n\r\nexport default function Page() {\r\n  const t = useTranslations(\"General\");\r\n  const s = useTranslations(\"Status\");\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [isSortOpen, setIsSortOpen] = useState(false);\r\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n  const [allDefects, setAllDefects] = useState<IDefect[]>([])\r\n  const getAllDefects = async () => {\r\n    try {\r\n      const queryString = buildQueryString(filter, searchTerm);\r\n      console.log(queryString)\r\n      const data = await fetchData(\"get\", `/defects?${queryString}`, true);\r\n      setAllDefects(data);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch patrol data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSortChange = (type: string, value: string) => {\r\n    setSort((prevSort) => ({\r\n      ...prevSort,\r\n      [type]: value,\r\n    }));\r\n  };\r\n\r\n  const defectStatus: defectStatus[] = [\"reported\" , \"completed\" , \"pending_inspection\" , \"in_progress\" ,\"resolved\"]\r\n\r\n  const initialFilter = {\r\n    defectStatus: \"All\",\r\n    defectType: [\"safety\", \"environment\", \"maintenance\"],\r\n    dateRange: { start: undefined, end: undefined },\r\n  };\r\n\r\n  const getStoredFilter = () => {\r\n    if (typeof window !== 'undefined') {\r\n      const storedFilter = localStorage.getItem('defectsFilter');\r\n      if (storedFilter) {\r\n        return JSON.parse(storedFilter);\r\n      }\r\n    }\r\n    return initialFilter;\r\n  };\r\n\r\n  const [filter, setFilter] = useState<FilterDefect | null>(getStoredFilter())\r\n\r\n  const [sort, setSort] = useState<{ by: string; order: string }>({\r\n    by: \"Date\",\r\n    order: \"Ascending\",\r\n  });\r\n\r\n  const toggleTypeFilter = (type: itemType, checked: boolean) => {\r\n    if (checked) {\r\n      setFilter((prev) => {\r\n        if (prev) {\r\n          return {\r\n            ...prev,\r\n            defectType: [...prev.defectType, type],\r\n          };\r\n        } else {\r\n          return {\r\n            defectStatus: \"All\",\r\n            defectType: [],\r\n            dateRange: { start: undefined, end: undefined }\r\n          }\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      setFilter((prev) => {\r\n        if (prev) {\r\n          return {\r\n            ...prev,\r\n            defectType: prev.defectType.filter((s) => s !== type),\r\n          };\r\n        }\r\n        return prev;\r\n      });\r\n    }\r\n  };\r\n\r\n  const applyFilter = () => {\r\n    getAllDefects()\r\n  };\r\n\r\n  const resetFilter = () => {\r\n    setFilter(initialFilter)\r\n  };\r\n\r\n  const handleDateSelect = (dateRange: DateRange) => {\r\n    const startDate = dateRange.from ?? null;\r\n    const endDate = dateRange.to\r\n      ? new Date(new Date(dateRange.to).setHours(23, 59, 59, 999))\r\n      : null;\r\n    setFilter({\r\n      defectStatus: filter?.defectStatus || null,\r\n      defectType: filter?.defectType || [],\r\n      dateRange: {\r\n        start: startDate || undefined,\r\n        end: endDate || undefined\r\n      }\r\n    });\r\n  };\r\n\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const handleSearch = (event: any) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const buildQueryString = (filter: FilterDefect | null, searchTerm: string) => {\r\n    const params: Record<string, string | undefined> = {};\r\n\r\n    // เพิ่ม search term ถ้ามี\r\n    if (searchTerm) params.search = searchTerm;\r\n\r\n    // เพิ่ม status filter ถ้าไม่ใช่ \"All\"\r\n    if (filter?.defectStatus && filter.defectStatus !== \"All\") {\r\n      params.status = filter.defectStatus;\r\n    }\r\n\r\n    // เพิ่ม type filter\r\n    if (filter?.defectType?.length) {\r\n      params.type = filter.defectType.join(\",\");\r\n    }\r\n\r\n    // เพิ่ม startDate\r\n    if (filter?.dateRange?.start) {\r\n      params.startDate = filter?.dateRange.start.toISOString();\r\n    }\r\n\r\n    // เพิ่ม endDate \r\n    if (filter?.dateRange?.end) {\r\n      params.endDate = filter?.dateRange?.end.toISOString();\r\n    }\r\n\r\n    return new URLSearchParams(params).toString();\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllDefects()\r\n    setLoading(false)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    getAllDefects()\r\n  }, [searchTerm])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('defectFilter', JSON.stringify(filter));\r\n  }, [filter]);\r\n\r\n  useEffect(() => {\r\n    const sortedData = sortData(allDefects, sort);\r\n    if (JSON.stringify(sortedData) !== JSON.stringify(allDefects)) {\r\n      setAllDefects(sortedData);\r\n    }\r\n  }, [sort, allDefects]);\r\n\r\n  if (loading) {\r\n    return <Loading />\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col\">\r\n\r\n      <div className=\"flex items-center gap-2\">\r\n        <Textfield\r\n          iconName=\"search\"\r\n          showIcon={true}\r\n          placeholder={t(\"Search\")}\r\n          onChange={handleSearch}\r\n        />\r\n\r\n        <DropdownMenu onOpenChange={(open) => setIsSortOpen(open)}>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium \r\n          ${isSortOpen ? \"border border-destructive\" : \"border-none\"}`}\r\n          >\r\n            <span className=\"material-symbols-outlined\">swap_vert</span>\r\n            <div className=\"text-lg\">{t('Sort')}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align=\"end\" className=\"p-2 gap-2\">\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('SortBy')}</DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sort.by}\r\n              onValueChange={(value) => handleSortChange('by', value)}\r\n            >\r\n              <DropdownMenuRadioItem value=\"Date\" className=\"text-base\" onSelect={(e) => e.preventDefault()}>\r\n                {t('Date')}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem value=\"Status\" className=\"text-base\" onSelect={(e) => e.preventDefault()}>\r\n                {t('Status')}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('Order')}</DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sort.order}\r\n              onValueChange={(value) => handleSortChange('order', value)}\r\n            >\r\n              <DropdownMenuRadioItem value=\"Ascending\" className=\"text-base\" onSelect={(e) => e.preventDefault()}>\r\n                {t('Ascending')}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem value=\"Descending\" className=\"text-base\" onSelect={(e) => e.preventDefault()}>\r\n                {t('Descending')}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n\r\n        <DropdownMenu onOpenChange={(open) => setIsFilterOpen(open)}>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium \r\n          ${isFilterOpen ? \"border border-destructive\" : \"border-none\"}`}\r\n          >\r\n            <span className=\"material-symbols-outlined\">page_info</span>\r\n            <div className=\"text-lg\">{t('Filter')}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent\r\n            className=\"flex flex-col justify-center gap-2 p-2 z-50\"\r\n            align=\"end\"\r\n          >\r\n            <div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('Date')}</DropdownMenuLabel>\r\n              <DatePickerWithRange\r\n                startDate={filter?.dateRange.start}\r\n                endDate={filter?.dateRange.end}\r\n                onSelect={handleDateSelect}\r\n                className=\"my-date-picker\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('Status')}</DropdownMenuLabel>\r\n              <Select\r\n                value={filter?.defectStatus || 'All'}\r\n                onValueChange={(value) =>\r\n                  setFilter({\r\n                    defectStatus: value,\r\n                    defectType: filter?.defectType || [],\r\n                    dateRange: { start: filter?.dateRange.start, end: filter?.dateRange.end }\r\n                  })\r\n                }\r\n              >\r\n                <SelectTrigger className=\"\">\r\n                  <SelectValue\r\n                    placeholder={filter?.defectStatus === 'All' ? t('All') : filter?.defectStatus}\r\n                  />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectGroup>\r\n                    <SelectLabel>{t('Status')}</SelectLabel>\r\n                    <SelectItem value=\"All\">{t('All')}</SelectItem>\r\n                    {defectStatus.map((status) => (\r\n                      <SelectItem value={status} key={status}>\r\n                        {s(status)}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectGroup>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('Type')}</DropdownMenuLabel>\r\n              <DropdownMenuCheckboxItem\r\n                checked={filter?.defectType.includes(\"safety\")}\r\n                onCheckedChange={(checked) => toggleTypeFilter(\"safety\", checked)}\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                <BadgeCustom\r\n                  width=\"w-full\"\r\n                  variant=\"green\"\r\n                  showIcon={true}\r\n                  iconName=\"verified_user\"\r\n                  children={s('safety')}\r\n                  shape=\"square\"\r\n                />\r\n              </DropdownMenuCheckboxItem>\r\n              <DropdownMenuCheckboxItem\r\n                checked={filter?.defectType.includes(\"environment\")}\r\n                onCheckedChange={(checked) => toggleTypeFilter(\"environment\", checked)}\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                <BadgeCustom\r\n                  width=\"w-full\"\r\n                  variant=\"blue\"\r\n                  showIcon={true}\r\n                  iconName=\"psychiatry\"\r\n                  children={s('environment')}\r\n                  shape=\"square\"\r\n                />\r\n              </DropdownMenuCheckboxItem>\r\n              <DropdownMenuCheckboxItem\r\n                checked={filter?.defectType.includes(\"maintenance\")}\r\n                onCheckedChange={(checked) => toggleTypeFilter(\"maintenance\", checked)}\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                <BadgeCustom\r\n                  width=\"w-full\"\r\n                  variant=\"red\"\r\n                  showIcon={true}\r\n                  iconName=\"build\"\r\n                  children={s('maintenance')}\r\n                  shape=\"square\"\r\n                />\r\n              </DropdownMenuCheckboxItem>\r\n            </div>\r\n\r\n            <div className=\"flex w-full justify-end mt-4 gap-2\">\r\n              <Button size=\"sm\" variant=\"secondary\" onClick={resetFilter}>\r\n                {t('Reset')}\r\n              </Button>\r\n              <Button size=\"sm\" variant=\"primary\" onClick={applyFilter}>{t('Apply')}</Button>\r\n            </div>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n\r\n      </div>\r\n      <div className=\"flex flex-col gap-y-4 py-4\">\r\n        {allDefects.map((defect) => (\r\n          <Defect defect={defect} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\login\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol-defect\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol-defect\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol-defect\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IUser' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Niconne' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\nimport { useEffect, useState } from \"react\";\r\nimport Textfield from \"@/components/textfield\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuCheckboxItem,\r\n    DropdownMenuContent,\r\n    DropdownMenuLabel,\r\n    DropdownMenuRadioGroup,\r\n    DropdownMenuRadioItem,\r\n    DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport { fetchData } from \"@/lib/utils\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport {\r\n    Select,\r\n    SelectContent,\r\n    SelectGroup,\r\n    SelectItem,\r\n    SelectLabel,\r\n    SelectTrigger,\r\n    SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport {\r\n    IDefect,\r\n} from \"@/app/type\";\r\nimport { IUser } from \"@/app/type\";\r\nimport Loading from \"@/components/loading\";\r\nimport ReportDefect from \"@/components/report-defect\";\r\nimport { DatePickerWithRange } from \"@/components/date-picker\";\r\nimport { Niconne } from \"next/font/google\";\r\n\r\nexport default function page() {\r\n    const t = useTranslations(\"General\");\r\n    const [isSortOpen, setIsSortOpen] = useState(false);\r\n    const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n    const [allDefects, setAllDefects] = useState<IDefect[]>([]);\r\n    const s = useTranslations(\"Status\");\r\n\r\n    const getAllDefects = async () => {\r\n        try {\r\n            const allData = await fetchData(\"get\", \"/patrol/defects\", true);\r\n            setAllDefects(allData);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch all defect:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllDefects()\r\n        setLoading(false)\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return <Loading />\r\n    }\r\n\r\n    const fetchRealtimeData = (defect: IDefect) => {\r\n        setAllDefects((prevDefects) =>\r\n            prevDefects.map((d) => (d.id === defect.id ? defect : d))\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col px-6 py-4 gap-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n                <Textfield\r\n                    iconName=\"search\"\r\n                    showIcon={true}\r\n                    placeholder={t(\"Search\")}\r\n                />\r\n\r\n                <DropdownMenu onOpenChange={(open) => setIsSortOpen(open)}>\r\n                    <DropdownMenuTrigger\r\n                        className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium \r\n                       ${isSortOpen ? \"border border-destructive\" : \"border-none\"}`}\r\n                    >\r\n                        <span className=\"material-symbols-outlined\">swap_vert</span>\r\n                        <div className=\"text-lg\">{t('Sort')}</div>\r\n                    </DropdownMenuTrigger>\r\n                    <DropdownMenuContent align=\"end\" className=\"p-2 gap-2\">\r\n                        <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('SortBy')}</DropdownMenuLabel>\r\n                        <DropdownMenuRadioGroup\r\n                            value={null}\r\n                            onValueChange={null}\r\n                        >\r\n                            <DropdownMenuRadioItem value=\"Date\" className=\"text-base\" onSelect={(e) => e.preventDefault()}>\r\n                                {t('Date')}\r\n                            </DropdownMenuRadioItem>\r\n                            <DropdownMenuRadioItem value=\"Status\" className=\"text-base\" onSelect={(e) => e.preventDefault()}>\r\n                                {t('Status')}\r\n                            </DropdownMenuRadioItem>\r\n                        </DropdownMenuRadioGroup>\r\n\r\n                        <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('Order')}</DropdownMenuLabel>\r\n                        <DropdownMenuRadioGroup\r\n                            value={null}\r\n                            onValueChange={null}\r\n                        >\r\n                            <DropdownMenuRadioItem value=\"Ascending\" className=\"text-base\" onSelect={(e) => e.preventDefault()}>\r\n                                {t('Ascending')}\r\n                            </DropdownMenuRadioItem>\r\n                            <DropdownMenuRadioItem value=\"Descending\" className=\"text-base\" onSelect={(e) => e.preventDefault()}>\r\n                                {t('Descending')}\r\n                            </DropdownMenuRadioItem>\r\n                        </DropdownMenuRadioGroup>\r\n                    </DropdownMenuContent>\r\n                </DropdownMenu>\r\n\r\n                <DropdownMenu onOpenChange={(open) => setIsFilterOpen(open)}>\r\n                    <DropdownMenuTrigger\r\n                        className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium \r\n                       ${isFilterOpen ? \"border border-destructive\" : \"border-none\"}`}\r\n                    >\r\n                        <span className=\"material-symbols-outlined\">page_info</span>\r\n                        <div className=\"text-lg\">{t('Filter')}</div>\r\n                    </DropdownMenuTrigger>\r\n                    <DropdownMenuContent\r\n                        className=\"flex flex-col justify-center gap-2 p-2 z-50\"\r\n                        align=\"end\"\r\n                    >\r\n                        <div>\r\n                            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('Date')}</DropdownMenuLabel>\r\n                            <DatePickerWithRange\r\n                                startDate={null}\r\n                                endDate={null}\r\n                                onSelect={null}\r\n                                className=\"my-date-picker\"\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('Status')}</DropdownMenuLabel>\r\n                            <Select\r\n                                value={t('All')}\r\n                                onValueChange={null}\r\n                            >\r\n                                <SelectTrigger className=\"text-card-foreground\">\r\n                                    <SelectValue\r\n                                        placeholder={t('All')}\r\n                                    />\r\n                                </SelectTrigger>\r\n                                <SelectContent>\r\n                                    <SelectGroup>\r\n                                        <SelectLabel>{t('Status')}</SelectLabel>\r\n                                        <SelectItem value=\"All\">{t('All')}</SelectItem>\r\n                                        {/* {defectStatus.map((status) => (\r\n                                            <SelectItem value={status} key={status}>\r\n                                                {s(status)}\r\n                                            </SelectItem>\r\n                                        ))} */}\r\n                                    </SelectGroup>\r\n                                </SelectContent>\r\n                            </Select>\r\n                        </div>\r\n                        <div>\r\n                            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('Type')}</DropdownMenuLabel>\r\n                            <DropdownMenuCheckboxItem\r\n                                checked={null}\r\n                                onCheckedChange={null}\r\n                                onSelect={(e) => e.preventDefault()}\r\n                            >\r\n                                <BadgeCustom\r\n                                    width=\"w-full\"\r\n                                    variant=\"green\"\r\n                                    showIcon={true}\r\n                                    iconName=\"verified_user\"\r\n                                    children={s('safety')}\r\n                                    shape=\"square\"\r\n                                />\r\n                            </DropdownMenuCheckboxItem>\r\n                            <DropdownMenuCheckboxItem\r\n                                checked={null}\r\n                                onCheckedChange={null}\r\n                                onSelect={(e) => e.preventDefault()}\r\n                            >\r\n                                <BadgeCustom\r\n                                    width=\"w-full\"\r\n                                    variant=\"blue\"\r\n                                    showIcon={true}\r\n                                    iconName=\"psychiatry\"\r\n                                    children={s('environment')}\r\n                                    shape=\"square\"\r\n                                />\r\n                            </DropdownMenuCheckboxItem>\r\n                            <DropdownMenuCheckboxItem\r\n                                checked={null}\r\n                                onCheckedChange={null}\r\n                                onSelect={(e) => e.preventDefault()}\r\n                            >\r\n                                <BadgeCustom\r\n                                    width=\"w-full\"\r\n                                    variant=\"red\"\r\n                                    showIcon={true}\r\n                                    iconName=\"build\"\r\n                                    children={s('maintenance')}\r\n                                    shape=\"square\"\r\n                                />\r\n                            </DropdownMenuCheckboxItem>\r\n                        </div>\r\n\r\n                        <div className=\"flex w-full justify-end mt-4 gap-2\">\r\n                            <Button size=\"sm\" variant=\"secondary\" onClick={null}>\r\n                                {t('Reset')}\r\n                            </Button>\r\n                            <Button size=\"sm\" variant=\"primary\" onClick={null}>{t('Apply')}</Button>\r\n                        </div>\r\n                    </DropdownMenuContent>\r\n                </DropdownMenu>\r\n            </div>\r\n            <div>\r\n                {allDefects.map((defect: IDefect) => {\r\n                    return (\r\n                        <div className=\"pb-4\">\r\n                            <ReportDefect\r\n                                defect={defect}\r\n                                page={\"patrol-defect\"}\r\n                                response={(defect: IDefect) => {\r\n                                    fetchRealtimeData(defect);\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol\\[id]\\detail\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFunction' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":243,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":243,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\nimport { IDefect, IPatrolChecklist, patrolStatus } from '@/app/type';\r\nimport BadgeCustom from '@/components/badge-custom';\r\nimport Loading from '@/components/loading';\r\nimport PatrolChecklist from '@/components/patrol-checklist';\r\nimport PatrolTimer from '@/components/patrol-timer';\r\nimport TabMenu from '@/components/tab-menu';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { usePatrol } from '@/context/patrol-context';\r\nimport { exportData, getInitials, getPatrolStatusVariant } from '@/lib/utils';\r\nimport { useLocale, useTranslations } from 'next-intl';\r\nimport { useParams, useRouter } from 'next/navigation';\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/ui/hover-card\";\r\nimport {\r\n    CardFooter,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n    AlertDialog,\r\n    AlertDialogTrigger,\r\n    AlertDialogContent,\r\n    AlertDialogHeader,\r\n    AlertDialogTitle,\r\n    AlertDialogDescription,\r\n    AlertDialogCancel,\r\n    AlertDialogAction,\r\n    AlertDialogFooter,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport React from 'react'\r\n\r\nexport default function Page() {\r\n    const {\r\n        patrol,\r\n        patrolResults,\r\n        results,\r\n        user,\r\n        lock,\r\n        isAlertOpen,\r\n        mounted,\r\n        canFinish,\r\n        countDefects,\r\n        countFails,\r\n        countItems,\r\n        patrolUser,\r\n        isHovered,\r\n        formatDate,\r\n        formatId,\r\n        formatTimeDate,\r\n        formatZone,\r\n        handleMouseEnter,\r\n        handleMouseLeave,\r\n        itemCounts,\r\n        toggleLock,\r\n        calculateProgress,\r\n        handleResult,\r\n        fetchRealtimeData,\r\n        handleStartPatrol,\r\n        handleFinishPatrol,\r\n        handleOpenDialog,\r\n        handleCloseDialog,\r\n    } = usePatrol();\r\n    const locale = useLocale()\r\n    const params = useParams();\r\n    const id = params.id\r\n    const router = useRouter();\r\n    const a = useTranslations(\"Alert\");\r\n    const t = useTranslations(\"General\");\r\n    const s = useTranslations(\"Status\");\r\n\r\n    itemCounts(patrol, patrolResults);\r\n    const inspectors = patrolUser\r\n\r\n    if (!patrol || !mounted) {\r\n        return (\r\n            <Loading />\r\n        )\r\n    }\r\n    return (\r\n        <div className='flex flex-col gap-4'>\r\n            {/* TabList และ Title */}\r\n            <div className=\"flex justify-between items-center\">\r\n                <div className=\"flex items-center p-0 justify-center text-center gap-2\">\r\n\r\n                    <AlertDialog>\r\n                        <AlertDialogTrigger asChild>\r\n                            <Button\r\n                                variant=\"ghost\"\r\n                                className=\"flex hover:bg-secondary p-2\"\r\n                            >\r\n                                <span className=\"material-symbols-outlined text-card-foreground w-[22px] h-[22px]\">\r\n                                    error\r\n                                </span>\r\n                            </Button>\r\n                        </AlertDialogTrigger>\r\n                        <AlertDialogContent className=\"w-[400px] h-fit px-6 py-4 \">\r\n                            <AlertDialogHeader className='flex flex-col gap-2'>\r\n                                <div className='flex flex-col gap-1'>\r\n                                    <p className=\"text-lg font-semibold text-muted-foreground\">\r\n                                        {formatDate(patrol.date)}\r\n                                    </p>\r\n                                    <AlertDialogTitle >\r\n                                        <p className=\"text-2xl font-semibold\">{patrol.preset.title}</p>\r\n                                    </AlertDialogTitle>\r\n                                </div>\r\n\r\n                                <AlertDialogDescription className='flex flex-col gap-2'>\r\n                                    <div className=\"flex flex-row gap-1\">\r\n                                        <span className=\"material-symbols-outlined\">\r\n                                            description\r\n                                        </span>\r\n                                        <p className=\"text-muted-foreground text-xl font-semibold\">\r\n                                            {formatId(patrol.id)}\r\n                                        </p>\r\n                                    </div>\r\n\r\n                                    <div className=\"flex flex-row gap-1\">\r\n                                        {patrol.status === \"completed\" && (\r\n                                            <span className=\"material-symbols-outlined\">\r\n                                                event_available\r\n                                            </span>\r\n                                        )}\r\n\r\n                                        {patrol.status === \"completed\" ? (\r\n                                            <div className=\"text-muted-foreground font-extrabold text-lg\">\r\n                                                <p className='text-xl font-semibold text-muted-foreground'>\r\n                                                    {formatDate(patrol.endTime) + \" \" + formatTimeDate(patrol.startTime) + \" - \" + formatTimeDate(patrol.endTime)}\r\n                                                </p>\r\n                                            </div>\r\n                                        ) : (\"\")}\r\n                                    </div>\r\n\r\n                                    <div className=\"flex flex-row gap-1 items-start\">\r\n                                        <span className=\"material-symbols-outlined text-2xl text-muted-foreground p-0\">\r\n                                            location_on\r\n                                        </span>\r\n                                        <p className='flex items-center text-base text-muted-foreground'>\r\n                                            {formatZone(patrol) || \"No zones available\"}\r\n                                        </p>\r\n                                    </div>\r\n\r\n                                    <div className=\"flex flex-row gap-1 \">\r\n                                        <span className=\"material-symbols-outlined text-2xl text-muted-foreground \">\r\n                                            data_info_alert\r\n                                        </span>\r\n                                        <p className=\"gap-1 text-base text-muted-foreground \">\r\n                                            {patrol.preset.description}\r\n                                        </p>\r\n                                    </div>\r\n                                </AlertDialogDescription>\r\n                            </AlertDialogHeader>\r\n                            <AlertDialogFooter>\r\n                                <AlertDialogCancel>Close</AlertDialogCancel>\r\n                            </AlertDialogFooter>\r\n                        </AlertDialogContent>\r\n                    </AlertDialog>\r\n\r\n\r\n                    <div className=\"flex flex-col h-full justify-start w-full\">\r\n                        <p className=\"text-2xl font-bold mb-1\">{patrol.preset.title}</p>\r\n                        <Progress value={calculateProgress()} />\r\n                    </div>\r\n                </div>\r\n                <div className='flex flex-row items-center gap-2'>\r\n                    {patrol && <PatrolTimer launchDate={patrol.startTime} patrolStatus={patrol.status} patrolDuration={patrol.duration} />}\r\n\r\n                    <BadgeCustom\r\n                        iconName={getPatrolStatusVariant(patrol.status).iconName}\r\n                        showIcon={true}\r\n                        showTime={false}\r\n                        variant={getPatrolStatusVariant(patrol.status).variant}\r\n                    >\r\n                        {s(patrol.status)}\r\n                    </BadgeCustom>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"flex w-full justify-between items-center\">\r\n                <TabMenu id={id.toString()} />\r\n                <div className=\"flex items-center gap-2\">\r\n                    <Button variant={\"secondary\"} onClick={() => router.push(`/${locale}`)}>\r\n                        {t(\"Back\")}\r\n                    </Button>\r\n                    {(() => {\r\n                        let iconName: string;\r\n                        let text: string;\r\n                        let variant:\r\n                            | \"link\"\r\n                            | \"default\"\r\n                            | \"secondary\"\r\n                            | \"destructive\"\r\n                            | \"success\"\r\n                            | \"fail\"\r\n                            | \"outline\"\r\n                            | \"ghost\"\r\n                            | \"primary\"\r\n                            | null\r\n                            | undefined;\r\n                        let disabled: boolean;\r\n                        let handleFunction: any;\r\n                        switch (patrol.status as patrolStatus) {\r\n                            case \"completed\":\r\n                                variant = \"outline\";\r\n                                iconName = \"ios_share\";\r\n                                text = \"Export\";\r\n                                disabled = false;\r\n                                handleFunction = () => {\r\n                                    // handleOpenExportPatrol()\r\n                                };\r\n                                break;\r\n                            case \"on_going\":\r\n                                variant = \"primary\";\r\n                                iconName = \"Check\";\r\n                                text = \"Finish\";\r\n                                disabled = false;\r\n                                handleFunction = () => {\r\n                                    handleFinishPatrol();\r\n                                };\r\n                                break;\r\n                            case \"scheduled\":\r\n                                variant = \"primary\";\r\n                                iconName = \"cached\";\r\n                                text = \"Start\";\r\n                                disabled = false;\r\n                                handleFunction = () => {\r\n                                    handleStartPatrol();\r\n                                };\r\n                                break;\r\n                            case \"pending\":\r\n                                variant = \"primary\";\r\n                                iconName = \"cached\";\r\n                                text = \"Start\";\r\n                                disabled = true;\r\n                                handleFunction = () => { };\r\n                                break;\r\n                            default:\r\n                                variant = \"primary\";\r\n                                iconName = \"cached\";\r\n                                text = \"Start\";\r\n                                disabled = true;\r\n                                handleFunction = () => { };\r\n                                break;\r\n                        }\r\n                        return (\r\n                            <div>\r\n                                {patrol.status === \"completed\" &&\r\n                                    isAlertOpen ? (\r\n                                    <AlertDialog open={isAlertOpen}>\r\n                                        <AlertDialogTrigger asChild>\r\n                                            <Button\r\n                                                variant={variant}\r\n                                                onClick={handleOpenDialog}\r\n                                                disabled={disabled}\r\n                                                className='flex flex-row items-center gap-2'\r\n                                            >\r\n                                                <span className=\"material-symbols-outlined \">\r\n                                                    {iconName}\r\n                                                </span>\r\n                                                {t(text)}\r\n                                            </Button>\r\n                                        </AlertDialogTrigger>\r\n\r\n                                        <AlertDialogContent className=\"w-[400px] h-fit px-6 py-4 \">\r\n                                            <AlertDialogHeader className='flex flex-col gap-2'>\r\n                                                <div className='flex flex-col gap-1'>\r\n                                                    <p className=\"text-lg font-semibold text-muted-foreground\">\r\n                                                        {formatDate(patrol.date)}\r\n                                                    </p>\r\n                                                    <AlertDialogTitle >\r\n                                                        <p className=\"text-2xl font-semibold\">{patrol.preset.title}</p>\r\n                                                    </AlertDialogTitle>\r\n                                                </div>\r\n\r\n                                                <AlertDialogDescription className='flex flex-col gap-2'>\r\n                                                    <div className=\"flex flex-row gap-1\">\r\n                                                        <span className=\"material-symbols-outlined\">\r\n                                                            description\r\n                                                        </span>\r\n                                                        <p className=\"text-muted-foreground text-xl font-semibold\">\r\n                                                            {formatId(patrol.id)}\r\n                                                        </p>\r\n                                                    </div>\r\n\r\n                                                    <HoverCard open={isHovered}>\r\n                                                        <HoverCardTrigger\r\n                                                            onClick={(e) => {\r\n                                                                e.stopPropagation();\r\n                                                            }}\r\n                                                            onMouseEnter={handleMouseEnter}\r\n                                                            onMouseLeave={handleMouseLeave}\r\n                                                            asChild\r\n                                                        >\r\n                                                            <div className=\"flex text-muted-foreground items-center\">\r\n                                                                <span className=\"material-symbols-outlined me-1\">\r\n                                                                    person_search\r\n                                                                </span>\r\n                                                                {inspectors.length > 0 && (\r\n                                                                    <div className=\"flex items-center me-1 truncate max-w-[190px]\">\r\n                                                                        <p className=\"text-xl me-2.5 truncate\">{inspectors[0].profile.name}</p>\r\n                                                                    </div>\r\n                                                                )}\r\n                                                                {inspectors.map((inspector, idx) => {\r\n                                                                    return (\r\n                                                                        <Avatar key={idx} className=\"custom-shadow ms-[-10px]\">\r\n                                                                            <AvatarImage\r\n                                                                                src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector?.profile?.image?.path}`}\r\n                                                                            />\r\n                                                                            <AvatarFallback id={inspector.profile.id.toString()}>\r\n                                                                                {getInitials(inspector.profile.name)}\r\n                                                                            </AvatarFallback>\r\n                                                                        </Avatar>\r\n                                                                    );\r\n                                                                })}\r\n\r\n                                                                {inspectors.length > 5 && (\r\n                                                                    <Avatar className=\"custom-shadow flex items-center justify-center ms-[-10px]\">\r\n                                                                        <AvatarImage src=\"\" />\r\n                                                                        <span className=\"absolute text-card-foreground text-[16px] font-semibold\">\r\n                                                                            +{inspectors.length - 5}\r\n                                                                        </span>\r\n                                                                        <AvatarFallback id={\"0\"}></AvatarFallback>\r\n                                                                    </Avatar>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </HoverCardTrigger>\r\n                                                        <HoverCardContent className=\"flex flex-col w-fit border-none gap-4 px-6 py-4 custom-shadow\">\r\n                                                            <div className=\"flex items-center justify-center gap-1\">\r\n                                                                <span className=\"material-symbols-outlined\">\r\n                                                                    person_search\r\n                                                                </span>\r\n                                                                <p className=\"text-lg font-semibold\">\r\n                                                                    {t(\"InspectorList\")}\r\n                                                                </p>\r\n                                                            </div>\r\n                                                            {inspectors.map((inspector, idx) => {\r\n                                                                return (\r\n                                                                    <div key={idx} className=\"flex items-center w-full py-2 gap-1 border-b-2 border-secondary\">\r\n                                                                        <Avatar className=\"custom-shadow ms-[-10px] me-2.5\">\r\n                                                                            <AvatarImage\r\n                                                                                src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector.profile.image?.path}`}\r\n                                                                            />\r\n                                                                            <AvatarFallback id={inspector.profile.id.toString()}>\r\n                                                                                {getInitials(inspector.profile.name)}\r\n                                                                            </AvatarFallback>\r\n                                                                        </Avatar>\r\n                                                                        <p className=\"text-lg\">{inspector.profile.name}</p>\r\n                                                                    </div>\r\n                                                                );\r\n                                                            })}\r\n                                                            <div className=\"flex items-center justify-between w-full text-muted-foreground\">\r\n                                                                <p className=\"text-lg font-semibold\">\r\n                                                                    {t(\"Total\")}\r\n                                                                </p>\r\n                                                                <p className=\"text-lg font-semibold\">\r\n                                                                    {inspectors.length}\r\n                                                                </p>\r\n                                                            </div>\r\n                                                        </HoverCardContent>\r\n                                                    </HoverCard>\r\n\r\n                                                    <CardFooter className=\"p-0 gap-0\">\r\n                                                        <div className=\"flex gap-2 items-center w-full\">\r\n                                                            <div className=\"flex gap-1 text-primary items-center\">\r\n                                                                <span className=\"material-symbols-outlined\">checklist</span>\r\n                                                                <p className=\"text-xl font-semibold\">{countItems}</p>\r\n                                                            </div>\r\n                                                            <div className=\"flex gap-1 text-orange items-center\">\r\n                                                                <span className=\"material-symbols-outlined\">close</span>\r\n                                                                <p className=\"text-xl font-semibold\">{countFails}</p>\r\n                                                            </div>\r\n                                                            <div className=\"flex gap-1 text-destructive items-center\">\r\n                                                                <span className=\"material-symbols-outlined\">\r\n                                                                    error\r\n                                                                </span>\r\n                                                                <p className=\"text-xl font-semibold\">{countDefects}</p>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </CardFooter>\r\n\r\n                                                </AlertDialogDescription>\r\n                                            </AlertDialogHeader>\r\n                                            <AlertDialogFooter>\r\n                                                <AlertDialogCancel onClick={() => handleCloseDialog()}>Cancel</AlertDialogCancel>\r\n                                                <AlertDialogAction\r\n                                                    className='bg-primary text-primary-foreground shadow hover:bg-primary/90 h-10 rounded-md px-4 text-lg font-bold'\r\n                                                    onClick={() => {\r\n                                                        exportData(patrol, patrolResults)\r\n                                                        handleCloseDialog()\r\n                                                        toast({\r\n                                                            variant: \"success\",\r\n                                                            title: a(\"ExportReportPatrolTitle\"),\r\n                                                            description: a(\"ExportReportPatrolDescription\"),\r\n                                                        });\r\n                                                    }}\r\n                                                >\r\n                                                    <span className=\"material-symbols-outlined text-2xl me-2\">\r\n                                                        ios_share\r\n                                                    </span>\r\n                                                    Export\r\n                                                </AlertDialogAction>\r\n                                            </AlertDialogFooter>\r\n                                        </AlertDialogContent>\r\n                                    </AlertDialog>\r\n                                ) :\r\n                                    patrol.status === \"on_going\" ? (\r\n                                        canFinish ? (\r\n                                            <Button\r\n                                                variant={variant}\r\n                                                onClick={handleOpenDialog}\r\n                                                disabled={disabled}\r\n                                            >\r\n                                                <span className=\"material-symbols-outlined\">\r\n                                                    {iconName}\r\n                                                </span>\r\n                                                {t(text)}\r\n                                            </Button>\r\n                                        ) : (\r\n                                            <Button\r\n                                                variant={lock ? \"secondary\" : variant}\r\n                                                disabled={disabled}\r\n                                                onClick={toggleLock}\r\n                                            >\r\n                                                <span className=\"material-symbols-outlined\">\r\n                                                    {lock ? \"lock_open\" : \"lock\"}\r\n                                                </span>\r\n                                                {lock ? t(\"Unlock\") : t(\"Lock\")}\r\n                                            </Button>\r\n                                        )\r\n                                    ) : (\r\n                                        <Button\r\n                                            variant={variant}\r\n                                            onClick={() => handleOpenDialog()}\r\n                                            disabled={disabled}\r\n                                            className='flex flex-row items-center gap-2'\r\n                                        >\r\n                                            <span className=\"material-symbols-outlined\">\r\n                                                {iconName}\r\n                                            </span>\r\n                                            {t(text)}\r\n                                        </Button>\r\n                                    )}\r\n                                {\r\n                                    patrol.status === \"scheduled\" &&\r\n                                        isAlertOpen ? (\r\n                                        <AlertCustom\r\n                                            title={a(\"PatrolStartConfirmTitle\")}\r\n                                            description={a(\"PatrolStartConfirmDescription\")}\r\n                                            primaryButtonText={t(\"Confirm\")}\r\n                                            primaryIcon=\"check\"\r\n                                            secondaryButtonText={t(\"Cancel\")}\r\n                                            backResult={(result) => {\r\n                                                if (result) {\r\n                                                    handleStartPatrol();\r\n                                                }\r\n                                                handleCloseDialog()\r\n                                            }}\r\n                                        />\r\n                                    ) :\r\n                                        patrol.status === \"on_going\" &&\r\n                                            isAlertOpen ? (\r\n                                            <AlertCustom\r\n                                                title={a(\"PatrolFinishConfirmTitle\")}\r\n                                                description={a(\"PatrolFinishConfirmDescription\")}\r\n                                                primaryButtonText={t(\"Confirm\")}\r\n                                                primaryIcon=\"check\"\r\n                                                secondaryButtonText={t(\"Cancel\")}\r\n                                                backResult={(result) => {\r\n                                                    if (result) {\r\n                                                        handleFinishPatrol();\r\n                                                    }\r\n                                                    handleCloseDialog()\r\n                                                }}\r\n                                            />\r\n                                        ) : null\r\n                                }\r\n                            </div>\r\n                        );\r\n                    })()}\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                patrol.patrolChecklists.map((pc: IPatrolChecklist) => (\r\n                    <div>\r\n                        {user?.profile.name === pc.inspector.profile.name ? (\r\n                            <PatrolChecklist\r\n                                handleResult={handleResult}\r\n                                results={results}\r\n                                patrolChecklist={pc}\r\n                                disabled={\r\n                                    patrol.status === \"on_going\" && !lock ? false : true\r\n                                }\r\n                                patrolResult={patrolResults}\r\n                                user={user}\r\n                                response={(defect: IDefect) => {\r\n                                    fetchRealtimeData(defect, \"create\");\r\n                                }}\r\n                            />\r\n                        ) : (\r\n                            <div></div>\r\n                        )}\r\n                    </div>\r\n                ))\r\n            }\r\n        </div >\r\n    )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol\\[id]\\layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'usePatrol' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { PatrolProvider, usePatrol } from '@/context/patrol-context';\r\n\r\nexport default function PatrolLayout({\r\n    children,\r\n}: Readonly<{\r\n    children: React.ReactNode;\r\n}>) {\r\n\r\n    return (\r\n        <PatrolProvider>\r\n            <div className=\"flex flex-col gap-4 px-6 py-4\">\r\n                {children}\r\n            </div>\r\n        </PatrolProvider>\r\n    );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol\\[id]\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol\\[id]\\report\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol\\page.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DayPickerDateRange' is defined but never used. Allowed unused vars must match /^_/u.","line":56,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\profile\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\profile\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\profile\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setNameError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":44,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setAddressError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":48,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":41},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4639,4660],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\nimport { Button, buttonVariants } from '@/components/ui/button';\r\nimport BadgeCustom from '@/components/badge-custom';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { IUser } from '@/app/type';\r\nimport { fetchData, getInitials } from '@/lib/utils';\r\nimport Loading from '@/components/loading';\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport {\r\n    AlertDialog,\r\n    AlertDialogTrigger,\r\n    AlertDialogContent,\r\n    AlertDialogHeader,\r\n    AlertDialogTitle,\r\n    AlertDialogDescription,\r\n    AlertDialogCancel,\r\n    AlertDialogAction,\r\n    AlertDialogFooter,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { toast } from '@/hooks/use-toast';\r\nimport { AlertCustom } from '@/components/alert-custom';\r\nimport Map from '@/components/map';\r\n\r\ninterface IFormProfile {\r\n    name?: string,\r\n    email?: string,\r\n    age?: number,\r\n    tel?: string,\r\n    address?: string,\r\n    image?: string,\r\n    username?: string,\r\n    password?: string,\r\n    currentPassword?: string,\r\n    newPassword?: string,\r\n    confirmPassword?: string,\r\n}\r\n\r\nexport default function page() {\r\n    const [nameError, setNameError] = useState<string | null>(null);\r\n    const [emailError, setEmailError] = useState<string | null>(null);\r\n    const [ageError, setAgeError] = useState<string | null>(null);\r\n    const [telError, setTelError] = useState<string | null>(null);\r\n    const [addressError, setAddressError] = useState<string | null>(null);\r\n    const [currentPassError, setCurrentPassError] = useState<string | null>(null);\r\n    const [newPassError, setNewPassError] = useState<string | null>(null);\r\n    const [confirmPassError, setConfirmPassError] = useState<string | null>(null);\r\n    const [isProfileDialogOpen, setIsProfileDialogOpen] = useState(false);\r\n    const [isProfileImageDialogOpen, setIsProfileImageDialogOpen] = useState(false);\r\n    const [mounted, setMounted] = useState(false);\r\n    const [pendingAction, setPendingAction] = useState<(() => void) | null>(null);\r\n    const [imageProfile, setImageProfile] = useState<File | null>(null);\r\n    const [userData, setUserData] = useState<IUser>(null);\r\n    const [formData, setFormData] = useState<IFormProfile>();\r\n    const router = useRouter();\r\n    const locale = useLocale();\r\n\r\n    useEffect(() => {\r\n        getUserData();\r\n        setMounted(true)\r\n    }, [])\r\n\r\n    const z = useTranslations(\"Zone\");\r\n    const a = useTranslations(\"Alert\");\r\n    const t = useTranslations(\"General\");\r\n\r\n    const getUserData = async () => {\r\n        try {\r\n            const data = await fetchData(\"get\", \"/user?profile=true&image=true&password=true\", true);\r\n            setUserData(data);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch user data: \", error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    if (!mounted || !userData) {\r\n        return <Loading />;\r\n    }\r\n\r\n    const handleOpenDialog = (dialogType: String) => {\r\n        if (dialogType === \"SaveProfileDialog\") {\r\n            setIsProfileDialogOpen(true);\r\n        } else if (dialogType === \"SaveProfileImageDialog\") {\r\n            setIsProfileImageDialogOpen(true);\r\n        }\r\n    };\r\n\r\n    const handleDialogResult = (result: boolean) => {\r\n        setIsProfileDialogOpen(false);\r\n        setIsProfileImageDialogOpen(false);\r\n        if (result && pendingAction) {\r\n            pendingAction(); // Execute the pending action\r\n            setPendingAction(null); // Clear the pending action\r\n        }\r\n    };\r\n\r\n    const handleSaveProfile = () => {\r\n        setPendingAction(() => () => handleUpdateUserData());\r\n        handleOpenDialog(\"SaveProfileDialog\");\r\n    };\r\n\r\n    const handleSaveProfileImage = () => {\r\n        setPendingAction(() => () => handleUpdateImageProfile());\r\n        handleOpenDialog(\"SaveProfileImageDialog\");\r\n        setImageProfile(null)\r\n    };\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const { name, value } = e.target;\r\n        setFormData((prev) => {\r\n            const updatedFormData = { ...prev };\r\n\r\n            if (value === \"\") {\r\n                delete updatedFormData[name];\r\n            } else {\r\n                updatedFormData[name] = value;\r\n            }\r\n\r\n            return updatedFormData;\r\n        });\r\n    };\r\n\r\n    const handleUpdateUserData = async () => {\r\n        console.log(formData)\r\n        let showErrorToast = false;\r\n        setCurrentPassError(null)\r\n        setNewPassError(null)\r\n        setConfirmPassError(null)\r\n        setEmailError(null)\r\n        setAgeError(null)\r\n        setTelError(null)\r\n        if (!formData || Object.keys(formData).length === 0) {\r\n            toast({\r\n                variant: \"default\",\r\n                title: a(\"ProfileNoChangeTitle\"),\r\n                description: a(\"ProfileNoChangeDescription\"),\r\n            });\r\n            return;\r\n        }\r\n\r\n        const userForm = new FormData();\r\n\r\n        if (formData?.name && formData?.name !== userData.profile.name) {\r\n            userForm.append(\"name\", formData.name);\r\n        }\r\n        if (formData?.email && formData?.email !== userData.email) {\r\n            if (formData?.email && formData.email.trim() && /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(formData.email)) {\r\n                userForm.append(\"email\", formData.email);\r\n            }\r\n            else {\r\n                setEmailError(a(\"ProfileEmailInvalid\"));\r\n                showErrorToast = true;\r\n            }\r\n        }\r\n        if (formData?.age && formData?.age !== userData.profile.age) {\r\n            if (formData?.age && !isNaN(Number(formData.age)) && Number(formData.age) <= 120) {\r\n                userForm.append(\"age\", formData.age.toString());\r\n            } else {\r\n                setAgeError(a(\"ProfileAgeInvalid\")); \r\n                showErrorToast = true;\r\n            }\r\n        }\r\n\r\n        if (formData?.tel && formData?.tel !== userData.profile.tel) {\r\n            if (formData?.tel?.trim() && /^[0-9]{10}$/.test(formData.tel.trim())) {\r\n                userForm.append(\"tel\", formData.tel);\r\n            } else {\r\n                setTelError(a(\"ProfileTelInvalid\"));\r\n                showErrorToast = true;\r\n            }\r\n        }\r\n        if (formData?.address && formData?.address !== userData.profile.address) {\r\n            userForm.append(\"address\", formData.address);\r\n        }\r\n\r\n        if (formData.currentPassword || formData.newPassword || formData.confirmPassword) {\r\n            if (!formData.currentPassword) {\r\n                setCurrentPassError(a(\"ProfileCurrentPassRequire\"));\r\n                showErrorToast = true;\r\n            }\r\n            if (!formData.newPassword) {\r\n                setNewPassError(a(\"ProfileNewPassRequire\"));\r\n                showErrorToast = true;\r\n            }\r\n            if (!formData.confirmPassword) {\r\n                setConfirmPassError(a(\"ProfileConfirmPassRequire\"));\r\n                showErrorToast = true;\r\n            }\r\n\r\n            else {\r\n                const passwordMatch = formData.currentPassword === userData.password;\r\n                if (passwordMatch) {\r\n                    if (formData.newPassword === formData.confirmPassword) {\r\n                        userForm.append(\"password\", formData.newPassword);\r\n                    }\r\n                    else {\r\n                        setConfirmPassError(a(\"ProfileConfirmPassInvalid\"));\r\n                        showErrorToast = true;\r\n                    }\r\n                } else {\r\n                    setCurrentPassError(a(\"ProfileCurrentPassInvalid\"));\r\n                    showErrorToast = true;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        try {\r\n            if (!showErrorToast) {\r\n                const response = await fetchData(\"put\", `/user/${userData.profile.userId}`, true, userForm)\r\n                if (response) {\r\n                    setUserData(response)\r\n                    toast({\r\n                        variant: \"success\",\r\n                        title: a(\"ProfileUpdateSuccessTitle\"),\r\n                        description: a(\"ProfileUpdateSuccessDescription\"),\r\n                    });\r\n                }\r\n            } else {\r\n                toast({\r\n                    variant: \"error\",\r\n                    title: a(\"ProfileUpdateErrorTitle\"),\r\n                    description: a(\"ProfileUpdateErrorDescription\"),\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error updating profile:\", error);\r\n            toast({\r\n                variant: \"error\",\r\n                title: a(\"ProfileUpdateErrorTitle\"),\r\n                description: a(\"ProfileUpdateErrorDescription\"),\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleUpdateImageProfile = async () => {\r\n        const imageForm = new FormData()\r\n        imageForm.append(\"imageProfile\", imageProfile)\r\n        try {\r\n            if (imageProfile) {\r\n                await fetchData(\"put\", \"/profile\", true, imageForm, true);\r\n            }\r\n            toast({\r\n                variant: \"success\",\r\n                title: a(\"ProfileImageUpdateSuccessTitle\"),\r\n                description: a(\"ProfileImageUpdateSuccessDescription\"),\r\n            });\r\n            getUserData()\r\n        } catch (error) {\r\n            console.error(\"Error updating image profile:\", error);\r\n            toast({\r\n                variant: \"error\",\r\n                title: a(\"ProfileImageUpdateErrorTitle\"),\r\n                description: a(\"ProfileImageUpdateErrorDescription\"),\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleButtonClick = (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        document.getElementById(\"file-input\")?.click();\r\n    };\r\n\r\n    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files && event.target.files.length > 0) {\r\n            setImageProfile(event.target.files[0]); // Store the new image file in state\r\n        } else {\r\n            setImageProfile(null); // Reset the image if no file is selected\r\n        }\r\n    };\r\n\r\n    const handCancelImageProfile = () => {\r\n        setImageProfile(null); // Reset the image if no file is selected\r\n    }\r\n\r\n    return (\r\n        <div className='flex flex-col py-4 px-6 gap-4'>\r\n            <div className='text-2xl font-bold'>\r\n                {t(\"ViewProfile\")}\r\n            </div>\r\n\r\n            {/* first block */}\r\n            <div className='flex justify-between px-6 py-4 bg-card rounded-md custom-shadow'>\r\n                <div className='flex flex-row'>\r\n                    {userData.profile ? (\r\n                        <Avatar className='h-32 w-32 mr-6'>\r\n                            <AvatarImage src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${userData.profile.image?.path}`} />\r\n                            <AvatarFallback id={userData.id?.toString()}>\r\n                                <p className='text-4xl'>\r\n                                    {getInitials(userData.profile.name)}\r\n                                </p>\r\n                            </AvatarFallback>\r\n                        </Avatar>\r\n                    ) : (\r\n                        <Skeleton className=\"h-12 w-12 rounded-full\" />\r\n                    )}\r\n\r\n                    <div className='flex flex-col justify-center items-start'>\r\n                        <div className='text-2xl font-bold py-4'>\r\n                            {t(\"WelcomeBack\")}, {userData.profile.name}\r\n                        </div>\r\n\r\n                        <AlertDialog>\r\n                            <AlertDialogTrigger>\r\n                                <Button variant='outline' size='default'>\r\n                                    {t(\"UploadNewPhoto\")}\r\n                                </Button>\r\n                            </AlertDialogTrigger>\r\n\r\n                            <AlertDialogContent className='flex flex-col px-6 py-4 w-[400px] h-fit' >\r\n                                <AlertDialogHeader>\r\n                                    <AlertDialogTitle className=\"text-2xl font-semibold\">\r\n                                        {t(\"ProfileImage\")}\r\n                                    </AlertDialogTitle>\r\n                                    <AlertDialogDescription className=\"flex items-start justify-start text-base text-input\">\r\n                                        {t(\"ProfileImageDescription\")}\r\n                                    </AlertDialogDescription>\r\n                                </AlertDialogHeader>\r\n\r\n\r\n                                <div className='flex gap-2'>\r\n                                    <div>\r\n                                        <input name='image' id=\"file-input\" placeholder={null} type=\"file\" className='hidden' onChange={handleFileChange} />\r\n                                        <Button className='flex justify-center items-center h-[40px] w-[40px]' variant='primary' onClick={handleButtonClick}>\r\n                                            <span className=\"material-symbols-outlined text-2xl\">\r\n                                                download\r\n                                            </span>\r\n                                        </Button>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                                <div className='flex justify-center items-center mb-2'>\r\n                                    {imageProfile ? (\r\n                                        <Avatar className='h-80 w-80'>\r\n                                            <AvatarImage src={URL.createObjectURL(imageProfile)} />\r\n                                            <AvatarFallback id={userData.id.toString()}>\r\n                                                <p className='text-6xl'>\r\n                                                    {getInitials(userData.profile.name)}\r\n                                                </p>\r\n                                            </AvatarFallback>\r\n                                        </Avatar>\r\n                                    ) : (\r\n                                        <Avatar className='h-80 w-80'>\r\n                                            <AvatarImage src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${userData.profile.image?.path}`} />\r\n                                            <AvatarFallback id={userData.id.toString()}>\r\n                                                <p className='text-6xl'>\r\n                                                    {getInitials(userData.profile.name)}\r\n                                                </p>\r\n                                            </AvatarFallback>\r\n                                        </Avatar>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <AlertDialogFooter>\r\n                                    <div className=\"flex items-end justify-end gap-2\">\r\n                                        <AlertDialogCancel onClick={handCancelImageProfile}>\r\n                                            {t(\"Cancel\")}\r\n                                        </AlertDialogCancel>\r\n                                        <AlertDialogAction\r\n                                            className={`bg-primary hover:bg-primary/70 \r\n                ${!imageProfile ? \"opacity-50 cursor-not-allowed\" : \"\"}`}\r\n                                            onClick={handleSaveProfileImage}\r\n                                            disabled={!imageProfile ? true : false}\r\n                                        >\r\n                                            <span className=\"material-symbols-outlined text-2xl\">\r\n                                                save\r\n                                            </span>\r\n                                            {t(\"Save\")}\r\n                                        </AlertDialogAction>\r\n                                    </div>\r\n                                </AlertDialogFooter>\r\n                            </AlertDialogContent>\r\n                        </AlertDialog>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='flex flex-col items-end justify-between'>\r\n                    <BadgeCustom\r\n                        variant={userData.role === \"supervisor\" ? \"yellow\" : userData.role === \"inspector\" ? \"red\" : \"blue\"}\r\n                        showIcon={true}\r\n                        shape='square'\r\n                        iconName={userData.role === \"supervisor\" ? \"engineering\" : userData.role === \"inspector\" ? \"person_search\" : \"manage_accounts\"}\r\n                    >\r\n                        {t(userData.role)}\r\n                    </BadgeCustom>\r\n\r\n                    {userData.zone ?\r\n                        <AlertDialog>\r\n                            <AlertDialogTrigger\r\n                                className=\"flex justify-center items-center min-w-72 px-6 py-4 bg-secondary gap-2 rounded-md\"\r\n                            >\r\n                                <div className='flex flex-row items-center gap-1 text-muted-foreground'>\r\n                                    <span className=\"material-symbols-outlined text-[22px] pr-1\">\r\n                                        location_on\r\n                                    </span>\r\n                                    <p className='text-base font-semibold'>\r\n                                        {t(\"ZoneText\")}\r\n                                    </p>\r\n                                </div>\r\n                                <p>\r\n                                    {z(userData.zone.name)}\r\n                                </p>\r\n                            </AlertDialogTrigger>\r\n\r\n                            <AlertDialogContent className=\"w-full sm:w-[40%] md:w-[50%] lg:w-[100%] max-w-[1200px] rounded-md px-6 py-4\">\r\n                                <div className='flex flex-col gap-1'>\r\n                                    <div className=\"text-muted-foreground flex items-center gap-1\">\r\n                                        <span className=\"material-symbols-outlined\">\r\n                                            location_on\r\n                                        </span>\r\n                                        <p>{t('Zone')}</p>\r\n                                    </div>\r\n                                    <div className=\" flex justify-center bg-secondary rounded-lg py-4\">\r\n                                        <Map\r\n                                            disable={true}\r\n                                            initialSelectedZones={[userData.zone.id]}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <AlertDialogFooter>\r\n                                    <AlertDialogAction className={buttonVariants({ variant: \"secondary\", size: \"lg\" })}>\r\n                                        {t('Close')}\r\n                                    </AlertDialogAction>\r\n                                </AlertDialogFooter>\r\n                            </AlertDialogContent>\r\n                        </AlertDialog>\r\n                        :\r\n                        null}\r\n                </div>\r\n            </div>\r\n\r\n            {/* second block */}\r\n            <div className='flex flex-col bg-card py-4 px-6 rounded-md custom-shadow'>\r\n                <div className='flex flex-row justify-between'>\r\n                    {/* edit profile */}\r\n                    <div className='flex flex-col w-full'>\r\n                        <div className='text-2xl font-bold mb-4'>\r\n                            {t(\"EditProfile\")}\r\n                        </div>\r\n\r\n                        <div className='w-[415px] mb-4'>\r\n                            <p className='text-base font-semibold text-muted-foreground mb-1'>{t(\"Name\")}</p>\r\n                            <Input name=\"name\" onChange={handleInputChange} placeholder={userData.profile.name ? userData.profile.name : \"-\"} className='text-xl font-normal bg-secondary'></Input>\r\n                            {nameError && (\r\n                                <p className=\"ttext-sm font-light text-destructive italic mt-1\">{nameError}</p>\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className='w-[415px] mb-4'>\r\n                            <p className='text-base font-semibold text-muted-foreground mb-1'>{t(\"Email\")}</p>\r\n                            <Input name=\"email\" onChange={handleInputChange} placeholder={userData.email ? userData.email : \"-\"} className='text-xl font-normal bg-secondary'></Input>\r\n                            {emailError && (\r\n                                <p className=\"ttext-sm font-light text-destructive italic mt-1\">{emailError}</p>\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className='w-[415px] mb-4'>\r\n                            <p className='text-base font-semibold text-muted-foreground mb-1'>{t(\"Age\")}</p>\r\n                            <Input name=\"age\" onChange={handleInputChange} placeholder={String(userData.profile.age) ? String(userData.profile.age) : \"-\"} className='text-xl font-normal bg-secondary'></Input>\r\n                            {ageError && (\r\n                                <p className=\"ttext-sm font-light text-destructive italic mt-1\">{ageError}</p>\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className='w-[415px] mb-4'>\r\n                            <p className='text-base font-semibold text-muted-foreground mb-1'>{t(\"Tel\")}</p>\r\n                            <Input name=\"tel\" onChange={handleInputChange} placeholder={userData.profile.tel ? userData.profile.tel : \"-\"} className='text-xl font-normal bg-secondary'></Input>\r\n                            {telError && (\r\n                                <p className=\"ttext-sm font-light text-destructive italic mt-1\">{telError}</p>\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className='w-[415px] mb-4'>\r\n                            <p className='text-base font-semibold text-muted-foreground mb-1'>{t(\"Address\")}</p>\r\n                            <Textarea name=\"address\" onChange={handleInputChange} placeholder={userData.profile.address ? userData.profile.address : \"-\"} className='text-xl font-normal bg-secondary h-56'></Textarea>\r\n                            {addressError && (\r\n                                <p className=\"ttext-sm font-light text-destructive italic mt-1\">{addressError}</p>\r\n                            )}\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    {/* manage account */}\r\n                    <div className='flex flex-col w-full'>\r\n                        <div className='text-2xl font-bold mb-4'>\r\n                            {t(\"ManageAccount\")}\r\n                        </div>\r\n\r\n                        <div className='w-[415px] mb-4'>\r\n                            <p className='text-base font-semibold text-muted-foreground mb-1'>{t(\"Username\")}</p>\r\n                            <Input name=\"username\" onChange={handleInputChange} placeholder={userData.username ? userData.username : \"-\"} className='text-xl font-normal bg-secondary' readOnly></Input>\r\n                        </div>\r\n\r\n                        <div className='w-[415px] mb-4'>\r\n                            <p className='text-base font-semibold text-muted-foreground mb-1'>{t(\"CurrentPassword\")}</p>\r\n                            <Input type='password' name=\"currentPassword\" placeholder='' className='text-xl font-normal bg-secondary' onChange={handleInputChange}></Input>\r\n                            {currentPassError && (\r\n                                <p className=\"ttext-sm font-light text-destructive italic mt-1\">{currentPassError}</p>\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className='w-[415px] mb-4'>\r\n                            <p className='text-base font-semibold text-muted-foreground mb-1'>{t(\"NewPassword\")}</p>\r\n                            <Input type='password' name=\"newPassword\" placeholder='' className='text-xl font-normal bg-secondary' onChange={handleInputChange}></Input>\r\n                            {newPassError && (\r\n                                <p className=\"ttext-sm font-light text-destructive italic mt-1\">{newPassError}</p>\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className='w-[415px] mb-4'>\r\n                            <p className='text-base font-semibold text-muted-foreground mb-1'>{t(\"ConfirmPassword\")}</p>\r\n                            <Input type='password' name=\"confirmPassword\" placeholder='' className='text-xl font-normal bg-secondary' onChange={handleInputChange}></Input>\r\n                            {confirmPassError && (\r\n                                <p className=\"ttext-sm font-light text-destructive italic mt-1\">{confirmPassError}</p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Button Back And Save    */}\r\n                <div className='flex justify-end items-end gap-2'>\r\n                    <Button variant='secondary' size='lg' onClick={() => router.push(`/${locale}/`)}>{t(\"Back\")}</Button>\r\n                    <Button variant='primary' size='lg' onClick={handleSaveProfile}>\r\n                        <span className=\"material-symbols-outlined text-2xl\">\r\n                            save\r\n                        </span>{t(\"Save\")}\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            {isProfileDialogOpen && (\r\n                <AlertCustom\r\n                    title={a(\"ProfileUpdateConfirmTitle\")}\r\n                    description={a(\"ProfileUpdateConfirmDescription\")}\r\n                    primaryButtonText={t(\"Confirm\")}\r\n                    primaryIcon=\"check\"\r\n                    secondaryButtonText={t(\"Cancel\")}\r\n                    backResult={handleDialogResult}\r\n                ></AlertCustom>\r\n            )}\r\n            {isProfileImageDialogOpen && (\r\n                <AlertCustom\r\n                    title={a(\"ProfileImageUpdateConfirmTitle\")}\r\n                    description={a(\"ProfileImageUpdateConfirmDescription\")}\r\n                    primaryButtonText={t(\"Confirm\")}\r\n                    primaryIcon=\"check\"\r\n                    secondaryButtonText={t(\"Cancel\")}\r\n                    backResult={handleDialogResult}\r\n                ></AlertCustom>\r\n            )}\r\n        </div >\r\n    )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\type.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'timeStamp' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useTranslations' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from \"zod\"\r\nimport { timeStamp } from 'console';\r\nimport { useTranslations } from \"next-intl\";\r\n\r\nexport type patrolStatus = \"pending\" | \"scheduled\" | \"on_going\" | \"completed\"\r\nexport type role = \"admin\" | \"inspector\" | \"supervisor\"\r\nexport type defectStatus = \"reported\" | \"completed\" | \"pending_inspection\" | \"in_progress\" | \"resolved\";\r\nexport type itemType = \"safety\" | \"environment\" | 'maintenance';\r\nexport type notificationType = \"information\" | \"request\" | 'system';\r\n\r\nexport interface IUser {\r\n    id: number;\r\n    username?: string;\r\n    email?: string;\r\n    password?: any;\r\n    role: role;\r\n    department?: string | null;\r\n    createdAt?: string;\r\n    active?: boolean;\r\n\r\n    presets?: IPreset[];\r\n    checklists?: IChecklist[]\r\n    comments?: IComment[]\r\n    profile: IProfile;\r\n    notifications?: INotification[]\r\n    defects?: IDefect[]\r\n    zone?: IZone;\r\n    patrolChecklists?: IPatrolChecklist[]\r\n    images?: IImage[]\r\n}\r\n\r\nexport interface IDefect {\r\n    title: string;\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    type: itemType;\r\n    status: defectStatus;\r\n    startTime: string;\r\n    endTime: string;\r\n    userId?: number;\r\n    patrolResultId?: number;\r\n    timeStamp: Date;\r\n    user?: IUser;\r\n    patrolResult: IPatrolResult;\r\n    images: IDefectIImage[];\r\n}\r\n\r\nexport interface INotification {\r\n    id: number\r\n    message: string\r\n    read: boolean,\r\n    timestamp: string\r\n    type: notificationType\r\n    url?: string\r\n    userId: number\r\n\r\n    user?: IUser\r\n}\r\n\r\nexport interface IProfile {\r\n    id: number;\r\n    name: string;\r\n    age?: number;\r\n    tel?: string;\r\n    address?: string;\r\n    userId: number\r\n    imageId: number | null\r\n\r\n    image?: IImage | null;\r\n    user?: IUser;\r\n}\r\n\r\n\r\nexport interface IPatrol {\r\n    id: number;\r\n    date: string;\r\n    startTime: string | null;\r\n    endTime: string | null;\r\n    duration: string | null;\r\n    status: patrolStatus;\r\n    presetId: number;\r\n\r\n    patrolChecklists: IPatrolChecklist[];\r\n    preset: IPreset;\r\n    results: IPatrolResult[];\r\n    itemCounts: number;\r\n    inspectors?: IUser[]\r\n}\r\n\r\nexport interface IPatrolChecklist {\r\n    id?: number;\r\n    patrolId?: number;\r\n    checklistId: number;\r\n    userId: number;\r\n\r\n    patrol?: IPatrol;\r\n    checklist?: IChecklist;\r\n    inspector?: IUser;\r\n}\r\n\r\nexport interface IPreset {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n    version: number;\r\n    latest: boolean;\r\n    updatedAt: string;\r\n    updatedBy: number;\r\n\r\n    user?: IUser;\r\n    presetChecklists?: IPresetChecklist[];\r\n    patrols?: IPatrol[];\r\n    zones?: IZone[];\r\n}\r\n\r\nexport interface IPresetChecklist {\r\n    presetId: number;\r\n    checklistId: number;\r\n\r\n    checklist: IChecklist;\r\n    preset: IPreset;\r\n}\r\n\r\nexport interface IChecklist {\r\n    id: number;\r\n    title: string;\r\n    version: number;\r\n    latest: boolean;\r\n    updatedAt: string;\r\n    updatedBy: number;\r\n    \r\n    patrols?: IPatrolChecklist[];\r\n    user: IUser;\r\n    presetChecklists?: IPresetChecklist[];\r\n    items: IItem[];\r\n}\r\n\r\nexport interface IPatrolResult {\r\n    inspectorId: number\r\n    id?: number;\r\n    status: boolean;\r\n    itemId: number;\r\n    zoneId: number;\r\n    patrolId?: number;\r\n\r\n    comments?: IComment[];\r\n    defects?: IDefect[]\r\n    itemZone?: IItemZone;\r\n    patrol?: IPatrol;\r\n}\r\n\r\nexport interface IItem {\r\n    id: number;\r\n    name: string;\r\n    type: itemType;\r\n    checklistId: number;\r\n\r\n    itemZones: IItemZone[];\r\n    checklist?: IChecklist\r\n}\r\n\r\nexport interface IZone {\r\n    id: number;\r\n    name: string;\r\n    locationId: number;\r\n    userId: number;\r\n    pathData?: string;\r\n    text?: {\r\n        x: number;\r\n        y: number;\r\n        fontSize: number;\r\n        rotation: number;\r\n    } | null\r\n    supervisor?: IUser;\r\n}\r\n\r\n\r\nexport interface IItemZone {\r\n    itemId: number;\r\n    zoneId: number;\r\n\r\n    results?: IPatrolResult;\r\n    item: IItem;\r\n    zone: IZone;\r\n}\r\n\r\nexport interface ILocation {\r\n    id: number\r\n    name: string\r\n\r\n    zones: IZone[]\r\n}\r\n\r\nexport interface IComment {\r\n    id: number;\r\n    message: string;\r\n    timestamp: string;\r\n    status: boolean;\r\n    userId: number;\r\n    patrolResultId: number;\r\n\r\n    user: IUser;\r\n    patrolResult: IPatrolResult;\r\n}\r\n\r\n\r\nexport interface IImage {\r\n    id: number;\r\n    path: string;\r\n    timestamp?: string;\r\n    updateBy?: number;\r\n\r\n    user?: IUser;\r\n    profiles: IProfile[];\r\n    defects: IDefectIImage[];\r\n}\r\n\r\nexport interface IDefectIImage {\r\n    defectId?: number\r\n    imageId?: number\r\n    image: IImage\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// filter \r\n\r\nexport interface FilterPatrol {\r\n    presetTitle: string | null;\r\n    patrolStatus: string[];\r\n    dateRange: { start: Date | undefined; end: Date | undefined };\r\n}\r\n\r\nexport interface FilterDefect {\r\n    defectStatus: string | null;\r\n    defectType: string[];\r\n    dateRange: { start: Date | undefined; end: Date | undefined };\r\n}\r\nexport interface FilterComment {\r\n    commentStatus: string | null;\r\n    dateRange: { start: Date | undefined; end: Date | undefined };\r\n}\r\n\r\n\r\nexport const LoginSchema = z.object({\r\n    username: z.string().min(1, { message: \"LoginUsernameRequire\" }),\r\n    password: z.string().min(1, { message: \"LoginPasswordRequire\" }),\r\n    rememberMe: z.boolean().optional()\r\n})\r\n\r\nexport interface IToast {\r\n    variant: \"default\" | \"error\" | \"success\"; \r\n    title: string;\r\n    description: string;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\admin-sidebar.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1538,1572],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\r\nimport {\r\n    SidebarProvider,\r\n    Sidebar,\r\n    SidebarContent,\r\n    SidebarGroup,\r\n    SidebarGroupContent,\r\n    SidebarGroupLabel,\r\n    SidebarMenu,\r\n    SidebarMenuButton,\r\n    SidebarMenuItem,\r\n} from \"@/components/ui/sidebar\";\r\nimport { usePathname, useRouter } from 'next/navigation'\r\nimport { useLocale } from 'next-intl'\r\nimport lightLogo from \"@/public/assets/img/system_logo_light.png\"\r\nimport darkLogo from \"@/public/assets/img/system_logo_dark.png\"\r\nimport Image from 'next/image'\r\nimport { useTheme } from 'next-themes'\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport { menuList } from \"@/constants/menu\";\r\n\r\nexport function AdminSidebar() {\r\n    const locale = useLocale()\r\n    const router = useRouter()\r\n    const pathname = usePathname();\r\n    const { resolvedTheme } = useTheme()\r\n    const [isExpanded, setIsExpanded] = useState(false);\r\n    const [mounted, setMounted] = useState(false);\r\n    const s = useTranslations(\"Sidebar\");\r\n    const pathAfterLang = pathname.replace(/^\\/(en|th)\\/admin/, \"\");\r\n\r\n    useEffect(() => {\r\n        setMounted(true);\r\n    }, []);\r\n    if (!mounted) {\r\n        return null;\r\n    }\r\n\r\n    const toggleSidebar = () => {\r\n        setIsExpanded((prev) => !prev);\r\n    };\r\n\r\n    const isActive = (menu: string) => {\r\n        const menuPath = `/${menu.toLocaleLowerCase()}`\r\n        return pathAfterLang === menuPath || pathAfterLang.startsWith(menuPath);\r\n    };\r\n\r\n    console.log(\"path\", pathAfterLang)\r\n\r\n    return (\r\n        <SidebarProvider className={`sticky transition-all duration-300 ${isExpanded ? \"w-[240px]\" : \"w-[70px] pointer-events-none\"}`}>\r\n            <Sidebar className={`w-[240px] border-none ${isExpanded ? \"w-[240px]\" : \"w-[70px] \"}`}>\r\n                <SidebarContent className=\"p-[8px] pt-[8px] bg-card overflow-x-hidden\">\r\n                    <SidebarGroup className=\"p-0\">\r\n                        <SidebarGroupLabel className=\"mb-[16px]\">\r\n                            <div className=\"flex items-center space-x-[24px] mt-[16px] transition-all duration-300\">\r\n                                {isExpanded && (\r\n                                    <Image\r\n                                        className=\"flex items-center cursor-pointer\"\r\n                                        src={resolvedTheme === 'dark' ? darkLogo : lightLogo}\r\n                                        alt=\"Logo\"\r\n                                        width={140}\r\n                                        height={35}\r\n                                        priority\r\n                                        onClick={() => router.push(`/${locale}`)}\r\n                                    />\r\n                                )}\r\n                                <Button variant=\"ghost\" className=\"size-[45px] text-muted-foreground transition-all duration-300 ms-[-4px] pointer-events-auto\" onClick={toggleSidebar}>\r\n                                    <span className=\"material-symbols-outlined text-10\">menu</span>\r\n                                </Button>\r\n                            </div>\r\n                        </SidebarGroupLabel>\r\n                        <SidebarGroupContent className=\"p-0 mt-[16px]\">\r\n                            <SidebarMenu>\r\n                                {menuList.map((item) => (\r\n                                    <SidebarMenuItem key={item.text}>\r\n                                        <SidebarMenuButton asChild>\r\n                                            <div onClick={() => router.push(`/${locale}${item.link}`)} className={`w-[224px] h-[50px] transition-all pointer-events-auto duration-300 text-muted-foreground hover:bg-accent-gradient hover:text-secondary cursor-pointer ${isExpanded ? \"justify-start\" : \"justify-center\"} ${isActive(item.text) ? \"bg-accent-gradient text-secondary\" : \"\"}`}>\r\n                                                <span className=\"material-symbols-outlined\">{item.icon}</span>\r\n                                                {isExpanded && (\r\n                                                    <span className=\"text-lg w-auto\">{s(item.text)}</span>\r\n                                                )}\r\n                                            </div>\r\n                                        </SidebarMenuButton>\r\n                                    </SidebarMenuItem>\r\n                                ))}\r\n                            </SidebarMenu>\r\n                        </SidebarGroupContent>\r\n                    </SidebarGroup>\r\n                </SidebarContent>\r\n            </Sidebar>\r\n        </SidebarProvider>\r\n    )\r\n}\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\alert-custom.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\alert-defect.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tree' is defined but never used. Allowed unused vars must match /^_/u.","line":35,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":14},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":76,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":76,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2322,2356],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":298,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":298,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9481,9531],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9537,9576],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { IDefect } from '@/app/type'\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport {\r\n    AlertDialog,\r\n    AlertDialogTrigger,\r\n    AlertDialogContent,\r\n    AlertDialogHeader,\r\n    AlertDialogTitle,\r\n    AlertDialogDescription,\r\n    AlertDialogCancel,\r\n    AlertDialogAction,\r\n    AlertDialogFooter,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport {\r\n    IItem,\r\n    IItemZone,\r\n    IPatrolResult,\r\n} from \"@/app/type\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { fetchData } from \"@/lib/utils\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport {\r\n    Tooltip,\r\n    TooltipContent,\r\n    TooltipProvider,\r\n    TooltipTrigger,\r\n} from \"./ui/tooltip\";\r\nimport { Skeleton } from './ui/skeleton';\r\nimport { toast } from '@/hooks/use-toast';\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport { tree } from 'next/dist/build/templates/app-page';\r\n\r\ninterface AlertDefectProps {\r\n    defect?: IDefect,\r\n    item?: IItem,\r\n    type: \"edit\" | \"report\" | \"resolve\",\r\n    patrolResults?: IPatrolResult[],\r\n    result?: { inspectorId: number, itemId: number; zoneId: number; status: boolean },\r\n    response: (defect: IDefect) => void;\r\n}\r\n\r\nexport default function AlertDefect({ defect, item, type, patrolResults, result, response }: AlertDefectProps) {\r\n    const disabled = false\r\n    const a = useTranslations(\"Alert\");\r\n    const t = useTranslations(\"General\");\r\n    const z = useTranslations(\"Zone\");\r\n\r\n    const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\r\n    const [defectDescription, setDefectDescription] = useState<string>(\"\");\r\n\r\n    const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n    const [isAlertDefectOpen, setAlertDefectOpen] = useState(true)\r\n\r\n    const [detailError, setDetailError] = useState<string | null>(null)\r\n    const [fileError, setFileError] = useState<string | null>(null)\r\n\r\n    const closeAlertDefect = () => {\r\n        setAlertDefectOpen(false)\r\n    }\r\n\r\n    const openAlertDefect = () => {\r\n        setAlertDefectOpen(true)\r\n    }\r\n\r\n    const handleOpenDialog = () => {\r\n        setIsAlertOpen(true);\r\n    };\r\n\r\n    const handleCloseDialog = () => {\r\n        setIsAlertOpen(false)\r\n    }\r\n    console.log(\"isOpen\", isAlertOpen)\r\n\r\n\r\n    const handleDefectDescription = (\r\n        event: React.ChangeEvent<HTMLTextAreaElement>\r\n    ) => {\r\n        const { value } = event.target;\r\n        setDefectDescription(value);\r\n    };\r\n\r\n\r\n    const handleCreateDefect = async (\r\n        name: string,\r\n        description: string,\r\n        type: string,\r\n        userId: number,\r\n        patrolResultId: number | null,\r\n        supervisorId: number,\r\n        files: File[]\r\n    ) => {\r\n\r\n        if (!description || files?.length === 0) {\r\n            setDetailError(!description ? a(\"ReportDefectErrorMissingDetail\") : null)\r\n            setFileError(files.length === 0 ? a(\"ReportDefectErrorMissingImage\") : null)\r\n            toast({\r\n                variant: \"error\",\r\n                title: a(\"ReportDefectMissingField\"),\r\n                description: !description && files?.length === 0\r\n                    ? a(\"ReportDefectMissingDetailAndImage\")\r\n                    : !description\r\n                        ? a(\"ReportDefectMissingDetail\")\r\n                        : a(\"ReportDefectMissingImage\"),\r\n            });\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n\r\n        formData.append(\"name\", name);\r\n        formData.append(\"description\", description);\r\n        formData.append(\"type\", type);\r\n        formData.append(\"status\", \"reported\");\r\n        formData.append(\"defectUserId\", userId.toString());\r\n        formData.append(\"patrolResultId\", patrolResultId.toString());\r\n        formData.append(\"supervisorId\", supervisorId.toString());\r\n\r\n        files?.forEach((file) => {\r\n            formData.append(\"imageFiles\", file);\r\n        });\r\n        try {\r\n            const createDefect = await fetchData(\r\n                \"post\",\r\n                \"/defect\",\r\n                true,\r\n                formData,\r\n                true\r\n            );\r\n            toast({\r\n                variant: \"success\",\r\n                title: a(\"ReportDefectTitle\"),\r\n                description: a(\"ReportDefectDescription\"),\r\n            });\r\n            if (description && files) {\r\n                closeAlertDefect()\r\n            }\r\n            setSelectedFiles(null)\r\n            setDefectDescription(null)\r\n            response(createDefect)\r\n        } catch (error) {\r\n            console.error(\"Error creating defect:\", error);\r\n        }\r\n    };\r\n\r\n    const handleEditDefect = async (\r\n        id: number,\r\n        name: string,\r\n        description: string,\r\n        type: string,\r\n        status: string,\r\n        userId: number,\r\n        patrolResultId: number | null,\r\n        supervisorId: number,\r\n        files: File[]\r\n    ) => {\r\n        if (!description || files?.length === 0) {\r\n            setDetailError(!description ? a(\"ReportDefectErrorMissingDetail\") : null)\r\n            setFileError(files.length === 0 ? a(\"ReportDefectErrorMissingImage\") : null)\r\n            toast({\r\n                variant: \"error\",\r\n                title: a(\"ReportDefectMissingField\"),\r\n                description: !description && files?.length === 0\r\n                    ? a(\"ReportDefectMissingDetailAndImage\")\r\n                    : !description\r\n                        ? a(\"ReportDefectMissingDetail\")\r\n                        : a(\"ReportDefectMissingImage\"),\r\n            });\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n\r\n        formData.append(\"name\", name);\r\n        formData.append(\"description\", description);\r\n        formData.append(\"type\", type);\r\n        formData.append(\"status\", status);\r\n        formData.append(\"defectUserId\", userId.toString());\r\n        formData.append(\"patrolResultId\", patrolResultId.toString());\r\n        formData.append(\"supervisorId\", supervisorId.toString());\r\n\r\n        files.forEach((file) => {\r\n            formData.append(\"imageFiles\", file);\r\n        });\r\n        try {\r\n            const updateDefect = await fetchData(\r\n                \"put\",\r\n                `/defect/${id}`,\r\n                true,\r\n                formData,\r\n                true\r\n            );\r\n            if (description && files) {\r\n                closeAlertDefect()\r\n            }\r\n            response(updateDefect)\r\n        } catch (error) {\r\n            console.error(\"Error edit defect:\", error);\r\n        }\r\n    };\r\n\r\n    const handleResolveDefect = async (\r\n        id: number,\r\n        files: File[]\r\n    ) => {\r\n\r\n        if (files?.length === 0) {\r\n            setFileError(files.length === 0 ? a(\"ReportDefectErrorMissingImage\") : null)\r\n            toast({\r\n                variant: \"error\",\r\n                title: a(\"ReportDefectMissingField\"),\r\n                description: a(\"ReportDefectMissingImage\"),\r\n            });\r\n            if (files) {\r\n                closeAlertDefect()\r\n            }\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n\r\n        formData.append(\"supervisorId\",\r\n            defect.patrolResult.itemZone.zone.supervisor.profile.userId.toString()\r\n        );\r\n        formData.append(\"defectUserId\",\r\n            defect.userId.toString()\r\n        );\r\n        formData.append(\"status\", \"resolved\")\r\n        files.forEach((file) => {\r\n            formData.append(\"imageFiles\", file);\r\n        });\r\n        try {\r\n            const resolveDefect = await fetchData(\r\n                \"put\",\r\n                `/defect/${id}`,\r\n                true,\r\n                formData,\r\n                true\r\n            );\r\n            toast({\r\n                variant: \"success\",\r\n                title: a(\"DefectResolveTitle\"),\r\n                description: a(\"DefectResolveDescription\"),\r\n            });\r\n            if (files) {\r\n                closeAlertDefect()\r\n            }\r\n            response(resolveDefect)\r\n        } catch (error) {\r\n            console.error(\"Error resolve defect:\", error);\r\n        }\r\n    }\r\n\r\n    const handleSendClick = (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        handleOpenDialog();\r\n    };\r\n\r\n    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files) {\r\n            setSelectedFiles([...(selectedFiles ?? []), ...Array.from(event.target.files)]);\r\n        }\r\n    };\r\n\r\n    const handleRemoveFile = (index: number) => {\r\n        setSelectedFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n    };\r\n\r\n    const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\r\n        event.preventDefault();\r\n        const files = event.dataTransfer.files;\r\n        if (files && files.length > 0) {\r\n            setSelectedFiles([...selectedFiles, ...Array.from(files)]);\r\n        }\r\n    };\r\n\r\n    const handleButtonClick = (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        document.getElementById(\"file-input\")?.click();\r\n    };\r\n\r\n    const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    if (!patrolResults && type === \"report\") {\r\n        return <Skeleton />\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     setAlertDefectOpen(true)\r\n    // }, [response]);\r\n\r\n    console.log(\"isAlertDefctOpen\", isAlertDefectOpen)\r\n    console.log(\"isAlertOpen\", isAlertOpen)\r\n\r\n    return (\r\n\r\n        <div>\r\n            <AlertDialog>\r\n                <AlertDialogTrigger\r\n                    disabled={disabled}\r\n                >\r\n                    <Button\r\n                        variant={type === \"resolve\" ? \"primary\" : type === \"edit\" ? \"primary\" : \"outline\"} size={\"lg\"}\r\n                        onClick={() => openAlertDefect()}\r\n                    >\r\n                        <span className=\"material-symbols-outlined pr-2 \">\r\n                            {type === \"edit\" ? \"edit\" : type === \"resolve\" ? \"published_with_changes\" : \"campaign\"}\r\n                        </span>\r\n                        {t(type === \"edit\" ? \"Edit\" : type === \"resolve\" ? \"Resolve\" : \"Report\")}\r\n                    </Button>\r\n                </AlertDialogTrigger>\r\n                {isAlertDefectOpen &&\r\n                    <AlertDialogContent>\r\n                        <AlertDialogHeader>\r\n                            <AlertDialogTitle className=\"text-2xl font-semibold\">\r\n                                {type === \"edit\" ? \"Edit Defect\" : type === \"resolve\" ? \"Resolve Defect\" : \"Report Defect\"}\r\n                            </AlertDialogTitle>\r\n                            <AlertDialogDescription className=\"flex items-start justify-start text-lg text-input\">\r\n                                Please provide details for the defect\r\n                            </AlertDialogDescription>\r\n                            <div className=\"flex flex-col justify-start\">\r\n                                <p className=\"font-semibold\">\r\n                                    {type === \"report\" ? item.name : defect.name}\r\n                                </p>\r\n                                <div className=\"flex items-center\">\r\n                                    <span className=\"material-symbols-outlined text-2xl me-2\">\r\n                                        location_on\r\n                                    </span>\r\n                                    <p className=\"font-semibold me-2\">\r\n                                        Zone\r\n                                    </p>\r\n                                    <p>\r\n                                        <p>\r\n                                            {type === \"report\"\r\n                                                ? item.itemZones.map((itemZone: IItemZone) => {\r\n                                                    return result.zoneId === itemZone.zone.id\r\n                                                        ? z(itemZone.zone.name)\r\n                                                        : null; // \r\n                                                })\r\n                                                : z(defect.patrolResult.itemZone.zone.name)}\r\n                                        </p>\r\n                                    </p>\r\n                                </div>\r\n\r\n                                <div className=\"flex items-center\">\r\n                                    <span className=\"material-symbols-outlined text-2xl me-2\">\r\n                                        engineering\r\n                                    </span>\r\n                                    <p className=\"font-semibold me-2\">\r\n                                        Supervisor\r\n                                    </p>\r\n                                    <p>\r\n                                        {type === \"report\"\r\n                                            ? item.itemZones.map((itemZone: IItemZone) => {\r\n                                                return result.zoneId === itemZone.zone.id\r\n                                                    ? itemZone.zone.supervisor.profile.name\r\n                                                    : null; // \r\n                                            })\r\n                                            :\r\n                                            defect.patrolResult.itemZone.zone.supervisor.profile.name\r\n                                        }\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                        </AlertDialogHeader>\r\n\r\n                        {type === \"resolve\" ? null :\r\n                            <div className='flex flex-col gap-1'>\r\n                                <div className='text-sm font-semibold'>\r\n                                    Detail\r\n                                </div>\r\n                                <Textarea\r\n                                    onChange={handleDefectDescription}\r\n                                    className=\"h-[100px] bg-secondary border-none\"\r\n                                    placeholder=\"Details...\"\r\n                                />\r\n                                {detailError && (\r\n                                    <p className=\"text-sm font-light text-destructive italic mt-1\">{detailError}</p>\r\n                                )}\r\n                            </div>\r\n                        }\r\n\r\n                        <div className=\"flex flex-col justify-between w-full\">\r\n                            <div className='text-sm font-semibold'>\r\n                                Image\r\n                            </div>\r\n                            <div className='flex flex-row py-1 pr-2 gap-4'>\r\n                                <div className='flex flex-col gap-1 flex-1'>\r\n                                    <div\r\n                                        className=\"flex h-full w-full rounded-[10px] bg-secondary justify-center items-center\"\r\n                                        onDragOver={handleDragOver}\r\n                                        onDrop={handleDrop}\r\n                                    >\r\n                                        <div className=\"flex p-8 flex-col items-center justify-center\">\r\n                                            <span className=\"material-symbols-outlined text-[48px] font-normal\">\r\n                                                upload\r\n                                            </span>\r\n                                            <div className=\"text-center mt-2\">\r\n                                                Drag & Drop file\r\n                                            </div>\r\n                                            <div className=\"text-center mt-1\">\r\n                                                Or\r\n                                            </div>\r\n                                            <div className=\"mt-2\">\r\n                                                <input\r\n                                                    type=\"file\"\r\n                                                    id=\"file-input\"\r\n                                                    style={{ display: \"none\" }}\r\n                                                    multiple\r\n                                                    onChange={handleFileChange}\r\n                                                />\r\n                                                <Button\r\n                                                    variant={\"outline\"}\r\n                                                    onClick={handleButtonClick}\r\n                                                >\r\n                                                    <span className=\"material-symbols-outlined mr-1\">\r\n                                                        browser_updated\r\n                                                    </span>\r\n                                                    Browse\r\n                                                </Button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <ScrollArea className=\"h-72 overflow-y-auto gap-5 rounded-md flex-1\">\r\n                                    <div className=\"flex flex-col gap-2 w-full\">\r\n                                        {selectedFiles?.map((file, index) => (\r\n                                            <div key={index} className=\" flex flex-row justify-between px-4 py-2 w-full bg-secondary rounded-md\">\r\n                                                <div className='flex flex-row gap-3'>\r\n                                                    <div className='flex flex-col justify-center items-center'>\r\n                                                        <span className=\"material-symbols-outlined\">\r\n                                                            image\r\n                                                        </span>\r\n                                                    </div>\r\n                                                    <div className=\"flex items-center gap-2 \">\r\n                                                        <div className=\"flex flex-col\">\r\n                                                            <TooltipProvider>\r\n                                                                <Tooltip>\r\n                                                                    <TooltipTrigger asChild>\r\n                                                                        <div className=\" truncate w-[145px]\">\r\n                                                                            {file.name}\r\n                                                                        </div>\r\n                                                                    </TooltipTrigger>\r\n                                                                    <TooltipContent className=\"bg-foreground\">\r\n                                                                        <div className=\" w-full \">\r\n                                                                            {file.name}\r\n                                                                        </div>\r\n                                                                    </TooltipContent>\r\n                                                                </Tooltip>\r\n                                                            </TooltipProvider>\r\n\r\n                                                            <p className=\"text-sm font-semibold text-muted-foreground\">\r\n                                                                {(file.size / 1024).toFixed(\r\n                                                                    2\r\n                                                                )}{\" \"}\r\n                                                                KB\r\n                                                            </p>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                <Button\r\n                                                    variant={\"ghost\"}\r\n                                                    className=\"flex flex-col justify-center items-center w-[40px] h-[40px]\"\r\n                                                    onClick={() =>\r\n                                                        handleRemoveFile(index)\r\n                                                    }\r\n                                                >\r\n                                                    <span className=\"material-symbols-outlined text-destructive\">\r\n                                                        delete\r\n                                                    </span>\r\n                                                </Button>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </ScrollArea>\r\n                            </div>\r\n                            {fileError && (\r\n                                <p className=\"text-sm font-light text-destructive italic mt-1\">{fileError}</p>\r\n                            )}\r\n                        </div>\r\n\r\n                        <AlertDialogFooter>\r\n                            <div className=\"flex items-end justify-end gap-[10px]\">\r\n                                <AlertDialogCancel\r\n                                    onClick={() => {\r\n                                        setDetailError(null)\r\n                                        setFileError(null)\r\n                                    }}>\r\n                                    Cancel\r\n                                </AlertDialogCancel>\r\n                                <AlertDialogAction\r\n                                    onClick={(event) => {\r\n                                        handleSendClick(event)\r\n                                    }}\r\n                                    className={\"bg-primary\"}\r\n                                >\r\n                                    <span className=\"material-symbols-outlined text-2xl me-2\">\r\n                                        send\r\n                                    </span>\r\n                                    Send\r\n                                </AlertDialogAction>\r\n                            </div>\r\n                        </AlertDialogFooter>\r\n\r\n                        {isAlertOpen && (\r\n                            <AlertCustom\r\n                                title={type === \"report\" ? a(\"ReportDefectConfirmTitle\") : type === \"edit\" ? a(\"ReportEditConfirmTitle\") : a(\"ReportResolveConfirmTitle\")}\r\n                                description={type === \"report\" ? a(\"ReportDefectConfirmDescription\") : type === \"edit\" ? a(\"ReportEditConfirmDescription\") : a(\"ReportResolveConfirmDescription\")}\r\n                                primaryButtonText={t(\"Confirm\")}\r\n                                primaryIcon=\"check\"\r\n                                secondaryButtonText={t(\"Cancel\")}\r\n                                backResult={(backResult) => {\r\n                                    if (backResult) {\r\n                                        switch (type) {\r\n                                            case \"report\":\r\n                                                handleCreateDefect(\r\n                                                    item.name,\r\n                                                    defectDescription,\r\n                                                    item.type,\r\n                                                    result.inspectorId,\r\n                                                    patrolResults.find((patrolResult: IPatrolResult) =>\r\n                                                        result.itemId === patrolResult.itemId && result.zoneId === patrolResult.zoneId\r\n                                                    )?.id || null,\r\n                                                    item.itemZones.find((itemZone: IItemZone) =>\r\n                                                        result.zoneId === itemZone.zone.id\r\n                                                    )?.zone.supervisor.id || null,\r\n                                                    selectedFiles\r\n                                                );\r\n                                                break;\r\n\r\n                                            case \"resolve\":\r\n                                                handleResolveDefect(defect.id, selectedFiles);\r\n                                                break;\r\n\r\n                                            case \"edit\":\r\n                                                handleEditDefect(\r\n                                                    defect.id,\r\n                                                    defect.name,\r\n                                                    defectDescription,\r\n                                                    defect.type,\r\n                                                    defect.status,\r\n                                                    defect.userId,\r\n                                                    defect.patrolResultId,\r\n                                                    defect.patrolResult.itemZone.zone.supervisor.id,\r\n                                                    selectedFiles\r\n                                                );\r\n                                                break;\r\n\r\n                                            default:\r\n                                                console.error(\"Invalid type\");\r\n                                        }\r\n                                    }\r\n                                    handleCloseDialog()\r\n                                }\r\n                                } />\r\n                        )}\r\n                    </AlertDialogContent>\r\n                }\r\n            </AlertDialog>\r\n\r\n        </div >\r\n    )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\badge-custom.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\checklist-dropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\date-picker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\defect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\filter-date.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'field' is defined but never used. Allowed unused args must match /^_/u.","line":67,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\language-select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\map.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'zonePathMd' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'zonePathSm' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'wallPathMd' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'wallPathSm' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setStageDimensions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":30,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\nimport { Stage, Layer, Path, Text } from 'react-konva';\r\nimport { useEffect, useState } from 'react';\r\nimport { IZone, ILocation } from '@/app/type';\r\nimport { fetchData } from '@/lib/utils';\r\nimport zonePath from '@/lib/zonePath.json'\r\nimport zonePathMd from '@/lib/zonePath-md.json'\r\nimport zonePathSm from '@/lib/zonePath-sm.json'\r\nimport wallPath from '@/lib/wallPath.json'\r\nimport wallPathMd from '@/lib/wallPath-md.json'\r\nimport wallPathSm from '@/lib/wallPath-sm.json'\r\nimport React from 'react';\r\nimport { useTranslations, useLocale } from 'next-intl';\r\n\r\n\r\ninterface MapProps {\r\n  onZoneSelect?: (selectedZones: IZone[]) => void;\r\n  disable: boolean;\r\n  initialSelectedZones?: number[];\r\n  toggle?: boolean;\r\n}\r\n\r\nexport default function Map({ onZoneSelect, disable, initialSelectedZones, toggle = false }: MapProps) {\r\n  const [location, setLocation] = useState<ILocation>();\r\n  const [selectedZones, setSelectedZones] = useState<number[]>([]);\r\n  const [zones, setZones] = useState<IZone[]>([]);\r\n  const [walls, setWalls] = useState<{ id: number, pathData: string }[]>([])\r\n  const [paths, setPaths] = useState<{ text: any, id: number, pathData: string }[]>([])\r\n  const m = useTranslations('Map')\r\n  const [stageDimensions, setStageDimensions] = useState({ width: 780, height: 518, size: \"LG\" });\r\n  const locale = useLocale();\r\n  const [language, setLanguage] = useState('en');\r\n\r\n  useEffect(() => {\r\n    const currentLanguage = locale; // ภาษาที่ใช้อยู่ในปัจจุบัน\r\n    setLanguage(currentLanguage || 'en');\r\n  }, []);\r\n\r\n  // const responsiveStage = () => {\r\n  //   const screenWidth = window.innerWidth; // ความกว้างของหน้าจอปัจจุบัน\r\n\r\n  //   if (screenWidth <= 800) { // ความกว้างของหน้าจอสำหรับจอมือถือ\r\n  //     setStageDimensions({ width: 800, height: 600, size: \"SM\" });\r\n  //   } else if (screenWidth <= 1024) { // ความกว้างของหน้าจอสำหรับจอไอแพต\r\n  //     setStageDimensions({ width: 800, height: 600, size: \"MD\" });\r\n  //   } else { // ความกว้างของหน้าจอสำหรับจอคอมพิวเตอร์\r\n  //     setStageDimensions({ width: 1350, height: 895, size: \"LG\" });\r\n  //   }\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   const handleResize = () => responsiveStage();\r\n  //   window.addEventListener('resize', handleResize);\r\n  //   return () => {\r\n  //     window.removeEventListener('resize', handleResize);\r\n  //   };\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    if ( initialSelectedZones) {\r\n      setSelectedZones(initialSelectedZones);\r\n    }\r\n  }, [ initialSelectedZones]);\r\n\r\n  const fetch = async () => {\r\n    try {\r\n      const data = await fetchData('get', '/location/1', true)\r\n      setLocation(data)\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch()\r\n    if (stageDimensions.size === \"SM\") {\r\n      setWalls(wallPath)\r\n      setPaths(zonePath)\r\n    } else if (stageDimensions.size === \"MD\") {\r\n      setWalls(wallPath)\r\n      setPaths(zonePath)\r\n    } else {\r\n      setWalls(wallPath)\r\n      setPaths(zonePath)\r\n    }\r\n\r\n    if (location) {\r\n      const updatedZones = location.zones.map(zone => {\r\n        const matchedZonePath = paths.find(path => path.id === zone.id);\r\n        return {\r\n          ...zone,\r\n          pathData: matchedZonePath ? matchedZonePath.pathData : '',\r\n          text: matchedZonePath ? matchedZonePath.text : null\r\n        };\r\n      });\r\n\r\n      setZones(updatedZones);\r\n    }\r\n  }, [location]);\r\n\r\n  const getGradientColors = (isSelected: boolean): (string | number)[] => {\r\n    if (isSelected) {\r\n      return [\r\n        0, '#C16975', // สีเริ่มต้น (บนสุด) จาก accent-gradient\r\n        1, '#FB0023', // สีสิ้นสุด (ล่างสุด) จาก accent-gradient\r\n      ];\r\n    } else {\r\n      const secondaryColor = getCSSVariableValue('--secondary') || '#DCE2EC'; // ดึงสี secondary จาก CSS variables หรือใช้ fallback\r\n      return [\r\n        0, secondaryColor, // สีเมื่อไม่ได้เลือกใช้ secondary\r\n        1, secondaryColor\r\n      ];\r\n    }\r\n  }\r\n\r\n\r\n  const handleZoneSelect = (zoneId: number) => {\r\n    if (disable) return;\r\n\r\n    let updatedSelectedZones;\r\n    if (toggle) {\r\n      // เลือกได้แค่โซนเดียว\r\n      updatedSelectedZones = selectedZones.includes(zoneId) ? [] : [zoneId];\r\n    } else {\r\n      // เลือกหลายโซนได้\r\n      const isSelected = selectedZones.includes(zoneId);\r\n      updatedSelectedZones = isSelected\r\n        ? selectedZones.filter(id => id !== zoneId)\r\n        : [...selectedZones, zoneId];\r\n    }\r\n\r\n    setSelectedZones(updatedSelectedZones);\r\n\r\n    const selectedZoneObjects = location?.zones.filter(zone => updatedSelectedZones.includes(zone.id)) || [];\r\n    if (onZoneSelect) {\r\n      onZoneSelect(selectedZoneObjects);\r\n    }\r\n  };\r\n\r\n  const calculatePoint = (textY: number | undefined) => {\r\n    return (textY || 0) + 200; // ปรับค่าให้สัมพันธ์กับความสูงของ path แต่ละโซน\r\n  }\r\n\r\n  const getCSSVariableValue = (variableName: string) => {\r\n    const value = getComputedStyle(document.documentElement)\r\n      .getPropertyValue(variableName)\r\n      .trim();\r\n\r\n    if (value && value.match(/^(\\d+\\s*\\d+%?\\s*\\d+%?)$/)) {\r\n      return `hsl(${value})`;\r\n    }\r\n  };\r\n\r\n  const getTextColor = (isSelected: boolean) => {\r\n    if (isSelected) {\r\n      return getCSSVariableValue('--card');\r\n    } else {\r\n      return getCSSVariableValue('--card-foreground');\r\n    }\r\n  };\r\n\r\n  if (!location) {\r\n    return (\r\n      <p>Loading...</p>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Stage width={stageDimensions.width} height={stageDimensions.height} className='bg-card rounded-md'>\r\n      <Layer x={8} y={8}>\r\n        {zones.map((zone) => {\r\n          const isSelected = selectedZones.includes(zone.id);\r\n          const textLanguage = zone.text?.[language] || zone.text?.['en']; // ใช้สำหรับเก็บค่าตัวแปร text ของภาษาที่ใช้ในปัจจุบัน\r\n          const startPointY = textLanguage?.y ? textLanguage.y - 80 : 0;\r\n          const endPointY = calculatePoint(startPointY); // ใช้ฟังก์ชันคำนวณ end point\r\n          return (\r\n            <React.Fragment key={zone.id}>\r\n              <Path\r\n                data={zone.pathData}\r\n                fillLinearGradientStartPoint={{ x: 0, y: startPointY }} // จุดเริ่มต้นของ gradient\r\n                fillLinearGradientEndPoint={{ x: 0, y: endPointY }} // จุดสิ้นสุดของ gradient\r\n                fillLinearGradientColorStops={getGradientColors(isSelected)} // ใช้ gradient ที่กำหนด\r\n                onClick={() => handleZoneSelect(zone.id)}\r\n              />\r\n              {textLanguage && (\r\n                <Text\r\n                  x={textLanguage.x} // ตำแหน่ง x\r\n                  y={textLanguage.y} // ตำแหน่ง y\r\n                  text={m(zone.name)} // ข้อความที่จะแสดง\r\n                  fontSize={textLanguage.fontSize} // ขนาดฟอนต์\r\n                  fontStyle=\"bold\" // ทำให้ข้อความเป็นตัวหนา\r\n                  fill={getTextColor(isSelected)} // สีของข้อความ ใช้ฟังก์ชัน getTextColor\r\n                  rotation={textLanguage.rotation} // การหมุนของข้อความ\r\n                  align=\"center\"\r\n                />\r\n              )}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </Layer>\r\n      <Layer  x={8} y={8}>\r\n        {walls.map((wall) => (\r\n          <Path key={wall.id} data={wall.pathData} fill={getCSSVariableValue('--input')} />\r\n        ))}\r\n      </Layer>\r\n    </Stage >\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\mode-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\notification.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardFooter' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":56},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2714,2730],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *   คอมโพเนนต์ Notification ใช้สำหรับแสดงและจัดการรายการแจ้งเตือนของผู้ใช้งาน รวมถึงการเปลี่ยนสถานะการแจ้งเตือน \r\n *   และแสดงรายการแจ้งเตือนล่าสุดในรูปแบบ Dropdown\r\n *\r\n * Input:\r\n *   - ไม่มี props ที่รับเข้ามาโดยตรง\r\n *   - ใช้ข้อมูลแจ้งเตือน (notifications) และข้อมูลผู้ใช้ (user) ที่ดึงมาจาก API\r\n *\r\n * Output:\r\n *   - Dropdown แสดงรายการแจ้งเตือนล่าสุดสูงสุด 8 รายการ\r\n *   - ปุ่ม \"Mark All As Read\" สำหรับเปลี่ยนสถานะแจ้งเตือนทั้งหมดให้เป็น \"อ่านแล้ว\"\r\n *   - การคลิกแจ้งเตือนเปลี่ยนสถานะเป็น \"อ่านแล้ว\" และนำทางไปยัง URL ถ้ามี\r\n**/\r\n\r\n'use client'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuItem,\r\n    DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport { Button } from '@/components/ui/button'\r\nimport { useLocale, useTranslations } from 'next-intl'\r\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { INotification, notificationType, IUser } from '@/app/type'\r\nimport { fetchData, formatTime, getNotificationToast } from '@/lib/utils'\r\nimport { useSocket } from '@/components/socket-provider'\r\nimport BadgeCustom from '@/components/badge-custom'\r\nimport { useRouter } from 'next/navigation'\r\nimport { timeAgo } from '@/lib/utils'\r\nimport { ScrollArea } from '@/components/ui/scroll-area'\r\nimport { toast } from '@/hooks/use-toast'\r\nimport {\r\n    SwipeableList,\r\n    SwipeableListItem,\r\n    SwipeAction,\r\n    TrailingActions,\r\n} from 'react-swipeable-list';\r\nimport 'react-swipeable-list/dist/styles.css';\r\n\r\nexport default function Notification() {\r\n    const t = useTranslations('General'); // ฟังก์ชันแปลข้อความจาก 'General'\r\n    const s = useTranslations(\"Status\");\r\n    const d = useTranslations('DateTime');\r\n    const n = useTranslations('Notification');\r\n    const a = useTranslations('Alert');\r\n    const z = useTranslations('Zone');\r\n\r\n    const prevUnreadCountRef = useRef<number>(0);\r\n    const locale = useLocale()\r\n    const [notifications, setNotifications] = useState<INotification[]>([])\r\n    const [user, setUser] = useState<IUser>()\r\n    const { socket, isConnected } = useSocket()\r\n    const [unreadCount, setUnreadCount] = useState(0);\r\n\r\n    // const unreadCount = notifications.filter(notification => !notification.read).length\r\n\r\n    const router = useRouter()\r\n\r\n    function isValidDateFormat(date: string): boolean {\r\n        const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\r\n        return iso8601Regex.test(date) && !isNaN(Date.parse(date));\r\n    }\r\n\r\n    function formatMessage(message) {\r\n        const [key, ...dynamicParts] = message.split('-');\r\n        console.log(key)\r\n        let content = dynamicParts.join('-');\r\n        if (isValidDateFormat(content)) {\r\n            content = formatTime(content)\r\n        }\r\n        else {\r\n            content = z(content)\r\n        }\r\n\r\n        return { key, content };\r\n    }\r\n\r\n    const fetchNotifications = async () => {\r\n        try {\r\n            const data = await fetchData(\"get\", \"/notifications\", true);\r\n            setNotifications(data);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch notifications:\", error);\r\n        }\r\n    };\r\n\r\n    const fetchUser = async () => {\r\n        try {\r\n            const data = await fetchData(\"get\", \"/user\", true);\r\n            setUser(data);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch profile:\", error);\r\n        }\r\n    };\r\n\r\n    const updateNotification = async (id: number) => {\r\n        try {\r\n            await fetchData(\"put\", `/notification/${id}`, true);\r\n        } catch (error) {\r\n            console.error(\"Failed to update notification:\", error);\r\n        }\r\n    };\r\n\r\n    const removeNotification = async (id: number) => {\r\n        try {\r\n            setNotifications((prevNotifications) =>\r\n                prevNotifications.filter((notification) => notification.id !== id)\r\n            );\r\n            await fetchData(\"delete\", `/notification/${id}`, true);\r\n\r\n        } catch (error) {\r\n            console.error(\"Failed to delete notification:\", error);\r\n        }\r\n    };\r\n\r\n    const removeAllNotifications = async () => {\r\n        try {\r\n            const response = await fetchData(\"delete\", `/notifications`, true);\r\n            return response\r\n        } catch (error) {\r\n            console.error(\"Failed to delete notification:\", error);\r\n        }\r\n    };\r\n\r\n    const handleNotificationClick = (notification: INotification) => {\r\n        if (!notification.read) {\r\n            setNotifications(prevNotifications =>\r\n                prevNotifications.map(n =>\r\n                    n.id === notification.id ? { ...n, read: true } : n\r\n                )\r\n            );\r\n            updateNotification(notification.id); // ถ้ายังไม่ได้อ่านให้ update สถานะ\r\n        }\r\n        if (notification.url) {\r\n            router.push(`/${locale}/${notification.url}`); // ถ้ามี URL ให้ redirect ไป\r\n        }\r\n    };\r\n\r\n    const handleRemoveAllNotifications = async () => {\r\n        removeAllNotifications();\r\n        setNotifications([]);\r\n        toast({\r\n            variant: 'success',\r\n            title: a(\"DeleteAllNotificationTitle\"),\r\n            description: a(\"DeleteAllNotificationDescription\"),\r\n        });\r\n    };\r\n\r\n    const markAllAsRead = async () => {\r\n        try {\r\n            await fetchData(\"put\", \"/notifications/mark-all-read\", true); // เรียก API ที่สร้างใน Backend\r\n            setNotifications(prevNotifications =>\r\n                prevNotifications.map(n => ({ ...n, read: true }))\r\n            );\r\n        } catch (error) {\r\n            console.error(\"Failed to mark all notifications as read\", error);\r\n        }\r\n    };\r\n\r\n    const getRecentNotifications = () => {\r\n        // แบ่งแจ้งเตือนเป็น 2 กลุ่ม: ที่ยังไม่ได้อ่านและที่อ่านแล้ว\r\n        const unreadNotifications = notifications.filter(n => !n.read).sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\r\n        const readNotifications = notifications.filter(n => n.read).sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\r\n\r\n        // ดึง 8 แจ้งเตือนล่าสุด\r\n        const recentNotifications = [...unreadNotifications, ...readNotifications].slice(0, 8);\r\n\r\n        return recentNotifications;\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchNotifications();\r\n        fetchUser();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (socket && isConnected && user?.id) {\r\n            socket.emit('join_room', user.id);\r\n            // ฟังก์ชันรับ event 'new_notification'\r\n            socket.on('new_notification', (data: INotification) => {\r\n                setNotifications((prevNotifications) => [...prevNotifications, data]);\r\n                const notification = formatMessage(data.message)\r\n                const toastData = getNotificationToast(notification.key)\r\n        \r\n                if (toastData) {\r\n                    toast({\r\n                        variant: toastData.variant,\r\n                        title: a(toastData.title),\r\n                        description: a(toastData.description, { content: notification.content}),\r\n                    });\r\n                } else {\r\n                    console.error(`Notification not found for key: ${notification.key}`);\r\n                }\r\n            });\r\n\r\n            return () => {\r\n                socket.off('new_notification');\r\n            };\r\n        }\r\n    }, [socket, isConnected]);\r\n\r\n    useEffect(() => {\r\n        setUnreadCount(notifications.filter(notification => !notification.read).length);\r\n    }, [notifications]);\r\n\r\n    useEffect(() => {\r\n        const prevUnreadCount = prevUnreadCountRef.current;\r\n        // ตรวจสอบว่า unreadCount ปัจจุบัน > 0 และก่อนหน้าเป็น 0\r\n        if (unreadCount > 0 && prevUnreadCount === 0) {\r\n            toast({\r\n                variant: \"default\",\r\n                title: a(\"UnreadNotificationTitle\", { count: unreadCount }),\r\n                description: a(\"UnreadNotificationDescription\"),\r\n            });\r\n        }\r\n        // อัปเดตค่า previousUnreadCount เป็นค่าปัจจุบัน\r\n        prevUnreadCountRef.current = unreadCount;\r\n    }, [unreadCount]);\r\n\r\n    const trailingActions = (id: number) => (\r\n        <TrailingActions>\r\n            <SwipeAction\r\n                destructive={true}\r\n                onClick={() => removeNotification(id)}\r\n            >\r\n                <div className=\"flex items-center justify-center gap-1 px-24 w-full h-[110px] bg-destructive text-card rounded-r-md\">\r\n                    <span className=\"material-symbols-outlined\">\r\n                        delete\r\n                    </span>\r\n                    <p className='text-lg font-semibold'>{t(\"Delete\")}</p>\r\n                </div>\r\n            </SwipeAction>\r\n        </TrailingActions>\r\n    );\r\n\r\n    return (\r\n        <DropdownMenu>\r\n            <DropdownMenuTrigger>\r\n                <Button variant='ghost' className=\"w-[45px] h-[45px] text-input relative\">\r\n                    <span className=\"material-symbols-outlined\">notifications</span>\r\n                    {unreadCount > 0 && (\r\n                        <span className=\"absolute top-2 right-2 h-2 w-2 rounded-full bg-primary\" />\r\n                    )}\r\n                </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent align=\"start\" className='p-0'>\r\n                <Card className=\"flex flex-col w-[480px] h-[580px] border-none px-6 py-4 gap-4\" >\r\n                    <CardHeader className='p-0 flex gap-0'>\r\n                        <CardTitle className='flex flex-col'>\r\n                            <div className='flex text-2xl w-full justify-between items-center'>\r\n                                {t('Notifications')}\r\n                                <DropdownMenu>\r\n                                    <DropdownMenuTrigger onClick={(e) => e.stopPropagation()}>\r\n                                        <Button variant=\"ghost\" className=\"w-[45px] h-[45px]\">\r\n                                            <span className=\"material-symbols-outlined items-center text-muted-foreground\">\r\n                                                more_vert\r\n                                            </span>\r\n                                        </Button>\r\n                                    </DropdownMenuTrigger>\r\n\r\n                                    <DropdownMenuContent align=\"end\" className=\"p-0\">\r\n                                        <DropdownMenuItem onClick={() => handleRemoveAllNotifications()}>\r\n                                            <h1 className='text-destructive'>{t(\"DeleteAllNotifications\")}</h1>\r\n                                        </DropdownMenuItem>\r\n                                    </DropdownMenuContent>\r\n                                </DropdownMenu>\r\n                            </div>\r\n                            <p className='p-0 text-base font-normal text-muted-foreground'>{t('YouHaveUnreadMessages', { count: unreadCount })}</p>\r\n                        </CardTitle>\r\n                    </CardHeader>\r\n                    <div className='h-full overflow-y-auto flex flex-col gap-6'>\r\n                        <ScrollArea className=\"flex-1 p-0 pr-4\">\r\n                            <SwipeableList style={{ overflow: 'visible' }}>\r\n                                {getRecentNotifications().map((notification, index) => {\r\n                                    const { key, content } = formatMessage(notification.message);\r\n                                    return (\r\n                                        <SwipeableListItem\r\n                                            key={index}\r\n                                            trailingActions={trailingActions(notification.id)}>\r\n                                            <Button\r\n                                                key={index}\r\n                                                variant={'ghost'}\r\n                                                className=\"justify-between items-center w-full h-fit gap-6 px-6 py-4 truncate mb-4\"\r\n                                                onClick={() => handleNotificationClick(notification)}\r\n                                            >\r\n                                                <span className={`h-3 w-3 rounded-full ${notification.read ? 'bg-input' : 'bg-primary'}`} />\r\n                                                <div className=\"flex flex-col justify-start w-full truncate gap-1\">\r\n                                                    <textarea\r\n                                                        className=\"text-sm font-normal text-card-foreground text-start line-clamp-2 bg-transparent resize-none outline-none cursor-pointer\"\r\n                                                        readOnly\r\n                                                    >\r\n                                                        {n(key, { content: content})}\r\n                                                    </textarea>\r\n                                                    <div className=\"flex items-center justify-between\">\r\n                                                        <p className=\"text-xs font-normal text-muted-foreground text-start\">\r\n                                                            {timeAgo(notification.timestamp, d)}\r\n                                                        </p>\r\n                                                        {(() => {\r\n                                                            let variant: \"green\" | \"red\" | \"yellow\" | \"blue\" | \"default\" | \"purple\" | \"secondary\" | \"mint\" | \"orange\" | \"cyan\" | undefined;\r\n                                                            switch (notification.type as notificationType) {\r\n                                                                case \"information\":\r\n                                                                    variant = \"blue\";\r\n                                                                    break;\r\n                                                                case \"request\":\r\n                                                                    variant = \"orange\";\r\n                                                                    break;\r\n                                                                default:\r\n                                                                    variant = \"purple\";\r\n                                                                    break;\r\n                                                            }\r\n                                                            return (\r\n                                                                <BadgeCustom variant={variant}>\r\n                                                                    {s(notification.type)}\r\n                                                                </BadgeCustom>\r\n                                                            );\r\n                                                        })()}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Button>\r\n                                        </SwipeableListItem>\r\n                                    );\r\n                                })}\r\n                            </SwipeableList>\r\n                        </ScrollArea>\r\n                        <Button variant={'primary'} size={'lg'} className=\"w-full\"\r\n                            onClick={markAllAsRead}>\r\n                            {t('MarkAllAsRead')}\r\n                        </Button>\r\n                    </div>\r\n\r\n                </Card>\r\n            </DropdownMenuContent>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\patrol-card.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialog' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogAction' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogCancel' is defined but never used. Allowed unused vars must match /^_/u.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogContent' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":29,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogFooter' is defined but never used. Allowed unused vars must match /^_/u.","line":30,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4564,4611],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused args must match /^_/u.","line":331,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":331,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/ui/hover-card\";\r\nimport { patrolStatus, IUser, IPreset, IPatrol } from \"@/app/type\";\r\nimport { formatPatrolId, getInitials } from \"@/lib/utils\";\r\nimport { fetchData } from \"@/lib/utils\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\nexport interface IPatrolCard {\r\n  id: number;\r\n  date: Date;\r\n  status: patrolStatus;\r\n  preset: IPreset;\r\n  itemCounts: number;\r\n  inspectors: IUser[];\r\n  onRemoveSuccess,\r\n}\r\n\r\nexport function PatrolCard({\r\n  id,\r\n  date,\r\n  status,\r\n  preset,\r\n  itemCounts,\r\n  inspectors = [],\r\n  onRemoveSuccess\r\n}: IPatrolCard) {\r\n  const [isClicked, setIsClicked] = useState(false);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [items, setItems] = useState(0);\r\n  const [fails, setFails] = useState(0);\r\n  const [defects, setDefects] = useState(0);\r\n\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [pendingAction, setPendingAction] = useState<(() => void) | null>(null);\r\n\r\n  const router = useRouter()\r\n  const locale = useLocale()\r\n\r\n  const formattedDate =\r\n    date instanceof Date\r\n      ? date.toLocaleDateString(`${locale}-GB`, {\r\n        day: \"2-digit\",\r\n        month: \"2-digit\",\r\n        year: \"numeric\",\r\n      })\r\n      : \"N/A\"; // Fallback if date is not valid\r\n\r\n\r\n  const getPatrolData = async () => {\r\n    try {\r\n      let countItems = itemCounts;\r\n      let countFails = 0;\r\n      let countDefects = 0;\r\n\r\n      if (status !== 'pending' && status !== 'scheduled') {\r\n        const resultFetch: Partial<IPatrol> = await fetchData(\"get\", `/patrol/${id}?result=true`, true);\r\n        if (resultFetch?.results) {\r\n          for (const patrolResult of resultFetch.results) {\r\n            if (patrolResult.status === false) {\r\n              countFails++;\r\n              if (patrolResult.defects && patrolResult.defects.length !== 0) {\r\n                countDefects += patrolResult.defects.length;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setItems(countItems);\r\n      setFails(countFails);\r\n      setDefects(countDefects);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch patrol data:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPatrolData();\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  const t = useTranslations(\"General\");\r\n  const a = useTranslations(\"Alert\");\r\n\r\n  const handleClick = () => {\r\n    setIsClicked((prev) => !prev);\r\n  };\r\n\r\n  const handleMouseEnter = () => {\r\n    setIsHovered(true);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setIsHovered(false);\r\n  };\r\n\r\n  const handleDetail = () => {\r\n    router.push(`/${locale}/patrol/${id}/detail`)\r\n  }\r\n\r\n  const handleDialogResult = (result: boolean) => {\r\n    setIsDialogOpen(false);\r\n    if (result && pendingAction) {\r\n      pendingAction(); // Execute the pending action\r\n      setPendingAction(null); // Clear the pending action\r\n    }\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleRemovePatrol = () => {\r\n    setPendingAction(() => () => removePatrol());\r\n    handleOpenDialog();\r\n  };\r\n\r\n  const removePatrol = async () => {\r\n    if (status !== 'pending') {\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"PatrolRemoveErrorTitle\"),\r\n        description: a(\"PatrolRemoveErrorDescription\"),\r\n      });\r\n      return;\r\n    }\r\n    try {\r\n      await fetchData(\"delete\", `/patrol/${id}`, true);\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n    if (onRemoveSuccess) {\r\n      onRemoveSuccess(id); // เรียก Callback หลังลบสำเร็จ\r\n    }\r\n  }\r\n\r\n  if (!mounted) {\r\n    return (\r\n      null\r\n    )\r\n  }\r\n\r\n  console.log(\"inspector patrolcard\", inspectors)\r\n\r\n  return (\r\n    <Card className=\"flex flex-col custom-shadow border-none w-full px-6 py-4 h-fit gap-4  hover:bg-secondary cursor-pointer\" onClick={() => handleDetail()}>\r\n      <CardHeader className=\"flex flex-row gap-0 p-0 justify-between \">\r\n        <div className=\"flex flex-col justify-between items-start gap-4 truncate\">\r\n          <CardDescription className=\"text-lg font-semibold text-muted-foreground\">\r\n            {formattedDate}\r\n          </CardDescription>\r\n          <CardTitle className=\"text-card-foreground text-2xl truncate\">\r\n            {preset.title}\r\n          </CardTitle>\r\n        </div>\r\n        {status === (\"pending\" as patrolStatus) ? (\r\n          <div className=\"flex items-center justify-center rounded-full bg-primary/20 w-9 h-9 custom-shadow\">\r\n            <span className=\"material-symbols-outlined text-primary\">\r\n              hourglass_top\r\n            </span>\r\n          </div>\r\n        ) : status === (\"scheduled\" as patrolStatus) ? (\r\n          <div className=\"flex items-center justify-center rounded-full bg-yellow/20 w-9 h-9 custom-shadow\">\r\n            <span className=\"material-symbols-outlined text-yellow\">\r\n              event_available\r\n            </span>\r\n          </div>\r\n        ) : status === (\"on_going\" as patrolStatus) ? (\r\n          <div className=\"flex items-center justify-center rounded-full bg-purple/20 w-9 h-9 custom-shadow\">\r\n            <span className=\"material-symbols-outlined text-purple\">\r\n              cached\r\n            </span>\r\n          </div>\r\n        ) : status === (\"completed\" as patrolStatus) ? (\r\n          <div className=\"flex items-center justify-center rounded-full bg-green/20 w-9 h-9 custom-shadow\">\r\n            <span className=\"material-symbols-outlined text-green\">\r\n              check\r\n            </span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"flex items-center justify-center rounded-full bg-red-300/40 w-10 h-10 custom-shadow\">\r\n            <span className=\"material-symbols-outlined text-red-500\">\r\n              error\r\n            </span>\r\n          </div>\r\n        )}\r\n\r\n      </CardHeader>\r\n      <CardContent className=\"flex flex-col gap-2 p-0\">\r\n        <div className=\"flex text-muted-foreground items-center gap-1\">\r\n          <span className=\"material-symbols-outlined\">description</span>\r\n          <p className=\"text-lg font-normal\">{formatPatrolId(id)}</p>\r\n        </div>\r\n        <HoverCard open={isClicked || isHovered}>\r\n          <HoverCardTrigger\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              handleClick();\r\n            }}\r\n            onMouseEnter={handleMouseEnter}\r\n            onMouseLeave={handleMouseLeave}\r\n            asChild\r\n          >\r\n            <div className=\"flex text-muted-foreground items-center\">\r\n              <span className=\"material-symbols-outlined me-1\">\r\n                person_search\r\n              </span>\r\n              {inspectors.length > 0 && (\r\n                <div className=\"flex items-center me-1 truncate max-w-[190px]\">\r\n                  <p className=\"text-xl me-2.5 truncate\">{inspectors[0].profile.name}</p>\r\n                </div>\r\n              )}\r\n              {inspectors.map((inspector, idx) => {\r\n                return (\r\n                  <Avatar key={idx} className=\"custom-shadow ms-[-10px]\">\r\n                    <AvatarImage\r\n                      src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector?.profile?.image?.path}`}\r\n                    />\r\n                    <AvatarFallback id={inspector.id.toString()}>\r\n                      {getInitials(inspector.profile.name)}\r\n                    </AvatarFallback>\r\n                  </Avatar>\r\n                );\r\n              })}\r\n\r\n              {inspectors.length > 5 && (\r\n                <Avatar className=\"custom-shadow flex items-center justify-center ms-[-10px]\">\r\n                  <AvatarImage src=\"\" />\r\n                  <span className=\"absolute text-card-foreground text-[16px] font-semibold\">\r\n                    +{inspectors.length - 5}\r\n                  </span>\r\n                  <AvatarFallback id={'0'}></AvatarFallback>\r\n                </Avatar>\r\n              )}\r\n            </div>\r\n          </HoverCardTrigger>\r\n          <HoverCardContent className=\"flex flex-col w-fit border-none gap-4 px-6 py-4 custom-shadow\">\r\n            <div className=\"flex items-center justify-center gap-1\">\r\n              <span className=\"material-symbols-outlined\">\r\n                person_search\r\n              </span>\r\n              <p className=\"text-lg font-semibold\">\r\n                {t(\"InspectorList\")}\r\n              </p>\r\n            </div>\r\n            {inspectors.map((inspector, idx) => {\r\n              return (\r\n                <div key={idx} className=\"flex items-center w-full py-2 gap-1 border-b-2 border-secondary\">\r\n                  <Avatar className=\"custom-shadow ms-[-10px] me-2.5\">\r\n                    <AvatarImage\r\n                      src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector?.profile?.image?.path}`}\r\n                    />\r\n                    <AvatarFallback id={inspector.id.toString()}>\r\n                      {getInitials(inspector.profile.name)}\r\n                    </AvatarFallback>\r\n                  </Avatar>\r\n                  <p className=\"text-lg\">{inspector.profile.name}</p>\r\n                </div>\r\n              );\r\n            })}\r\n            <div className=\"flex items-center justify-between w-full text-muted-foreground\">\r\n              <p className=\"text-lg font-semibold\">\r\n                {t(\"Total\")}\r\n              </p>\r\n              <p className=\"text-lg font-semibold\">\r\n                {inspectors.length}\r\n              </p>\r\n            </div>\r\n          </HoverCardContent>\r\n        </HoverCard>\r\n      </CardContent>\r\n      <CardFooter className=\"p-0 gap-0\">\r\n        <div className=\"flex gap-2 items-center w-full\">\r\n          <div className=\"flex gap-1 text-primary items-center\">\r\n            <span className=\"material-symbols-outlined\">checklist</span>\r\n            <p className=\"text-xl font-semibold\">{items}</p>\r\n          </div>\r\n          <div className=\"flex gap-1 text-orange items-center\">\r\n            <span className=\"material-symbols-outlined\">close</span>\r\n            <p className=\"text-xl font-semibold\">{fails}</p>\r\n          </div>\r\n          <div className=\"flex gap-1 text-destructive items-center\">\r\n            <span className=\"material-symbols-outlined\">\r\n              error\r\n            </span>\r\n            <p className=\"text-xl font-semibold\">{defects}</p>\r\n          </div>\r\n          <div className=\"ml-auto items-center\">\r\n            <DropdownMenu>\r\n              <DropdownMenuTrigger onClick={(e) => e.stopPropagation()}>\r\n                <Button variant=\"ghost\" className=\"w-[45px] h-[45px]\">\r\n                  <span className=\"material-symbols-outlined items-center text-input\">\r\n                    more_vert\r\n                  </span>\r\n                </Button>\r\n              </DropdownMenuTrigger>\r\n\r\n              <DropdownMenuContent align=\"end\" className=\"p-0\">\r\n                <DropdownMenuItem onClick={(e) => {\r\n                  handleDetail()\r\n                }}>\r\n                  <h1>{t(\"Detail\")}</h1>\r\n                </DropdownMenuItem>\r\n                <DropdownMenuItem onClick={(e) => {\r\n                  e.stopPropagation()\r\n                  handleRemovePatrol()\r\n                }}>\r\n                  <h1 className=\"text-destructive cursor-pointer\">{t(\"Delete\")}</h1>\r\n                </DropdownMenuItem>\r\n              </DropdownMenuContent>\r\n            </DropdownMenu>\r\n          </div>\r\n          {isDialogOpen && (\r\n            <AlertCustom\r\n              title={a(\"PatrolRemoveConfirmTitle\")}\r\n              description={a(\"PatrolRemoveConfirmDescription\")}\r\n              primaryButtonText={t(\"Confirm\")}\r\n              primaryIcon=\"check\"\r\n              secondaryButtonText={t(\"Cancel\")}\r\n              backResult={handleDialogResult}\r\n            ></AlertCustom>\r\n          )}\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport function CreatePatrolCard() {\r\n  return (\r\n    <Card className=\"bg-accent-gradient border-none flex justify-center items-center min-h-[249px] w-full h-full hover:bg-accent-gradient-hover cursor-pointer custom-shadow\">\r\n      <span className=\"material-symbols-outlined text-card text-8xl\">\r\n        note_add\r\n      </span>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\patrol-checklist.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCustom' is defined but never used. Allowed unused vars must match /^_/u.","line":31,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from \"@/components/ui/accordion\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport {\r\n  IItem,\r\n  itemType,\r\n  IItemZone,\r\n  IPatrolChecklist,\r\n  IPatrolResult,\r\n  IUser,\r\n  IDefect,\r\n  IComment,\r\n} from \"@/app/type\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { fetchData, getInitials, getItemTypeVariant } from \"@/lib/utils\";\r\nimport { useParams } from \"next/navigation\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport { Skeleton } from \"./ui/skeleton\";\r\nimport { formatTime } from \"@/lib/utils\";\r\nimport AlertDefect from \"./alert-defect\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\n\r\ninterface PatrolChecklistProps {\r\n  user: IUser;\r\n  patrolChecklist: IPatrolChecklist;\r\n  disabled: boolean;\r\n  handleResult: (result: {\r\n    inspectorId: number;\r\n    itemId: number;\r\n    zoneId: number;\r\n    status: boolean;\r\n  }) => void;\r\n  results: Array<{ itemId: number; zoneId: number; status: boolean }>;\r\n  patrolResult: IPatrolResult[];\r\n  response?: (defect: IDefect) => void\r\n}\r\n\r\nexport default function PatrolChecklist({\r\n  user,\r\n  patrolChecklist,\r\n  disabled,\r\n  handleResult,\r\n  results = [],\r\n  patrolResult,\r\n  response,\r\n}: PatrolChecklistProps) {\r\n  const [mounted, setMounted] = useState<boolean>(false);\r\n  const [resultStatus, setResultStatus] = useState<{\r\n    [key: string]: boolean | null;\r\n  }>({});\r\n  const [comment, setComment] = useState<string>(\"\")\r\n  const [patrolResultState, setPatrolResultState] = useState<IPatrolResult[]>(patrolResult);\r\n  const a = useTranslations(\"Alert\");\r\n  const t = useTranslations(\"General\");\r\n  const s = useTranslations(\"Status\");\r\n  const z = useTranslations(\"Zone\");\r\n  const param = useParams()\r\n\r\n  const checkStatus = (itemId: number, zoneId: number) => {\r\n    const result = results.find(\r\n      (res) => res.itemId === itemId && res.zoneId === zoneId\r\n    );\r\n    return result ? result.status : null;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (results.length > 0) {\r\n      const initialStatus = results.reduce((acc, result) => {\r\n        acc[`${result.itemId}-${result.zoneId}`] = result.status;\r\n        return acc;\r\n      }, {} as { [key: string]: boolean | null });\r\n\r\n      setResultStatus(initialStatus);\r\n    }\r\n  }, [results]);\r\n\r\n  const handleCreateComment = async (\r\n    message: string,\r\n    patrolResultId: number,\r\n    supervisorId: number\r\n  ) => {\r\n\r\n    const data = {\r\n      message: message,\r\n      patrolResultId: patrolResultId,\r\n      supervisorId: supervisorId\r\n    };\r\n\r\n    try {\r\n      const comment = await fetchData(\r\n        \"post\",\r\n        `/patrol/${param.id}/comment`,\r\n        true,\r\n        data,\r\n      );\r\n      if (!message) {\r\n        toast({\r\n          variant: \"error\",\r\n          title: a(\"PatrolMissingCreateCommentTitle\"),\r\n          description: a(\"PatrolMissingCreateCommentDescription\"),\r\n        });\r\n      } else {\r\n        toast({\r\n          variant: \"default\",\r\n          title: a(\"PatrolCreateCommentTitle\"),\r\n          description: a(\"PatrolCreateCommentDescription\"),\r\n        });\r\n      }\r\n      fetchRealtimeComment(comment, patrolResultId)\r\n    } catch (error) {\r\n      console.error(\"Error creating Comment:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchRealtimeComment = (comment: IComment, patrolResultId: number) => {\r\n    setPatrolResultState(prevState => prevState.map(pr => {\r\n      if (pr.id === patrolResultId) {\r\n        return {\r\n          ...pr,\r\n          comments: pr.comments ? [...pr.comments, comment] : [comment]\r\n        };\r\n      }\r\n      return pr;\r\n    }));\r\n  }\r\n\r\n  const getExistingResult = (itemId: number, zoneId: number) => {\r\n    const result = patrolResult.find(\r\n      (res) => res.itemId === itemId && res.zoneId === zoneId\r\n    );\r\n    return result;\r\n  };\r\n\r\n  const fetchRealtimeData = (defect: IDefect) => {\r\n    response(defect)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (patrolResult && patrolChecklist.checklist.items) {\r\n      const initialStatus = patrolChecklist.checklist.items.reduce((acc, item) => {\r\n        item.itemZones.flatMap((itemZone: IItemZone) => {\r\n          const matchingResult = patrolResult.find((result) => {\r\n            return result.itemId === item.id && result.zoneId === itemZone.zone.id;\r\n          });\r\n          // ถ้ามี matchingResult และ status ไม่เป็น null ให้เก็บค่า status\r\n          if (matchingResult && matchingResult.status !== null) {\r\n            acc[`${item.id}-${itemZone.zone.id}`] = matchingResult.status;\r\n          }\r\n\r\n        });\r\n        return acc;\r\n      }, {} as { [key: string]: boolean | null });\r\n\r\n      setResultStatus(initialStatus); // เก็บค่า resultStatus ที่อัพเดตแล้ว\r\n    }\r\n  }, [patrolChecklist.checklist, patrolResult]);\r\n\r\n  const handleClick = (inspectorId: number, itemId: number, zoneId: number, status: boolean) => {\r\n    if (!disabled) {\r\n      handleResult({ inspectorId, itemId, zoneId, status });\r\n      setResultStatus((prev) => ({\r\n        ...prev,\r\n        [`${itemId}-${zoneId}`]: status,\r\n      }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (patrolChecklist) {\r\n      setMounted(true)\r\n    }\r\n  }, [])\r\n\r\n  if (!mounted) {\r\n    return (\r\n      <Skeleton className=\"flex h-16 items-center\">\r\n        <Skeleton className=\"flex h-10 ms-4 w-56 bg-card\"></Skeleton>\r\n      </Skeleton>\r\n    )\r\n  }\r\n\r\n  const checkResultStatusChecklist = (checklistId: number): boolean => {\r\n    const checklistResults = patrolResult.filter(result =>\r\n      patrolChecklist.checklist.id === checklistId &&\r\n      patrolChecklist.checklist.items.some(item =>\r\n        item.id === result.itemId &&\r\n        item.itemZones.some(itemZone => itemZone.zone.id === result.zoneId)\r\n      )\r\n    );\r\n\r\n    return checklistResults.every(result => result.status !== null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-card rounded-md px-6 py-4\">\r\n      <Accordion type=\"single\" collapsible defaultValue=\"item-1\">\r\n        <AccordionItem value=\"item-1\" className=\"border-none\">\r\n          <AccordionTrigger className=\"flex flex-row  hover:no-underline text-2xl font-bold p-0\">\r\n            <div key={patrolChecklist.checklist.id} className=\"flex flex-row items-center gap-3\">\r\n              {checkResultStatusChecklist(patrolChecklist.checklist.id) ?\r\n                null\r\n                :\r\n                <span className=\"material-symbols-outlined text-destructive\">error</span>\r\n              }\r\n              <p>{patrolChecklist.checklist.title}</p>\r\n            </div>\r\n          </AccordionTrigger>\r\n          <AccordionContent className=\"p-0\" >\r\n            <div className=\"flex items-center gap-2 mb-2 mt-2\">\r\n              <div className=\"flex items-center gap-1 text-muted-foreground\">\r\n                <span className=\"material-symbols-outlined\">person_search</span>\r\n                <p className=\"text-lg font-semibold\">{t(\"inspector\")}</p>\r\n              </div>\r\n              <div className=\"flex items-center gap-1\">\r\n                <Avatar className=\"custom-shadow h-[35px] w-[35px]\">\r\n                  <AvatarImage\r\n                    src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${patrolChecklist.inspector.profile.image?.path}`}\r\n                  />\r\n                  <AvatarFallback id={patrolChecklist.inspector.id.toString()}>\r\n                    {getInitials(patrolChecklist.inspector.profile.name)}\r\n                  </AvatarFallback>\r\n                </Avatar>\r\n\r\n                <p className=\"text-card-foreground text-lg\">{patrolChecklist.inspector.profile.name}</p>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              {patrolChecklist.checklist.items?.map((item: IItem) => (\r\n                <Accordion type=\"single\" collapsible>\r\n                  <AccordionItem value=\"item-1\" className=\"border-none\">\r\n                    <AccordionTrigger className=\"hover:no-underline\">\r\n                      <div className=\"flex items-center justify-between w-full pe-2\">\r\n                        <p className=\"text-xl font-semibold\">{item.name}</p>\r\n                        <BadgeCustom\r\n                          variant={getItemTypeVariant(item.type as itemType).variant}\r\n                          iconName={getItemTypeVariant(item.type as itemType).iconName}\r\n                          showIcon={true}\r\n                          shape=\"square\"\r\n                        >\r\n                          {s(item.type)}\r\n                        </BadgeCustom>\r\n                      </div>\r\n                    </AccordionTrigger>\r\n                    <AccordionContent className=\"flex flex-col gap-4\">\r\n                      {item.itemZones.flatMap((itemZones: IItemZone) => {\r\n                        const status = checkStatus(item.id, itemZones.zone.id);\r\n                        const existingResult = getExistingResult(\r\n                          item.id,\r\n                          itemZones.zone.id\r\n                        );\r\n                        return (\r\n                          <div key={itemZones.zone.id} className=\"bg-background rounded-md px-4 py-2\">\r\n                            <div className=\"flex flex-row justify-between items-center\">\r\n                              <div className=\"flex flex-col\">\r\n                                <div className=\"flex flex-row items-center gap-2\">\r\n                                  <div className=\"flex flex-row items-center gap-1\">\r\n                                    <span className=\"material-symbols-outlined text-muted-foreground\">\r\n                                      location_on\r\n                                    </span>\r\n                                    <p className=\"font-semibold text-base text-muted-foreground\">\r\n                                      {t(\"Zone\")}\r\n                                    </p>\r\n                                  </div>\r\n                                  <p className=\"text-base\">{z(itemZones.zone.name)}</p>\r\n                                </div>\r\n\r\n                                <div className=\"flex flex-row items-center gap-2\">\r\n                                  <div className=\"flex items-center text-muted-foreground gap-1\">\r\n                                    <span className=\"material-symbols-outlined\">engineering</span>\r\n                                    <p className=\"text-lg font-semibold\">{t(\"supervisor\")}</p>\r\n                                  </div>\r\n\r\n                                  <div className=\"flex items-center gap-1\">\r\n                                    <Avatar className=\"custom-shadow h-[35px] w-[35px]\">\r\n                                      <AvatarImage\r\n                                        src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${itemZones.zone.supervisor.profile.image?.path}`}\r\n                                      />\r\n                                      <AvatarFallback id={itemZones.zone.supervisor.id.toString()}>\r\n                                        {getInitials(itemZones.zone.supervisor.profile.name)}\r\n                                      </AvatarFallback>\r\n                                    </Avatar>\r\n                                    <p className=\"text-card-foreground text-lg\">{itemZones.zone.supervisor.profile.name}</p>\r\n                                  </div>\r\n\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"flex gap-2\">\r\n                                <Button\r\n                                  variant={\r\n                                    resultStatus[`${item.id}-${itemZones.zone.id}`] ===\r\n                                      true\r\n                                      ? \"success\"\r\n                                      : \"secondary\"\r\n                                  }\r\n                                  className={`w-[155px] ${resultStatus === null\r\n                                    ? \"bg-secondary text-card-foreground\"\r\n                                    : \"\"\r\n                                    }\r\n                                                                    ${existingResult?.status ===\r\n                                      true\r\n                                      ? \"bg-[#27BC31] hover:bg-[#27BC31]\"\r\n                                      : \"\"\r\n                                    }\r\n                                                                    ${existingResult?.status ===\r\n                                      false\r\n                                      ? \"bg-secondary hover:bg-secondary\"\r\n                                      : \"\"\r\n                                    }\r\n                                                                    ${disabled\r\n                                      ? \" cursor-not-allowed opacity-50\"\r\n                                      : \"\"\r\n                                    }\r\n                                                                    `}\r\n                                  onClick={() => {\r\n                                    if (!existingResult.status === true || existingResult.status === null) {\r\n                                      handleClick(user.id, item.id, itemZones.zone.id, true);\r\n                                    }\r\n                                  }}\r\n                                >\r\n                                  <span className=\"material-symbols-outlined\">\r\n                                    check\r\n                                  </span>\r\n                                  <p>{t(\"Yes\")}</p>\r\n                                </Button>\r\n                                <Button\r\n                                  variant={\r\n                                    resultStatus[`${item.id}-${itemZones.zone.id}`] ===\r\n                                      false\r\n                                      ? \"fail\"\r\n                                      : \"secondary\"\r\n                                  }\r\n                                  className={`w-[155px] ${resultStatus === null\r\n                                    ? \"bg-secondary text-card-foreground\"\r\n                                    : \"\"\r\n                                    }\r\n                                                                    ${existingResult?.status ===\r\n                                      false\r\n                                      ? \"bg-destructive hover:bg-destructive\"\r\n                                      : \"\"\r\n                                    }\r\n                                                                    ${existingResult?.status ===\r\n                                      true\r\n                                      ? \"bg-secondary hover:bg-secondary\"\r\n                                      : \"\"\r\n                                    }\r\n                                                                    ${disabled\r\n                                      ? \" cursor-not-allowed opacity-50\"\r\n                                      : \"\"\r\n                                    }\r\n                                                                    `}\r\n                                  onClick={() => {\r\n                                    if (!existingResult.status === false || existingResult.status === null) {\r\n                                      handleClick(user.id, item.id, itemZones.zone.id, false);\r\n                                    }\r\n                                  }}\r\n                                >\r\n                                  <span className=\"material-symbols-outlined\">\r\n                                    close\r\n                                  </span>\r\n                                  <p>{t(\"No\")}</p>\r\n                                </Button>\r\n                              </div>\r\n                            </div>\r\n\r\n                            {(status === false ||\r\n                              existingResult?.status === false) && (\r\n                                <div className=\"flex flex-col items-start gap-4 mt-2\">\r\n                                  <AlertDefect\r\n                                    item={item}\r\n                                    type={\"report\"}\r\n                                    result={existingResult}\r\n                                    patrolResults={patrolResult}\r\n                                    response={(defect: IDefect) => (\r\n                                      fetchRealtimeData(defect)\r\n                                    )}\r\n                                  />\r\n\r\n                                  <div className=\"flex flex-col items-start w-full gap-2\">\r\n                                    {patrolResultState.flatMap(pr => pr.comments ?? []).map((comment: IComment) =>\r\n                                      comment.patrolResultId === existingResult.id ?\r\n                                        (\r\n                                          <div key={comment.timestamp} className=\"flex flex-row items-center bg-secondary rounded-md w-full px-6 py-4 gap-2\" >\r\n                                            <div className={`flex justify-center items-center w-3 h-3 rounded-full ${!comment.status ? 'bg-primary' : 'bg-green'}`} />\r\n                                            <p className=\"text-muted-foreground text-xl font-semibold\">{formatTime(comment.timestamp)}</p>\r\n                                            <div className=\"flex items-end\">\r\n                                              <p className=\"text-xl\">{comment.message}</p>\r\n                                            </div>\r\n                                          </div>\r\n                                        )\r\n                                        : null\r\n                                    )}\r\n                                    <Textarea\r\n                                      className=\"min-h-[120px] bg-secondary border-none text-xl\"\r\n                                      placeholder={`${t(\"Comment\")}...`}\r\n                                      disabled={disabled}\r\n                                      value={comment}\r\n                                      onChange={(e) => setComment(e.target.value)}\r\n                                    />\r\n                                  </div>\r\n\r\n                                  <div className=\"flex justify-end w-full mt-2\">\r\n                                    <Button\r\n                                      variant={\"primary\"}\r\n                                      size={\"lg\"}\r\n                                      disabled={disabled}\r\n                                      onClick={() => {\r\n                                        handleCreateComment(comment, existingResult.id, itemZones.zone.supervisor.id)\r\n                                        setComment(\"\")\r\n                                      }}\r\n                                    >\r\n                                      <span className=\"material-symbols-outlined me-2\">\r\n                                        send\r\n                                      </span>\r\n                                      {t(\"Send\")}\r\n                                    </Button>\r\n                                  </div>\r\n                                </div>\r\n                              )}\r\n                          </div>\r\n                        )\r\n                      })}\r\n                    </AccordionContent>\r\n                  </AccordionItem>\r\n                </Accordion>\r\n              ))}\r\n            </div>\r\n          </AccordionContent>\r\n        </AccordionItem>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\patrol-timer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":40,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\nimport { useEffect, useState } from \"react\";\r\nimport { Skeleton } from \"./ui/skeleton\";\r\n\r\ninterface TimerProps {\r\n    days: string;\r\n    hours: string;\r\n    minutes: string;\r\n    seconds: string;\r\n}\r\n\r\nconst getTimeElapsed = (startTime: number): TimerProps => {\r\n    const difference = new Date().getTime() - startTime;\r\n\r\n    if (difference <= 0) {\r\n        return { days: \"00\", hours: \"00\", minutes: \"00\", seconds: \"00\" };\r\n    }\r\n\r\n    const days = String(Math.floor(difference / (1000 * 60 * 60 * 24))).padStart(2, '0');\r\n    const hours = String(Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))).padStart(2, '0');\r\n    const minutes = String(Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60))).padStart(2, '0');\r\n    const seconds = String(Math.floor((difference % (1000 * 60)) / 1000)).padStart(2, '0');\r\n\r\n    return { days, hours, minutes, seconds };\r\n};\r\n\r\nconst formatDuration = (duration: string): TimerProps => {\r\n    const match = duration.match(/(?:(\\d+)d\\s*)?(?:(\\d+)h\\s*)?(?:(\\d+)m\\s*)?(?:(\\d+)s)?/);\r\n\r\n    const days = match?.[1] ? match[1].padStart(2, '0') : \"00\";\r\n    const hours = match?.[2] ? match[2].padStart(2, '0') : \"00\";\r\n    const minutes = match?.[3] ? match[3].padStart(2, '0') : \"00\";\r\n    const seconds = match?.[4] ? match[4].padStart(2, '0') : \"00\";\r\n\r\n    return { days, hours, minutes, seconds };\r\n};\r\n\r\nconst PatrolTimer = ({ launchDate, patrolStatus, patrolDuration }: { launchDate: string, patrolStatus: string, patrolDuration: string }) => {\r\n    const [timeElapsed, setTimeElapsed] = useState<TimerProps>({ days: \"00\", hours: \"00\", minutes: \"00\", seconds: \"00\" });\r\n    const [startTime, setStartTime] = useState<number>(new Date(launchDate).getTime());\r\n    const [mounted, setMounted] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        setMounted(true);\r\n        setStartTime(new Date(launchDate).getTime());\r\n\r\n        if (patrolStatus === \"completed\") {\r\n            setTimeElapsed(formatDuration(patrolDuration));\r\n            return; // หยุดที่นี่เมื่อ patrolStatus เป็น completed\r\n        }\r\n\r\n        if (patrolStatus === \"on_going\") {\r\n            setTimeElapsed(getTimeElapsed(new Date(launchDate).getTime()));\r\n\r\n            const interval = setInterval(() => {\r\n                setTimeElapsed(getTimeElapsed(new Date(launchDate).getTime()));\r\n            }, 1000);\r\n\r\n            return () => clearInterval(interval);\r\n        }\r\n    }, [patrolStatus, launchDate, patrolDuration]);\r\n\r\n    if (!mounted) {\r\n        return <Skeleton />;\r\n    }\r\n\r\n    return (\r\n        <div className='flex flex-row items-center text-2xl font-semibold gap-2'>\r\n            {patrolStatus === \"on_going\" ? (\r\n                <>\r\n                    <span className=\"material-symbols-outlined text-card-foreground w-[22px] h-[22px]\">\r\n                        timer\r\n                    </span>\r\n                    {timeElapsed.days !== \"00\" && <p>{timeElapsed.days} Days</p>}\r\n                    {(timeElapsed.hours !== \"00\" || timeElapsed.days !== \"00\") && <p>{timeElapsed.hours} Hours</p>}\r\n                    <p>{timeElapsed.minutes} Minutes</p>\r\n                    <p>{timeElapsed.seconds} Seconds</p>\r\n                </>\r\n            ) : patrolStatus === \"completed\" && patrolDuration ? (\r\n                <>\r\n                    <span className=\"material-symbols-outlined text-card-foreground w-[22px] h-[22px]\">\r\n                        timer\r\n                    </span>\r\n                    {formatDuration(patrolDuration).days !== \"00\" && <p>{formatDuration(patrolDuration).days} Days</p>}\r\n                    {(formatDuration(patrolDuration).hours !== \"00\" || formatDuration(patrolDuration).days !== \"00\") && <p>{formatDuration(patrolDuration).hours} Hours</p>}\r\n                    <p>{formatDuration(patrolDuration).minutes} Minutes</p>\r\n                    <p>{formatDuration(patrolDuration).seconds} Seconds</p>\r\n                </>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PatrolTimer;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\profile-dropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\report-defect.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IImage' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IZone' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { defectStatus, IDefect, IImage, IZone } from \"@/app/type\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport Image from \"next/image\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from \"@/components/ui/accordion\";\r\nimport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious, type CarouselApi } from \"@/components/ui/carousel\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { fetchData, formatPatrolId, formatTime, getDefectStatusVariant, getInitials, getItemTypeVariant } from \"@/lib/utils\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\nimport AlertDefect from \"./alert-defect\";\r\nimport { useLocale } from \"next-intl\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport Map from \"@/components/map\";\r\nimport { AlertCustom } from \"./alert-custom\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\ninterface ReportDefectProps {\r\n  defect: IDefect,\r\n  page: \"patrol-view-detail\" | \"patrol-defect\" | \"patrol-view-report\"\r\n  response: (defect: IDefect) => void\r\n}\r\n\r\nexport default function ReportDefect({ defect, page, response }: ReportDefectProps) {\r\n  const s = useTranslations(\"Status\");\r\n  const t = useTranslations(\"General\")\r\n  const a = useTranslations(\"Alert\")\r\n\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [pendingAction, setPendingAction] = useState<(() => void) | null>(null);\r\n\r\n  const handleDialogResult = (result: boolean) => {\r\n    setIsDialogOpen(false);\r\n    if (result && pendingAction) {\r\n      pendingAction(); // Execute the pending action\r\n      setPendingAction(null); // Clear the pending action\r\n    }\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n\r\n  const beforeImage = defect.images\r\n    .sort((a, b) => b.image.id - a.image.id) // เรียงจาก id ล่าสุดไปเก่าสุด\r\n    .filter((image) => image.image.user.id === defect.userId)\r\n    .map((image: any) => ({\r\n      path: image.image.path,\r\n    })) || null;\r\n\r\n  const afterImage = defect.images\r\n    .sort((a, b) => b.image.id - a.image.id) // เรียงจาก id ล่าสุดไปเก่าสุด\r\n    .filter((image) => image.image.user.id !== defect.userId)\r\n    .map((image: any) => ({\r\n      path: image.image.path,\r\n    })) || null;\r\n\r\n  const [isBeforeCarouselOpen, setIsBeforeCarouselOpen] = useState(false);\r\n  const [isAfterCarouselOpen, setIsAfterCarouselOpen] = useState(false);\r\n  const [beforeSlideIndex, setBeforeSlideIndex] = useState(0);\r\n  const [afterSlideIndex, setAfterSlideIndex] = useState(0);\r\n\r\n  const [alertBoxTitle, setAlertBoxTitle] = useState();\r\n  const [alertBoxDescription, setAlertBoxDescription] = useState();\r\n  const router = useRouter();\r\n  const locale = useLocale();\r\n\r\n  // Handle before image click\r\n  const handleBeforeImageClick = (index: number) => {\r\n    setBeforeSlideIndex(index);\r\n    setIsBeforeCarouselOpen(true);\r\n  };\r\n\r\n  // Handle after image click\r\n  const handleAfterImageClick = (index: number) => {\r\n    setAfterSlideIndex(index);\r\n    setIsAfterCarouselOpen(true);\r\n  };\r\n\r\n  // Close before carousel\r\n  const handleCloseBeforeCarousel = () => {\r\n    setIsBeforeCarouselOpen(false);\r\n    setBeforeSlideIndex(0);\r\n  };\r\n\r\n  // Close after carousel\r\n  const handleCloseAfterCarousel = () => {\r\n    setIsAfterCarouselOpen(false);\r\n    setAfterSlideIndex(0);\r\n  };\r\n  const handleReworkOrVerifyDefect = async (\r\n    id: number,\r\n    status: defectStatus,\r\n    supervisorId: number\r\n  ) => {\r\n    let title\r\n    let description\r\n    if (status === 'pending_inspection') {\r\n      title = 'ConfirmReworkTitle'\r\n      description = 'ConfirmReworkDescription'\r\n    } else if (status === 'completed') {\r\n      title = 'ConfirmCompleteTitle'\r\n      description = 'ConfirmCompleteDescription'\r\n    }\r\n\r\n    setPendingAction(() => () => {\r\n      reworkOrVerifyDefect(id, status, supervisorId)\r\n    });\r\n    setAlertBoxTitle(title)\r\n    setAlertBoxDescription(description)\r\n    handleOpenDialog();\r\n  };\r\n\r\n  const reworkOrVerifyDefect = async (\r\n    id: number,\r\n    status: defectStatus,\r\n    supervisorId: number\r\n  ) => {\r\n    const data = {\r\n      status: status,\r\n      supervisorId: supervisorId\r\n    }\r\n\r\n    try {\r\n      let title\r\n      let description\r\n      if (data.status === 'pending_inspection') {\r\n        title = 'ReworkDefectTitle'\r\n        description = 'ReworkDefectDescription'\r\n      } else if (status === 'completed') {\r\n        title = 'CompleteDefectTitle'\r\n        description = 'CompleteDefectDescription'\r\n      }\r\n      const updateStatusDefect = await fetchData(\r\n        \"put\",\r\n        `/defect/${id}`,\r\n        true,\r\n        data,\r\n      );\r\n      response(updateStatusDefect)\r\n      toast({\r\n        variant: \"success\",\r\n        title: a(title),\r\n        description: a(description),\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error creating defect:\", error);\r\n    }\r\n  }\r\n\r\n  const [api, setApi] = useState<CarouselApi>()\r\n\r\n  useEffect(() => {\r\n    if (!api) {\r\n      return\r\n    }\r\n    api.on(\"select\", () => {\r\n      setAfterSlideIndex(api.selectedScrollSnap())\r\n      setBeforeSlideIndex(api.selectedScrollSnap())\r\n    })\r\n  }, [api])\r\n\r\n  const fetchRealtimeData = (defect: IDefect) => {\r\n    response(defect)\r\n  }\r\n\r\n  const navigateToPatrol = (patrolId: number) => {\r\n    router.push(`/${locale}/patrol/${patrolId}/detail`)\r\n  }\r\n\r\n  return (\r\n    <Accordion type=\"single\" collapsible>\r\n      <AccordionItem\r\n        value=\"item-1\"\r\n        className=\"bg-card rounded-md w-full px-4 py-2 border-none\"\r\n      >\r\n        <AccordionTrigger className=\"hover:no-underline\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <span className=\"material-symbols-outlined text-muted-foreground cursor-default \">\r\n              schedule\r\n            </span>\r\n            <span className=\"text-lg font-bold text-muted-foreground cursor-default \">\r\n              {formatTime(defect.startTime)}\r\n            </span>\r\n            <h2 className=\"text-lg font-bold text-card-foreground cursor-default \">\r\n              {defect.name}\r\n            </h2>\r\n          </div>\r\n        </AccordionTrigger>\r\n\r\n        <div className=\"flex justify-between items-center mb-4 mt-2\">\r\n          <div className=\"flex space-x-2\">\r\n            {(() => {\r\n              const { iconName, variant } = getDefectStatusVariant(defect.status);\r\n              return (\r\n                <BadgeCustom\r\n                  variant={variant}\r\n                  showIcon={true}\r\n                  iconName={iconName}\r\n                >\r\n                  {s(defect.status)}\r\n                </BadgeCustom>\r\n              );\r\n            })()}\r\n            {(() => {\r\n              const { iconName, variant } = getItemTypeVariant(defect.type);\r\n              return (\r\n                <BadgeCustom\r\n                  variant={variant}\r\n                  showIcon={true}\r\n                  shape={\"square\"}\r\n                  iconName={iconName}\r\n                >\r\n                  {s(defect.type)}\r\n                </BadgeCustom>\r\n              );\r\n            })()}\r\n          </div>\r\n        </div>\r\n\r\n        {/* หลังจากกดเปิด */}\r\n        <AccordionContent>\r\n          <div className=\"flex flex-col p-1\">\r\n            {/* supervisor */}\r\n            <div className=\"flex flex-row justify-between w-full h-9 mb-4\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"flex items-center gap-1 text-muted-foreground\">\r\n                  <span className=\"material-symbols-outlined\">engineering</span>\r\n                  <p className=\"text-lg font-semibold\">{t(\"supervisor\")}</p>\r\n                </div>\r\n                <div className=\"flex items-center gap-1\">\r\n                  <Avatar className=\"custom-shadow h-[35px] w-[35px]\">\r\n                    <AvatarImage\r\n                      src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${defect.patrolResult.itemZone.zone.supervisor.profile.image?.path}`}\r\n                    />\r\n                    <AvatarFallback id={defect.patrolResult.itemZone.zone.supervisor.id.toString()}>\r\n                      {getInitials(defect.patrolResult.itemZone.zone.supervisor.profile.name)}\r\n                    </AvatarFallback>\r\n                  </Avatar>\r\n\r\n                  <p className=\"text-card-foreground text-lg\">{defect.patrolResult.itemZone.zone.supervisor.profile.name}</p>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                {defect.status === \"reported\" as defectStatus && (\r\n                  <AlertDefect\r\n                    defect={defect}\r\n                    type={page == \"patrol-view-detail\" ? \"report\" : \"edit\"}\r\n                    response={(defect: IDefect) => fetchRealtimeData(defect)}\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Patrol */}\r\n            {page === \"patrol-defect\" && (<div className=\"flex flex-col mb-4\">\r\n              <div className=\"flex flex-row mb-1\">\r\n                <div className=\"flex flex-row pr-2 items-center pt-1\">\r\n                  <span className=\"material-symbols-outlined text-muted-foreground cursor-default user-select-none mr-1\">\r\n                    task\r\n                  </span>\r\n                  <p className=\"text-base font-semibold text-muted-foreground  cursor-default user-select-none\">\r\n                    Patrol\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <Button className=\"w-fit h-fit bg-secondary\" variant=\"ghost\" onClick={() => navigateToPatrol(defect.patrolResult.patrol.id)}>\r\n                <div className=\"flex flex-col items-start py-4 px-6\">\r\n                  <p className=\"text-xl font-semibold text-card-foreground mb-2 cursor-default user-select-none \">\r\n                    {defect.patrolResult.patrol.preset.title}\r\n                  </p>\r\n\r\n                  <div className=\"flex flex-row items-center\">\r\n                    <span className=\"material-symbols-outlined text-muted-foreground cursor-default user-select-none pr-2\">\r\n                      description\r\n                    </span>\r\n                    <p className=\"text-muted-foreground cursor-default user-select-none\">\r\n                      {formatPatrolId(defect.patrolResult.patrol.id)}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </Button>\r\n            </div>)}\r\n\r\n            {/* Detail */}\r\n            <div className=\"flex flex-col mb-4\">\r\n              <div className=\"flex flex-row mb-1\">\r\n                <div className=\"flex flex-row pr-2 items-center pt-1\">\r\n                  <span className=\"material-symbols-outlined text-muted-foreground cursor-default user-select-none mr-1\">\r\n                    data_info_alert\r\n                  </span>\r\n                  <p className=\"text-base font-semibold text-muted-foreground cursor-default user-select-none\">\r\n                    Detail\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <Textarea\r\n                  className=\"text-xl text-text w-full h-40 border-none bg-secondary pointer-events-none\"\r\n                  placeholder=\"Description\"\r\n                  value={defect.description}\r\n                  readOnly\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Zone */}\r\n            <div className=\"flex flex-col mb-4\">\r\n              <div className=\"flex flex-row mb-1\">\r\n                <div className=\"flex flex-row pr-2 items-center pt-1\">\r\n                  <span className=\"material-symbols-outlined text-muted-foreground cursor-default user-select-none mr-1\">\r\n                    location_on\r\n                  </span>\r\n                  <p className=\"text-base font-semibold text-muted-foreground cursor-default user-select-none\">\r\n                    Zone\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"p-2 rounded-md bg-secondary map-container cursor-default user-select-none \">\r\n                <Map disable={true} initialSelectedZones={[defect.patrolResult.zoneId]} />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Before After */}\r\n            <div className=\"flex w-full space-x-4 mb-4\">\r\n              <div className=\"flex space-x-4 w-full\">\r\n                {/* before */}\r\n                <div className=\"w-full\">\r\n                  <div className=\"flex items-center\">\r\n                    <p className=\"text-base font-semibold text-muted-foreground mb-1 cursor-default user-select-none\">\r\n                      Before\r\n                    </p>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <div className=\"p-4 rounded-md bg-secondary h-40 flex items-center justify-center cursor-default user-select-none\" onClick={() => handleBeforeImageClick(0)}>\r\n                      {beforeImage && beforeImage.length > 0 && beforeImage[0].path ? (\r\n                        <Image\r\n                          src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${beforeImage[0].path}`}\r\n                          alt=\"First Image\"\r\n                          width={270}\r\n                          height={250}\r\n                          className=\"object-contain cursor-pointer w-full h-full\"\r\n                          unoptimized\r\n                        />\r\n                      ) : (\r\n                        <p>Waiting for the results.</p>\r\n                      )}\r\n                    </div>\r\n                    {isBeforeCarouselOpen && beforeImage && beforeImage?.length > 0 && (\r\n                      <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n                        <div className=\"relative\">\r\n                          <Carousel setApi={setApi} className=\"w-full max-w-screen-lg\">\r\n                            <CarouselContent>\r\n                              {Array.from({ length: beforeImage.length }).map((_, index) => (\r\n                                <CarouselItem key={index}>\r\n                                  <div className=\"flex justify-center\">\r\n                                    <Card>\r\n                                      <CardContent className=\"flex items-center justify-center h-[600px] w-[900px] overflow-hidden p-4\">\r\n                                        <div className=\"flex items-center justify-center h-full w-full\">\r\n                                          <Image\r\n                                            className=\"object-contain w-full h-full\"\r\n                                            src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${beforeImage[index].path}`}\r\n                                            alt={`${beforeImage[index].path}`}\r\n                                            width={800}\r\n                                            height={500}\r\n                                            priority\r\n                                            unoptimized\r\n                                          />\r\n                                        </div>\r\n                                      </CardContent>\r\n                                    </Card>\r\n                                  </div>\r\n                                </CarouselItem>\r\n                              ))}\r\n                            </CarouselContent>\r\n                            <CarouselPrevious />\r\n                            <CarouselNext />\r\n                          </Carousel>\r\n                          <div className=\"flex justify-center mt-4\">\r\n                            {beforeImage.map((_, index) => (\r\n                              <button\r\n                                key={index}\r\n                                onClick={() => {\r\n                                  setBeforeSlideIndex(index);\r\n                                }}\r\n                                disabled\r\n                                className={`h-3 w-3 rounded-full mx-1 ${beforeSlideIndex === index ? 'bg-white' : 'bg-gray-400'}`}\r\n                                aria-label={`Slide ${index + 1}`}\r\n                              />\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                        <button onClick={handleCloseBeforeCarousel} className=\"absolute top-4 right-4 text-white\">\r\n                          Close\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* after */}\r\n                <div className=\"w-full\">\r\n                  <div className=\"flex items-center\">\r\n                    <p className=\"text-base font-semibold text-muted-foreground mb-1 cursor-default user-select-none\">\r\n                      After\r\n                    </p>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <div className=\"p-4 rounded-md bg-secondary h-40 flex items-center justify-center cursor-default user-select-none\" onClick={() => handleAfterImageClick(0)}>\r\n                      {afterImage && afterImage.length > 0 && afterImage[0].path ? (\r\n                        <Image\r\n                          src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${afterImage[0].path}`}\r\n                          alt=\"First Image\"\r\n                          width={270}\r\n                          height={250}\r\n                          className=\"object-contain cursor-pointer w-full h-full\"\r\n                          unoptimized\r\n                        />\r\n                      ) : (\r\n                        <p>Waiting for the results.</p>\r\n                      )}\r\n                    </div>\r\n                    {isAfterCarouselOpen && afterImage && afterImage?.length > 0 && (\r\n                      <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n                        <div className=\"relative\">\r\n                          <Carousel setApi={setApi} className=\"w-full max-w-screen-lg\">\r\n                            <CarouselContent>\r\n                              {Array.from({ length: afterImage.length }).map((_, index) => (\r\n                                <CarouselItem key={index}>\r\n                                  <div className=\"flex justify-center\">\r\n                                    <Card>\r\n                                      <CardContent className=\"flex items-center justify-center h-[600px] w-[900px] overflow-hidden p-4\">\r\n                                        <div className=\"flex items-center justify-center h-full w-full\">\r\n                                          <Image\r\n                                            className=\"object-contain w-full h-full\"\r\n                                            src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${afterImage[index].path}`}\r\n                                            alt={`${afterImage[index].path}`}\r\n                                            width={800}\r\n                                            height={500}\r\n                                            priority\r\n                                            unoptimized\r\n                                          />\r\n                                        </div>\r\n                                      </CardContent>\r\n                                    </Card>\r\n                                  </div>\r\n                                </CarouselItem>\r\n                              ))}\r\n                            </CarouselContent>\r\n                            <CarouselPrevious />\r\n                            <CarouselNext />\r\n                          </Carousel>\r\n                          <div className=\"flex justify-center mt-4\">\r\n                            {afterImage.map((_, index) => (\r\n                              <button\r\n                                key={index}\r\n                                onClick={() => {\r\n                                  setAfterSlideIndex(index);\r\n                                }}\r\n                                disabled\r\n                                className={`h-3 w-3 rounded-full mx-1 ${afterSlideIndex === index ? 'bg-white' : 'bg-gray-400'}`}\r\n                                aria-label={`Slide ${index + 1}`}\r\n                              />\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                        <button onClick={handleCloseAfterCarousel} className=\"absolute top-4 right-4 text-white\">\r\n                          Close\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n\r\n            {isDialogOpen && (\r\n              <AlertCustom\r\n                title={a(alertBoxTitle)}\r\n                description={a(alertBoxDescription)}\r\n                primaryButtonText={t(\"Confirm\")}\r\n                primaryIcon=\"check\"\r\n                primaryVariant=\"destructive\"\r\n                secondaryButtonText={t(\"Cancel\")}\r\n                backResult={handleDialogResult}\r\n              ></AlertCustom>\r\n            )}\r\n            <div>\r\n              {defect.status === \"resolved\" && page === \"patrol-defect\" && (\r\n                <div className=\"flex space-x-2 justify-end\">\r\n                  <Button variant=\"destructive\" size={\"lg\"} onClick={() => handleReworkOrVerifyDefect(defect.id, \"pending_inspection\", defect.patrolResult.itemZone.zone.supervisor.id)}>\r\n                    <span className=\"material-symbols-outlined mr-2 text-[20px]\">\r\n                      cancel\r\n                    </span>\r\n                    Rework\r\n                  </Button>\r\n                  <Button variant=\"success\" size={\"lg\"} onClick={() => handleReworkOrVerifyDefect(defect.id, \"completed\", defect.patrolResult.itemZone.zone.supervisor.id)}>\r\n                    <span className=\"material-symbols-outlined mr-2 text-[20px]\">\r\n                      check_circle\r\n                    </span>\r\n                    Verify\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </AccordionContent>\r\n      </AccordionItem>\r\n    </Accordion >\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\socket-indicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\socket-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\tab-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\textfield.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":61,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":63,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\user-dropdown.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { IUser } from \"@/app/type\";\r\nimport { getInitials } from \"@/lib/utils\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\n\r\ninterface UserDropdownProps {\r\n  userData: IUser[];\r\n  onUserSelect: (selectUser: IUser) => void;\r\n  selectUser: IUser | null;\r\n  color?: string;\r\n}\r\n\r\nconst UserDropdown: React.FC<UserDropdownProps> = ({ userData, onUserSelect, selectUser, color = \"card\", }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleSelectUser = (user: IUser) => {\r\n    onUserSelect(user);\r\n    setIsOpen(false);\r\n  };\r\n  const t = useTranslations(\"General\");\r\n\r\n  return (\r\n    <DropdownMenu onOpenChange={(open) => setIsOpen(open)}>\r\n      <DropdownMenuTrigger className=\"w-[300px] h-[65px]\">\r\n        <Button\r\n          variant=\"outline\"\r\n          className={`w-full h-full justify-between bg-${color} hover:bg-background border-none`}\r\n        >\r\n          <div className=\"flex items-center gap-2\">\r\n            {selectUser && (\r\n              <Avatar>\r\n                <AvatarImage\r\n                  src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${selectUser?.profile?.image?.path}`}\r\n                />\r\n                <AvatarFallback id={selectUser.id.toString()}>\r\n                  {getInitials(selectUser.profile.name)}\r\n                </AvatarFallback>\r\n              </Avatar>\r\n            )}\r\n            <p className=\"font-normal text-muted-foreground\">\r\n              {selectUser ? selectUser.profile.name : t(\"SelectAUser\")}\r\n            </p>\r\n          </div>\r\n          <span\r\n            className={`material-symbols-outlined text-muted-foreground inline-block transition-transform duration-300 ${isOpen ? \"rotate-180\" : \"rotate-0\"\r\n              }`}\r\n          >\r\n            expand_more\r\n          </span>\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent className={`p-0`}>\r\n        <ScrollArea className=\"w-full h-72 rounded-md\">\r\n          {userData.map((user) => {\r\n            return (\r\n              <DropdownMenuItem\r\n                key={user.id}\r\n                className=\"flex items-center w-[300px] gap-2\"\r\n                onClick={() => handleSelectUser(user)}\r\n              >\r\n                <Avatar>\r\n                  <AvatarImage\r\n                    src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${user?.profile?.image?.path}`}\r\n                  />\r\n                  <AvatarFallback id={user.id.toString()}>\r\n                    {getInitials(user.profile.name)}\r\n                  </AvatarFallback>\r\n                </Avatar>\r\n                <p className=\"font-normal text-lg text-muted-foreground\">\r\n                  {user.profile.name}\r\n                </p>\r\n              </DropdownMenuItem>\r\n            );\r\n          })}\r\n        </ScrollArea>\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n};\r\n\r\nexport default UserDropdown;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\constants\\menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\context\\patrol-context.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IPatrolChecklist' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Loading' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Skeleton' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ReactNode' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useDebugValue' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":84,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":97},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'boolean' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IpVersion' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCustom' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'itemZone' is defined but never used. Allowed unused args must match /^_/u.","line":78,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":48}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'zone' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":309,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":309,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":460,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":460,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IDefect, IPatrol, IPatrolChecklist, IPatrolResult, IUser } from \"@/app/type\";\r\nimport Loading from \"@/components/loading\";\r\nimport { useSocket } from \"@/components/socket-provider\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { fetchData } from \"@/lib/utils\";\r\nimport { useParams } from \"next/navigation\";\r\nimport React, { createContext, useContext, useState, ReactNode, useEffect, useRef, useDebugValue } from \"react\";\r\nimport { boolean, IpVersion } from \"zod\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { useTranslations } from \"next-intl\";\r\n\r\ninterface PatrolContextProps {\r\n    patrol: IPatrol | null;\r\n    patrolResults: IPatrolResult[];\r\n    results: IPatrolResult[];\r\n    otherResults: IPatrolResult[];\r\n    user: IUser | null;\r\n    lock: boolean;\r\n    isAlertOpen: boolean;\r\n    handleResult: (result: IPatrolResult) => void;\r\n    mergeResults: (newResults: IPatrolResult[]) => void;\r\n    toggleLock: () => void;\r\n    handleStartPatrol: () => void;\r\n    handleFinishPatrol: () => void;\r\n    fetchRealtimeData: (defect: IDefect, actionType: string) => void;\r\n    calculateProgress: () => number;\r\n    handleOpenDialog: () => void\r\n    handleCloseDialog: () => void\r\n    itemCounts: (patrol: IPatrol, results: IPatrolResult[]) => void\r\n    mounted: boolean;\r\n    canFinish: boolean;\r\n    defects: IDefect[]\r\n    countItems: number\r\n    countFails: number\r\n    countDefects: number\r\n    patrolUser: IUser[]\r\n    isHovered: boolean\r\n    handleMouseLeave: () => void\r\n    handleMouseEnter: () => void\r\n    formatZone: (patrol: IPatrol) => string\r\n    formatTimeDate: (dateStr: string) => string\r\n    formatId: (id: number) => string\r\n    formatDate: (dateStr: string) => string\r\n\r\n}\r\n\r\nconst PatrolContext = createContext<PatrolContextProps | undefined>(undefined);\r\n\r\nexport const PatrolProvider: React.FC<{ children: React.ReactNode }> = ({\r\n    children,\r\n}) => {\r\n    const [patrol, setPatrol] = useState<IPatrol | null>(null);\r\n    const [results, setResults] = useState<IPatrolResult[]>([]);\r\n    const [defects, setDefects] = useState<IDefect[]>([]);\r\n    const [otherResults, setOtherResults] = useState<IPatrolResult[]>([]);\r\n    const [patrolResults, setPatrolResults] = useState<IPatrolResult[]>([]);\r\n    const [user, setUser] = useState<IUser | null>(null);\r\n    const { socket, isConnected } = useSocket();\r\n    const [lock, setLock] = useState(false);\r\n    const [mounted, setMounted] = useState(false);\r\n    const params = useParams();\r\n    const a = useTranslations(\"Alert\");\r\n\r\n    const [patrolUser, setPatrolUser] = useState<IUser[] | null>([])\r\n    const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n    const [isHovered, setIsHovered] = useState(false);\r\n\r\n    const [countItems, setCountItems] = useState(0);\r\n    const [countFails, setCountFails] = useState(0);\r\n    const [countDefects, setCountDefects] = useState(0);\r\n\r\n    const itemCounts = (patrol: IPatrol, results: IPatrolResult[]) => {\r\n        let itemCounts = 0\r\n        patrol?.patrolChecklists.forEach(patrolChecklist => {\r\n            // นับจำนวน item แต่ละประเภท\r\n            patrolChecklist.checklist.items.forEach(item => {\r\n                item.itemZones.forEach(itemZone => {\r\n                    itemCounts++\r\n                })\r\n            });\r\n        });\r\n\r\n        let countItems = itemCounts;\r\n        let countFails = 0;\r\n        let countDefects = 0;\r\n\r\n        if (patrol?.status !== \"pending\" && patrol?.status !== \"scheduled\") {\r\n            if (results) {\r\n                for (const patrolResult of results) {\r\n                    if (patrolResult.status === false) {\r\n                        countFails++;\r\n                        if (patrolResult.defects && patrolResult.defects.length !== 0) {\r\n                            countDefects += patrolResult.defects.length;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        setCountItems(countItems)\r\n        setCountFails(countFails)\r\n        setCountDefects(countDefects)\r\n\r\n        return {countItems, countFails, countDefects}\r\n    }\r\n\r\n\r\n    const formatDate = (dateStr: string): string => {\r\n        const date = new Date(dateStr);\r\n        return date.toLocaleDateString('en-GB');\r\n    };\r\n\r\n    const formatId = (id: number): string => {\r\n        return `P${id.toString().padStart(4, '0')}`;\r\n    };\r\n   \r\n    const formatTimeDate = (dateStr: string): string => {\r\n        const date = new Date(dateStr);\r\n        const hours = date.getHours().toString().padStart(2, '0'); \r\n        const minutes = date.getMinutes().toString().padStart(2, '0'); \r\n        return `${hours}.${minutes}`;\r\n    };\r\n\r\n    const formatZone = (patrol: IPatrol) => {\r\n        const zones = new Set<string>();\r\n        patrol.patrolChecklists.forEach((checklist: any) => {\r\n            checklist.checklist.items.forEach((item: any) => {\r\n                item.itemZones.forEach((zoneObj: any) => {\r\n                    const zoneName = zoneObj.zone.name;\r\n                    if (typeof zoneName === \"string\") {\r\n                        zones.add(zoneName);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return Array.from(zones)\r\n            .map(\r\n                (zone) =>\r\n                    zone\r\n                        .split(\"_\") // แยกคำตาม `_`\r\n                        .map(\r\n                            (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\r\n                        ) // ตัวอักษรตัวแรกพิมพ์ใหญ่\r\n                        .join(\" \") // รวมคำด้วยช่องว่าง\r\n            )\r\n            .join(\", \"); // รวมรายการด้วยเครื่องหมายคอมมา\r\n    };\r\n\r\n    const handleMouseEnter = () => {\r\n        setIsHovered(true);\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setIsHovered(false);\r\n    };\r\n\r\n    const handleOpenDialog = () => {\r\n        setIsAlertOpen(true);\r\n    };\r\n\r\n    const handleCloseDialog = () => {\r\n        setIsAlertOpen(false)\r\n    }\r\n\r\n    const totalResults = patrolResults.length\r\n    const checkedResults =\r\n        patrolResults.filter((res) => res.status !== null).length || 0;\r\n    const canFinish = checkedResults === totalResults;\r\n\r\n    const getPatrolData = async () => {\r\n        if (params.id) {\r\n            try {\r\n                const data = await fetchData(\"get\", `/patrol/${params.id}?preset=true`, true);\r\n                const result = await fetchData(\"get\", `/patrol/${params.id}?result=true`, true);\r\n                const savedResults = localStorage.getItem(`patrolResults_${data.id}`);\r\n                const otherResults = localStorage.getItem(`otherResults_${data.id}`);\r\n                if (savedResults) {\r\n                    setResults(JSON.parse(savedResults));\r\n                }\r\n                if (otherResults) {\r\n                    setOtherResults(JSON.parse(otherResults));\r\n                }\r\n                setPatrol(data);\r\n                setPatrolResults(result.results)\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch patrol data:\", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const getDefectData = async () => {\r\n        try {\r\n            const defectFetch = await fetchData(\"get\", `/patrol/${params.id}/defects`, true);\r\n            setDefects(defectFetch);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch defects data:\", error);\r\n        }\r\n    };\r\n\r\n    const calculateProgress = () => {\r\n        if (!patrol) return 0;\r\n        const checkedResults = patrolResults.filter(\r\n            (res) => res.status !== null\r\n        ).length;\r\n\r\n        if (totalResults === 0) return 0;\r\n        return (checkedResults / totalResults) * 100;\r\n    };\r\n\r\n    const toggleLock = () => setLock((prev) => !prev);\r\n\r\n    const mergeResults = (newResults: IPatrolResult[]) => {\r\n        setPatrolResults((prevPatrolResult = []) => {\r\n            const updatedResults = prevPatrolResult.map((res) => {\r\n                const matchingResult = newResults.find(\r\n                    (newRes) =>\r\n                        res.itemId === newRes.itemId && res.zoneId === newRes.zoneId\r\n                );\r\n                return matchingResult ? { ...res, ...matchingResult } : res;\r\n            });\r\n\r\n            const newUniqueResults = newResults.filter(\r\n                (newRes) =>\r\n                    !updatedResults.some(\r\n                        (res) =>\r\n                            res.itemId === newRes.itemId && res.zoneId === newRes.zoneId\r\n                    )\r\n            );\r\n\r\n            return [...updatedResults, ...newUniqueResults];\r\n        });\r\n    }\r\n\r\n    const handleResult = (result: IPatrolResult) => {\r\n        setResults((prevResults) => {\r\n            const existingIndex = prevResults.findIndex(\r\n                (r) => r.itemId === result.itemId && r.zoneId === result.zoneId\r\n            );\r\n\r\n            if (existingIndex !== -1) {\r\n                const updatedResults = [...prevResults];\r\n                updatedResults[existingIndex] = result;\r\n                return updatedResults;\r\n            } else {\r\n                return [...prevResults, result];\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleStartPatrol = async () => {\r\n        setIsAlertOpen(false)\r\n\r\n        if (!patrol) return;\r\n        const patrolId = patrol.id;\r\n        const data = {\r\n            status: patrol?.status,\r\n            checklists: patrol?.patrolChecklists,\r\n        };\r\n\r\n        try {\r\n            const startPatrol = await fetchData(\r\n                \"put\",\r\n                `/patrol/${patrolId}/start`,\r\n                true,\r\n                data\r\n            );\r\n            setPatrol(startPatrol)\r\n            setPatrolResults(startPatrol.results)\r\n            toast({\r\n                variant: \"default\",\r\n                title: a(\"PatrolStartTitle\"),\r\n                description: a(\"PatrolStartDescription\"),\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Error starting patrol:\", error);\r\n        }\r\n    };\r\n\r\n    const handleFinishPatrol = async () => {\r\n        if (!patrol) return;\r\n\r\n        const updatedResults = patrolResults.map((result) => {\r\n            const matchedResult = patrolResults.find(\r\n                (res) => res.itemId === result.itemId && res.zoneId === result.zoneId\r\n            );\r\n\r\n            if (matchedResult && result.status !== null) {\r\n                return {\r\n                    id: matchedResult.id,\r\n                    status: result.status,\r\n                };\r\n            }\r\n\r\n            return null;\r\n        });\r\n\r\n        const data = {\r\n            status: patrol.status,\r\n            checklists: patrol.patrolChecklists,\r\n            results: updatedResults,\r\n            startTime: patrol.startTime\r\n        };\r\n\r\n        let resultCount = 0;\r\n        for (const checklist of patrol.patrolChecklists) {\r\n            for (const item of checklist.checklist.items) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                for (const zone of item.itemZones) {\r\n                    resultCount++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (data.results.length === resultCount) {\r\n            try {\r\n                localStorage.removeItem(`patrolResults_${patrol.id}`);\r\n                localStorage.removeItem(`otherResults_${patrol.id}`);\r\n                const finishPatrol = await fetchData(\r\n                    \"put\",\r\n                    `/patrol/${patrol.id}/finish`,\r\n                    true,\r\n                    data\r\n                );\r\n                toast({\r\n                    variant: \"default\",\r\n                    title: a(\"PatrolFinishTitle\"),\r\n                    description: a(\"PatrolFinishDescription\"),\r\n                });\r\n                setPatrol(finishPatrol)\r\n            } catch (error) {\r\n                console.error(\"Error finishing patrol:\", error);\r\n            }\r\n        }\r\n        // window.location.reload()\r\n    };\r\n\r\n    const getUserData = async () => {\r\n        try {\r\n            const userfetch = await fetchData(\"get\", \"/user?profile=true&image=true\", true);\r\n            setUser(userfetch);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch profile data:\", error);\r\n        }\r\n    };\r\n\r\n    const getPatrolUserData = async () => {\r\n        try {\r\n            const patrolUserFetch = await fetchData(\"get\", `/patrol/${params.id}/user`, true);\r\n            setPatrolUser(patrolUserFetch);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch profile data:\", error);\r\n        }\r\n    };\r\n\r\n    const fetchRealtimeData = (defect: IDefect, actionType: string) => {\r\n        if (actionType === \"create\") {\r\n            setDefects((prevDefects) => {\r\n                // ตรวจสอบว่ามี defects ก่อนหน้าหรือไม่\r\n                if (prevDefects && prevDefects.length > 0) {\r\n                    return [...prevDefects, defect]; // เพิ่ม defect ไปต่อท้าย\r\n                } else {\r\n                    return [defect]; // ถ้าไม่มี defect ก่อนหน้า ให้เริ่มต้นใหม่ด้วย defect ตัวแรก\r\n                }\r\n            });\r\n        } else {\r\n            setDefects((prevDefects) =>\r\n                prevDefects.map((d) => (d.id === defect.id ? defect : d))\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                await getUserData();\r\n                await getPatrolData();\r\n                await getDefectData()\r\n                await getPatrolUserData()\r\n            } catch (error) {\r\n                console.error(\"Error loading data: \", error);\r\n            }\r\n        };\r\n        fetchData();\r\n        setMounted(true);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (otherResults) {\r\n            mergeResults(otherResults);\r\n        }\r\n    }, [otherResults]);\r\n\r\n    useEffect(() => {\r\n        if (socket && isConnected && patrol?.id && user?.id) {\r\n            socket.emit(\"join_room\", patrol.id);\r\n\r\n            const handleResultUpdate = (updatedResults: IPatrolResult[]) => {\r\n                const currentUserResults = updatedResults.filter(\r\n                    (res) => res.inspectorId === user.id\r\n                );\r\n\r\n                const otherUserResults = updatedResults.filter(\r\n                    (res) => res.inspectorId !== user.id\r\n                );\r\n\r\n                // Avoid unnecessary updates to localStorage\r\n                if (currentUserResults.length > 0) {\r\n                    const savedResults = localStorage.getItem(\r\n                        `patrolResults_${patrol.id}`\r\n                    );\r\n                    const parsedResults: IPatrolResult[] = savedResults\r\n                        ? JSON.parse(savedResults)\r\n                        : [];\r\n                    if (\r\n                        JSON.stringify(parsedResults) !== JSON.stringify(currentUserResults)\r\n                    ) {\r\n                        localStorage.setItem(\r\n                            `patrolResults_${patrol.id}`,\r\n                            JSON.stringify(currentUserResults)\r\n                        );\r\n                    }\r\n                }\r\n\r\n                if (otherUserResults.length > 0) {\r\n                    const savedOtherResults = localStorage.getItem(\r\n                        `otherResults_${patrol.id}`\r\n                    );\r\n                    const parsedOtherResults: IPatrolResult[] = savedOtherResults\r\n                        ? JSON.parse(savedOtherResults)\r\n                        : [];\r\n                    if (\r\n                        JSON.stringify(parsedOtherResults) !==\r\n                        JSON.stringify(otherUserResults)\r\n                    ) {\r\n                        localStorage.setItem(\r\n                            `otherResults_${patrol.id}`,\r\n                            JSON.stringify(otherUserResults)\r\n                        );\r\n                    }\r\n                }\r\n\r\n                setOtherResults(otherUserResults);\r\n                mergeResults([...results, ...otherUserResults]);\r\n            };\r\n\r\n            socket.on(\"patrol_result_update\", handleResultUpdate);\r\n\r\n            return () => {\r\n                socket.off(\"patrol_result_update\", handleResultUpdate);\r\n            };\r\n        }\r\n    }, [socket, isConnected, patrol?.id, user?.id, results]);\r\n\r\n    const lastEmittedResults = useRef<IPatrolResult[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (socket && patrol?.id) {\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            const handleNewUserJoin = (userId: string) => {\r\n\r\n                const savedResults = localStorage.getItem(`patrolResults_${patrol.id}`);\r\n                if (savedResults) {\r\n                    try {\r\n                        const parsedResults: IPatrolResult[] = JSON.parse(savedResults);\r\n                        socket.emit(\"patrol_result_update\", parsedResults, patrol.id);\r\n                    } catch (error) {\r\n                        console.error(\"Error parsing saved results:\", error);\r\n                    }\r\n                }\r\n            };\r\n\r\n            socket.on(\"new_user_joined\", handleNewUserJoin);\r\n\r\n            return () => {\r\n                socket.off(\"new_user_joined\", handleNewUserJoin);\r\n            };\r\n        }\r\n    }, [socket, patrol?.id]);\r\n\r\n    useEffect(() => {\r\n        if (socket && isConnected && results.length > 0 && patrol) {\r\n            const uniqueResults = results.map(\r\n                ({ inspectorId, id, itemId, zoneId, status }) => ({\r\n                    inspectorId,\r\n                    id,\r\n                    itemId,\r\n                    zoneId,\r\n                    status,\r\n                })\r\n            );\r\n\r\n            const hasChanged =\r\n                uniqueResults.length !== lastEmittedResults.current.length ||\r\n                uniqueResults.some(\r\n                    (result, index) =>\r\n                        result.id !== lastEmittedResults.current[index]?.id ||\r\n                        result.itemId !== lastEmittedResults.current[index]?.itemId ||\r\n                        result.zoneId !== lastEmittedResults.current[index]?.zoneId ||\r\n                        result.status !== lastEmittedResults.current[index]?.status\r\n                );\r\n\r\n            if (hasChanged) {\r\n                socket.emit(\"patrol_result_update\", uniqueResults, patrol.id);\r\n                mergeResults([...results, ...uniqueResults]);\r\n                localStorage.setItem(\r\n                    `patrolResults_${patrol.id}`,\r\n                    JSON.stringify(results)\r\n                );\r\n\r\n                lastEmittedResults.current = results;\r\n            }\r\n        }\r\n    }, [results]);\r\n\r\n    useEffect(() => {\r\n        const savedResults = localStorage.getItem(`patrolResults_${patrol?.id}`);\r\n        if (savedResults) {\r\n            const parsedResults = JSON.parse(savedResults);\r\n            setResults(parsedResults);\r\n        }\r\n    }, [patrol?.id]);\r\n\r\n    return (\r\n        <PatrolContext.Provider\r\n            value={{\r\n                patrol,\r\n                patrolResults,\r\n                results,\r\n                otherResults,\r\n                user,\r\n                lock,\r\n                isAlertOpen,\r\n                mounted,\r\n                canFinish,\r\n                defects,\r\n                countItems,\r\n                countFails,\r\n                countDefects,\r\n                patrolUser,\r\n                isHovered,\r\n                formatDate,\r\n                formatId,\r\n                formatTimeDate,\r\n                formatZone,\r\n                handleMouseEnter,\r\n                handleMouseLeave,\r\n                itemCounts,\r\n                toggleLock,\r\n                calculateProgress,\r\n                handleResult,\r\n                mergeResults,\r\n                handleStartPatrol,\r\n                fetchRealtimeData,\r\n                handleFinishPatrol,\r\n                handleOpenDialog,\r\n                handleCloseDialog,\r\n            }}\r\n        >\r\n            {children}\r\n        </PatrolContext.Provider>\r\n    );\r\n}\r\n\r\nexport const usePatrol = () => {\r\n    const context = useContext(PatrolContext);\r\n    if (!context) {\r\n        throw new Error('usePatrol must be used within a PatrolProvider');\r\n    }\r\n    return context;\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\eslint-report.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type. Allowed unused vars must match /^_/u.","line":22,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":22,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\lib\\utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Defect' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalPass' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":176,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":176,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalFails' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":179,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":179,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalDefects' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":186,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalComments' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":187,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\nimport { IPatrol, IPatrolResult, defectStatus, patrolStatus, itemType, IToast } from \"@/app/type\";\r\nimport { badgeVariants } from \"@/components/badge-custom\";\r\nimport { LoginSchema } from '@/app/type';\r\nimport axios, { AxiosRequestConfig } from \"axios\";\r\nimport { z } from \"zod\";\r\nimport Defect from \"@/components/defect\";\r\n\r\nconst ExcelJS = require(\"exceljs\");\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\nexport async function login(values: z.infer<typeof LoginSchema>) {\r\n  const validatedFields = LoginSchema.safeParse(values)\r\n  if (!validatedFields.success) {\r\n    return { error: \"Invalid field!\" }\r\n  }\r\n  try {\r\n    const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/login`, values, { withCredentials: true })\r\n    return response.data\r\n  } catch (error: any) {\r\n    return { error: error.response?.data?.message || \"Login failed\" };\r\n  }\r\n}\r\n\r\n\r\nexport async function logout() {\r\n  try {\r\n    await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/logout`, {}, { withCredentials: true });\r\n  } catch (error: any) {\r\n    throw new Error(\"Logout failed\", error);\r\n  }\r\n}\r\n\r\n\r\nexport async function fetchData(\r\n  type: \"get\" | \"delete\" | \"post\" | \"put\",\r\n  endpoint: string,\r\n  credential: boolean,\r\n  value?: any,\r\n  form?: boolean\r\n) {\r\n  try {\r\n    const config: AxiosRequestConfig = {\r\n      withCredentials: credential,\r\n      headers: form\r\n        ? {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        }\r\n        : {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n    };\r\n\r\n    let response;\r\n    if (type === \"get\" || type === \"delete\") {\r\n      response = await axios[type](`${process.env.NEXT_PUBLIC_API_URL}${endpoint}`, config);\r\n    } else if (type === \"post\" || type === \"put\") {\r\n      response = await axios[type](`${process.env.NEXT_PUBLIC_API_URL}${endpoint}`, value, config);\r\n    }\r\n\r\n    return response?.data; // Return the response body\r\n  } catch (error: any) {\r\n    console.error(\"Failed to fetch data:\", error);\r\n\r\n    // Return more detailed error information\r\n    if (error.response) {\r\n      return {\r\n        error: true,\r\n        status: error.response.status,\r\n        data: error.response.data,\r\n      };\r\n    }\r\n\r\n    // For unexpected errors\r\n    return {\r\n      error: true,\r\n      message: error.message || \"Unexpected error occurred\",\r\n    };\r\n  }\r\n}\r\n\r\n\r\n\r\nexport const exportData = async (patrol: IPatrol, result: IPatrolResult[]) => {\r\n  try {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(\"Patrol Report\");\r\n\r\n    const formatDateTime = (dateTime) => {\r\n      const date = new Date(dateTime);\r\n      // ฟอร์แมตวันที่\r\n      const formattedDate = date.toLocaleDateString('en-GB'); \r\n      // ฟอร์แมตเวลา\r\n      const formattedTime = date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });\r\n      return `${formattedDate} ${formattedTime}`;\r\n    };\r\n\r\n    // เพิ่มข้อมูล Patrol ที่ด้านบนของเอกสาร\r\n    worksheet.addRow([\"Date:\", formatDateTime(patrol.date)]);\r\n    worksheet.addRow([\"Start Time:\",formatDateTime(patrol.startTime)]);\r\n    worksheet.addRow([\"End Time:\", formatDateTime(patrol.endTime)]);\r\n    worksheet.addRow([\"Status:\", patrol.status]);\r\n    worksheet.addRow([\"Preset Title:\", patrol.preset.title]);\r\n    worksheet.addRow([\"Preset Version:\", patrol.preset.version]);\r\n    worksheet.addRow([\"Preset Description:\", patrol.preset.description]);\r\n    worksheet.addRow([]); // เพิ่มบรรทัดว่าง\r\n\r\n    // ขนาดของ Column\r\n    worksheet.columns = [\r\n      { width: 30 },  \r\n      { width: 25},  \r\n      { width: 25 },  \r\n      { width: 15 },  \r\n      { width: 20 },  \r\n    ];\r\n\r\n    let totalFails = 0;\r\n    let totalComments = 0;\r\n    let totalDefects = 0;\r\n    let totalPass = 0;\r\n\r\n    // วนลูปผ่าน patrolChecklist\r\n    for (const patrolChecklist of patrol.patrolChecklists) {\r\n      const inspectorName = patrolChecklist.inspector.profile.name;\r\n      const checklist = patrolChecklist.checklist;\r\n\r\n      // เพิ่มชื่อ Checklist\r\n      const titleRow = worksheet.addRow([checklist.title + \" By \" + inspectorName]);\r\n      // หาตำแหน่งของโรวปัจจุบัน\r\n      const titleRowIdx = worksheet.rowCount; \r\n      // Merge โดยใส่ค่า (ตน.ปัจจุบัน, ตน.เริ่มต้น, ตน.ปัจจุบัน, ตน.สิ้นสุด)\r\n      worksheet.mergeCells(titleRowIdx, 0, titleRowIdx, 3);\r\n      // ตั้งค่าโรวให้ตัวหนา จัดกึ่งกลาง และเพิ่มขอบ\r\n      titleRow.getCell(1).font = { bold: true };\r\n      titleRow.getCell(1).alignment = { horizontal: \"center\", vertical: \"middle\" };\r\n      titleRow.getCell(1).border = {\r\n        top: { style: 'thin' },\r\n        left: { style: 'thin' },\r\n        bottom: { style: 'thin' },\r\n        right: { style: 'thin' },\r\n      };\r\n\r\n      // ตั้งค่าคอลัมน์พร้อมกับหัวข้อและคีย์\r\n      const headerRow = worksheet.addRow([\"Item Name\", \"Zone Name\", \"Status\"]);\r\n\r\n      // จัดกึ่งกลางหัวตาราง ตัวหนา มีกรอบ\r\n      headerRow.eachCell((cell) => {\r\n        cell.alignment = { horizontal: 'center', vertical: 'middle' };\r\n        cell.font = { bold: true };\r\n        cell.border = {\r\n          top: { style: 'thin' },\r\n          left: { style: 'thin' },\r\n          bottom: { style: 'thin' },\r\n          right: { style: 'thin' }\r\n        };\r\n      });\r\n\r\n     // วนลูปผ่านรายการใน Checklist\r\n     for (const item of checklist.items) {\r\n        // วนลูปผ่าน itemZone\r\n        for (const itemZone of item.itemZones) {\r\n          const zoneName = itemZone.zone.name;\r\n          // หา result ที่ตรงกับ item และ zone นี้\r\n          const resultItem = result.find(\r\n            (r) => r.itemId === item.id && r.zoneId === itemZone.zone.id\r\n          );\r\n\r\n          let statusText = \"N/A\";\r\n          let defectCount = 0;\r\n          if (resultItem) {\r\n            if (resultItem.status === true) {\r\n              statusText = \"Passed\";\r\n              totalPass++;\r\n            } else if (resultItem.status === false) {\r\n              statusText = \"Commented\";\r\n              totalFails++; // เพิ่มจำนวน fail\r\n              totalComments++; // เพิ่มจำนวน comment\r\n            }\r\n\r\n            if (resultItem.defects && resultItem.defects.length > 0) {\r\n              statusText = \"Defected\";\r\n              defectCount = resultItem.defects.length;\r\n              totalDefects += defectCount; // เพิ่มจำนวน defect\r\n              totalComments -= defectCount; // ลดจำนวน comment\r\n            }\r\n          }\r\n\r\n          // เพิ่มแถวข้อมูลลงใน worksheet\r\n          const dataRow = worksheet.addRow([item.name, zoneName, statusText]);\r\n\r\n          dataRow.eachCell((cell) => {\r\n            cell.alignment = { horizontal: 'center', vertical: 'middle' };\r\n          \r\n            cell.border = {\r\n              left: { style: 'thin' },\r\n              right: { style: 'thin' }\r\n            };\r\n          });\r\n\r\n         \r\n\r\n          dataRow.eachCell((cell) => {\r\n            cell.alignment = { horizontal: 'center', vertical: 'middle' };\r\n          \r\n            cell.border = {\r\n              left: { style: 'thin' },\r\n              right: { style: 'thin' }\r\n            };\r\n          });\r\n        }\r\n      }\r\n      const columnCount = headerRow.cellCount; \r\n      const blankRow = worksheet.addRow(Array(columnCount).fill(\"\")); // แถวว่างเพื่อเว้นช่อง\r\n      blankRow.eachCell((cell) => {\r\n        cell.border = { top: { style: 'thin' } };\r\n      });\r\n    }\r\n\r\n    // เพิ่มสรุปที่ด้านล่าง\r\n    const sumRow = worksheet.addRow([\"Summary\"]);\r\n    // หาตำแหน่งของโรวปัจจุบัน\r\n    const sumRowIdx = worksheet.rowCount; \r\n    // Merge โดยใส่ค่า (ตน.ปัจจุบัน, ตน.เริ่มต้น, ตน.ปัจจุบัน, ตน.สิ้นสุด)\r\n    worksheet.mergeCells(sumRowIdx, 0, sumRowIdx, 4);\r\n    // ตั้งค่าโรวให้ตัวหนา จัดกึ่งกลาง และเพิ่มขอบ\r\n    sumRow.getCell(1).font = { bold: true };\r\n    sumRow.getCell(1).alignment = { horizontal: \"center\", vertical: \"middle\" };\r\n    sumRow.getCell(1).border = {\r\n      top: { style: 'thin' },\r\n      left: { style: 'thin' },\r\n      bottom: { style: 'thin' },\r\n      right: { style: 'thin' },\r\n    };\r\n    \r\n    // สร้าง Array เพื่อเก็บข้อมูลจำนวนของแต่ละสถานะในแต่ละโซน\r\n    const zoneStatusCount = [];\r\n\r\n    // สร้างตัวแปรสำหรับผลรวมของทุกโซน\r\n    let totalPassed = 0;\r\n    let totalCommented = 0;\r\n    let totalDefected = 0;\r\n\r\n    // วนลูปผ่าน Zone Name และ Status เพื่อเก็บข้อมูลใน zoneStatusCount\r\n    for (const patrolChecklist of patrol.patrolChecklists) {\r\n      for (const item of patrolChecklist.checklist.items) {\r\n        for (const itemZone of item.itemZones) {\r\n          const zoneName = itemZone.zone.name;\r\n          const resultItem = result.find(\r\n            (r) => r.itemId === item.id && r.zoneId === itemZone.zone.id\r\n          );\r\n\r\n          let statusText = \"N/A\"; // กำหนดค่าเริ่มต้น\r\n          if (resultItem) {\r\n            if (resultItem.status === true) {\r\n              statusText = \"Passed\";\r\n            } else if (resultItem.status === false) {\r\n              statusText = \"Commented\";\r\n            }\r\n\r\n            if (resultItem.defects && resultItem.defects.length > 0) {\r\n              statusText = \"Defected\";\r\n            }\r\n          }\r\n\r\n          // หาโซนใน zoneStatusCount หรือเพิ่มใหม่\r\n          let zoneEntry = zoneStatusCount.find(entry => entry.zoneName === zoneName);\r\n          if (!zoneEntry) {\r\n            zoneEntry = { zoneName, Passed: 0, Commented: 0, Defected: 0, \"N/A\": 0 };\r\n            zoneStatusCount.push(zoneEntry);\r\n          }\r\n\r\n          // เพิ่มจำนวนสถานะในโซนที่กำหนด\r\n          zoneEntry[statusText] += 1;\r\n\r\n          // เพิ่มผลรวมสำหรับทุกโซน\r\n          if (statusText === \"Passed\") totalPassed += 1;\r\n          if (statusText === \"Commented\") totalCommented += 1;\r\n          if (statusText === \"Defected\") totalDefected += 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // เพิ่มส่วนหัวของตารางสำหรับสรุปผล\r\n    const zoneSummaryHeaderRow = worksheet.addRow([\"Zone Name\", \"Passed\", \"Commented\", \"Defected\"]);\r\n    zoneSummaryHeaderRow.eachCell((cell) => {\r\n      cell.font = { bold: true }; // ทำให้หัวตารางตัวหนา\r\n      cell.alignment = { horizontal: \"center\", vertical: \"middle\" }; // จัดกึ่งกลาง\r\n      cell.border = {\r\n        top: { style: 'thin' },\r\n        left: { style: 'thin' },\r\n        bottom: { style: 'thin' },\r\n        right: { style: 'thin' },\r\n      };\r\n    });\r\n\r\n    // เพิ่มข้อมูลสรุปของแต่ละโซนลงในตาราง\r\n    zoneStatusCount.forEach(zoneEntry => {\r\n      const summaryRow = worksheet.addRow([\r\n        zoneEntry.zoneName,\r\n        zoneEntry.Passed,\r\n        zoneEntry.Commented,\r\n        zoneEntry.Defected,\r\n      ]);\r\n\r\n      summaryRow.eachCell((cell) => {\r\n        cell.alignment = { horizontal: \"center\", vertical: \"middle\" }; // จัดกึ่งกลาง\r\n        cell.border = {\r\n          top: { style: 'thin' },\r\n          left: { style: 'thin' },\r\n          bottom: { style: 'thin' },\r\n          right: { style: 'thin' },\r\n        };\r\n      });\r\n    });\r\n\r\n    // เพิ่มแถวผลรวมของทุกโซน\r\n    const totalRow = worksheet.addRow([\r\n      \"Total\",\r\n      totalPassed,\r\n      totalCommented,\r\n      totalDefected\r\n    ]);\r\n\r\n    totalRow.eachCell((cell) => {\r\n      cell.font = { bold: true }; // ทำให้ผลรวมตัวหนา\r\n      cell.alignment = { horizontal: \"center\", vertical: \"middle\" }; // จัดกึ่งกลาง\r\n      cell.border = {\r\n        top: { style: 'thin' },\r\n        left: { style: 'thin' },\r\n        bottom: { style: 'thin' },\r\n        right: { style: 'thin' },\r\n      };\r\n    });\r\n\r\n    worksheet.addRow([]);\r\n\r\n    // เพิ่มสรุปที่ด้านล่าง\r\n    const resultRow = worksheet.addRow([\"Result\"]);\r\n    // หาตำแหน่งของโรวปัจจุบัน\r\n    const resultRowIdx = worksheet.rowCount; \r\n    // Merge โดยใส่ค่า (ตน.ปัจจุบัน, ตน.เริ่มต้น, ตน.ปัจจุบัน, ตน.สิ้นสุด)\r\n    worksheet.mergeCells(resultRowIdx, 0, resultRowIdx, 2);\r\n    // ตั้งค่าโรวให้ตัวหนา จัดกึ่งกลาง และเพิ่มขอบ\r\n    resultRow.getCell(1).font = { bold: true };\r\n    resultRow.getCell(1).alignment = { horizontal: \"center\", vertical: \"middle\" };\r\n    resultRow.getCell(1).border = {\r\n      top: { style: 'thin' },\r\n      left: { style: 'thin' },\r\n      bottom: { style: 'thin' },\r\n      right: { style: 'thin' },\r\n    };\r\n\r\n    // เพิ่มแถวสำหรับคำว่า PASS และ FAIL\r\n    const passFailHeaderRow = worksheet.addRow([\"PASS\", \"FAIL\"]);\r\n    passFailHeaderRow.eachCell((cell) => {\r\n      cell.font = { bold: true }; // ทำให้ตัวหนา\r\n      cell.alignment = { horizontal: \"center\", vertical: \"middle\" }; // จัดกึ่งกลาง\r\n      cell.border = {\r\n        top: { style: 'thin' },\r\n        left: { style: 'thin' },\r\n        bottom: { style: 'thin' },\r\n        right: { style: 'thin' },\r\n      };\r\n    });\r\n\r\n    // เพิ่มแถวตัวเลขสำหรับ PASS และ FAIL\r\n    const passFailCountRow = worksheet.addRow([\r\n      totalPassed, // จำนวน Pass\r\n      totalCommented + totalDefected, // รวมจำนวน Fail\r\n    ]);\r\n\r\n    passFailCountRow.eachCell((cell) => {\r\n      cell.alignment = { horizontal: \"center\", vertical: \"middle\" }; // จัดกึ่งกลาง\r\n      cell.border = {\r\n        top: { style: 'thin' },\r\n        left: { style: 'thin' },\r\n        bottom: { style: 'thin' },\r\n        right: { style: 'thin' },\r\n      };\r\n    });\r\n\r\n    // เขียน workbook เป็น buffer\r\n    const buffer = await workbook.xlsx.writeBuffer();\r\n\r\n    // สร้าง blob และดาวน์โหลดไฟล์\r\n    const blob = new Blob([buffer], {\r\n      type:\r\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n    });\r\n    const link = document.createElement(\"a\");\r\n    link.href = URL.createObjectURL(blob);\r\n    link.download = \"patrol_report.xlsx\";\r\n\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  } catch (error) {\r\n    console.error(\"Error exporting data:\", error);\r\n    throw new Error(\r\n      `Could not export data: ${error instanceof Error ? error.message : \"Unknown error\"\r\n      }`\r\n    );\r\n  }\r\n};\r\n\r\n\r\nexport const getInitials = (name: string) => {\r\n  if (!name) return \"\";\r\n  const nameParts = name.split(\" \");\r\n\r\n  if (nameParts.length === 1) {\r\n    return nameParts[0].charAt(0).toUpperCase();\r\n  } else {\r\n    return (\r\n      nameParts[0].charAt(0).toUpperCase() +\r\n      nameParts[nameParts.length - 1].charAt(0).toUpperCase()\r\n    );\r\n  }\r\n};\r\n\r\nexport const sortData = (data: any, sort: { by: string; order: string }) => {\r\n  const sortedData = [...data];\r\n  if (sort.by === \"Doc No.\") {\r\n    sortedData.sort((a, b) =>\r\n      sort.order === \"Ascending\"\r\n        ? a.id - b.id  // เรียงจากน้อยไปมาก \r\n        : b.id - a.id  // เรียงจากมากไปน้อย \r\n    );\r\n  } else if (sort.by === \"Date\") {\r\n    sortedData.sort((a, b) =>\r\n      sort.order === \"Ascending\"\r\n        ? new Date(a.date).getTime() - new Date(b.date).getTime()\r\n        : new Date(b.date).getTime() - new Date(a.date).getTime()\r\n    );\r\n  } else if (sort.by === \"Status\") {\r\n    sortedData.sort((a, b) =>\r\n      sort.order === \"Ascending\"\r\n        ? String(a.status).localeCompare(String(b.status)) // เรียงจาก \"false\" -> \"true\"\r\n        : String(b.status).localeCompare(String(a.status)) // เรียงจาก \"true\" -> \"false\"\r\n    );\r\n  }\r\n  return sortedData\r\n}\r\n\r\n// Function to calculate time ago\r\nexport function timeAgo(timestamp: string, t: any): string {\r\n  const now = new Date();\r\n  const notificationDate = new Date(timestamp);\r\n  const seconds = Math.floor((now.getTime() - notificationDate.getTime()) / 1000);\r\n\r\n  const intervals: { [key: string]: number } = {\r\n    year: 31536000,\r\n    month: 2592000,\r\n    week: 604800,\r\n    day: 86400,\r\n    hour: 3600,\r\n    minute: 60,\r\n    second: 1\r\n  };\r\n\r\n  for (const key in intervals) {\r\n    const interval = intervals[key];\r\n    const result = Math.floor(seconds / interval);\r\n    if (result >= 1) {\r\n      return t(`${key}Ago`, { count: result });\r\n    }\r\n  }\r\n  return t('justNow');\r\n}\r\n\r\nexport const getPatrolStatusVariant = (status: patrolStatus) => {\r\n  let iconName: string\r\n  let variant: keyof typeof badgeVariants\r\n  switch (status) {\r\n    case \"completed\":\r\n      iconName = \"check\";\r\n      variant = \"green\";\r\n      break;\r\n    case \"on_going\":\r\n      iconName = \"cached\";\r\n      variant = \"purple\";\r\n      break;\r\n    case \"scheduled\":\r\n      iconName = \"event_available\";\r\n      variant = \"yellow\";\r\n      break;\r\n    default:\r\n      iconName = \"hourglass_top\";\r\n      variant = \"blue\";\r\n      break;\r\n  }\r\n  return { iconName, variant };\r\n};\r\n\r\nexport const getDefectStatusVariant = (status: defectStatus) => {\r\n  let iconName: string\r\n  let variant: keyof typeof badgeVariants\r\n  switch (status) {\r\n    case \"completed\":\r\n      iconName = 'check'\r\n      variant = 'green'\r\n      break;\r\n    case \"resolved\":\r\n      iconName = 'published_with_changes'\r\n      variant = 'blue'\r\n      break;\r\n    case \"in_progress\":\r\n      iconName = 'cached'\r\n      variant = 'yellow'\r\n      break;\r\n    case \"pending_inspection\":\r\n      iconName = 'pending_actions'\r\n      variant = 'red'\r\n      break;\r\n    default:\r\n      iconName = 'campaign'\r\n      variant = 'orange'\r\n      break;\r\n  }\r\n  return { iconName, variant };\r\n};\r\n\r\nexport const getItemTypeVariant = (type: itemType) => {\r\n  let iconName: string\r\n  let variant: keyof typeof badgeVariants\r\n  switch (type) {\r\n    case \"safety\":\r\n      iconName = 'verified_user'\r\n      variant = 'green'\r\n      break;\r\n    case \"environment\":\r\n      iconName = 'psychiatry'\r\n      variant = 'blue'\r\n      break;\r\n    default:\r\n      iconName = 'build'\r\n      variant = 'red'\r\n      break;\r\n  }\r\n  return { iconName, variant };\r\n};\r\n\r\nexport function formatTime(timestamp: string) {\r\n  const date = new Date(timestamp).toLocaleDateString(\r\n    \"th-TH\",\r\n    {\r\n      day: \"2-digit\",\r\n      month: \"2-digit\",\r\n      year: \"numeric\",\r\n    }\r\n  );\r\n\r\n  const time = new Date(timestamp).toLocaleTimeString(\r\n    \"th-TH\",\r\n    {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      second: \"2-digit\",\r\n      hour12: false,\r\n    }\r\n  );\r\n  return date + \" \" + time\r\n}\r\n\r\nexport function formatPatrolId(id: number): string {\r\n  let newId = id.toString().padStart(4, '0'); // ทำให้เป็นเลข 4 หลัก เติมศูนย์ข้างหน้า\r\n  return `P${newId}`; // ใส่ P ด้านหน้า\r\n}\r\n\r\nexport function getNotificationToast(key: string): IToast | null {\r\n  switch (key) {\r\n    case \"patrol_assigned\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"PatrolAssignTitle\",\r\n        description: \"PatrolAssignDescription\",\r\n      };\r\n    case \"report_defect\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"DefectReceiveTitle\",\r\n        description: \"DefectReceiveDescription\",\r\n      };\r\n    case \"new_comment\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"CommentReceiveTitle\",\r\n        description: \"CommentReceiveDescription\",\r\n      };\r\n    case \"update_supervisor\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"UpdateSupervisorTitle\",\r\n        description: \"UpdateSupervisorDescription\",\r\n      };\r\n    case \"start_patrol\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"StartPatrolTitle\",\r\n        description: \"StartPatrolDescription\",\r\n      };\r\n    case \"finish_patrol\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"FinishPatrolTitle\",\r\n        description: \"FinishPatrolDescription\",\r\n      };\r\n    case \"defect_resolved\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"DefectResolveInfoTitle\",\r\n        description: \"DefectResolveInfoDescription\",\r\n      };\r\n    case \"defect_accept\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"DefectAcceptInfoTitle\",\r\n        description: \"DefectAcceptInfoDescription\",\r\n      };\r\n    case \"defect_completed\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"DefectCompleteTitle\",\r\n        description: \"DefectCompleteDescription\",\r\n      };\r\n    case \"defect_pending_inspection\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"DefectPendingInspectionTitle\",\r\n        description: \"DefectPendingInspectionDescription\",\r\n      };\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\next.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\postcss.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]