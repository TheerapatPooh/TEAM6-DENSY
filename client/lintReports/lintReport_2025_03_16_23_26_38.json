[{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\_error.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\_rsc_messages_en_json.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\_rsc_messages_th_json.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\admin\\dashboard\\heat-map\\[id]\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\admin\\dashboard\\heat-map\\[id]\\page_client-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\admin\\dashboard\\heat-map\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\admin\\dashboard\\heat-map\\page_client-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page_client-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\admin\\dashboard\\overview\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\admin\\dashboard\\overview\\page_client-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\login\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\login\\page_client-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\patrol\\[id]\\detail\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\patrol\\[id]\\detail\\page_client-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\patrol\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\patrol\\page_client-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\refresh\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\[locale]\\refresh\\page_client-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\_not-found\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\_not-found\\page_client-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\app\\favicon.ico\\route.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\edge-runtime-webpack.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\interception-route-rewrite-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\middleware-build-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\middleware-react-loadable-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\middleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\next-font-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\pages\\_app.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\pages\\_document.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\pages\\_error.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\server-reference-manifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@babel.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@fast-csv.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@floating-ui.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@formatjs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@hookform.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@radix-ui.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@socket.io.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\@swc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\archiver-utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\archiver.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\aria-hidden.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\async.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\asynckit.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\axios.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\balanced-match.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\big-integer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\binary.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\bl.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\bluebird.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\brace-expansion.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\buffer-crc32.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\buffer-indexof-polyfill.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\buffers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\chainsaw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\class-variance-authority.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\clsx.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\combined-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\compress-commons.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\concat-map.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\core-util-is.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\crc-32.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\crc32-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\d3-array.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\d3-color.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\d3-format.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\d3-interpolate.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\d3-path.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\d3-scale.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\d3-shape.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\d3-time-format.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\d3-time.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\date-fns.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\dayjs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\debug.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\decimal.js-light.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\delayed-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\duplexer2.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\embla-carousel-autoplay.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\embla-carousel-react.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\embla-carousel-reactive-utils.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\embla-carousel.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\end-of-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\engine.io-client.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\engine.io-parser.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\eventemitter3.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\exceljs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\fast-csv.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\fast-equals.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\follow-redirects.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\form-data.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\fs-constants.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\fs.realpath.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\fstream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\get-nonce.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\graceful-fs.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\has-flag.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\immediate.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\inflight.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\inherits.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\internmap.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\intl-messageformat.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\its-fine.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\jszip.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\konva.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lazystream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lie.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\listenercount.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.defaults.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.difference.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.escaperegexp.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.flatten.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.groupby.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.isboolean.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.isequal.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.isfunction.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.isnil.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.isplainobject.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.isundefined.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.union.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lodash.uniq.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\lucide-react.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\mime-db.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\mime-types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\mkdirp.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\ms.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\next-intl.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\next-themes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\next.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\normalize-path.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\object-assign.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\once.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\pako.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\path-is-absolute.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\process-nextick-args.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\prop-types.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\proxy-from-env.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-day-picker.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-hook-form.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-is.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-konva.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-reconciler.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-remove-scroll-bar.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-remove-scroll.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-smooth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-style-singleton.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-swipeable-list.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\react-transition-group.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\readable-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\readdir-glob.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\recharts-scale.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\recharts.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\safe-buffer.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\saxes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\scheduler.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\socket.io-client.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\socket.io-parser.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\string_decoder.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\supports-color.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\tailwind-merge.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\tar-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\tiny-invariant.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\tmp.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\traverse.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\tslib.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\unzipper.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\use-callback-ref.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\use-intl.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\use-sidecar.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\util-deprecate.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\uuid.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\victory-vendor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\wrappy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\ws.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\xmlchars.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\xmlhttprequest-ssl.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\zip-stream.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\vendor-chunks\\zod.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\server\\webpack-runtime.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\_error.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app-pages-internals.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\admin\\dashboard\\heat-map\\[id]\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\admin\\dashboard\\heat-map\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\admin\\dashboard\\overview\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\admin\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\login\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\patrol\\[id]\\detail\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\patrol\\[id]\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\patrol\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\patrol\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\[locale]\\refresh\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\_not-found\\page.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\layout.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\app\\not-found.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\fallback\\amp.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\fallback\\main.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\fallback\\pages\\_app.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\fallback\\pages\\_error.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\fallback\\react-refresh.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\fallback\\webpack.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\main-app.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\main.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\pages\\_app.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\pages\\_error.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\polyfills.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\react-refresh.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\chunks\\webpack.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\development\\_buildManifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\development\\_ssgManifest.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\heat-map\\page.19f59de07acdf2a6.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\heat-map\\page.1c7d6f4aff4541e2.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\heat-map\\page.3336dfc6d09e36ec.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\heat-map\\page.5a975590252897f1.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\heat-map\\page.6b5daf4e993de0ea.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\heat-map\\page.9154f4f6dfe0af9c.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\heat-map\\page.b25d1bc151b02964.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\heat-map\\page.c2f3454b6bc5c645.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\heat-map\\page.c7119a6bad16aaf6.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\heat-map\\page.ce4f4ee2489f2e1e.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.014798d8aa6036f7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.071c5390eea2e2cd.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.07e3928c33305c30.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.172358c8748f8843.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.172b9785c99bc0ad.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.174e281db476c7ac.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.1fd3e79a044d1e10.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.215809c7702064f7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.22154fed7976f972.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.2376f27b4230801b.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.237dd1967fa10523.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.24ae2b0e615de870.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.255a314f4fd35144.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.25a696c025763f79.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.3c4ed8c9a7661832.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.4888ce0e53d8f4a7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.4be5ffc9bf0fcb12.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.56ec8d63a11d3f2c.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.5af72fa9f51d4210.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.5bbdfabd5dbcc208.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.606a58d886ca7051.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.60d325bd8b47be6a.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.75a07a249aa8495e.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.80db02befbb43d0f.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.829ff4059040981e.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.84550315d6dcdc1d.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.86404a1dbbe87dc7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.9066138cf8446511.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.932c9d2d33d9c04b.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.93336378a7df4d97.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.abf1a33d7794f280.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.af1f8650daa83805.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.b71d540ec115e4e1.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.b8a55995f0769178.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.be02cbaff7f9de6a.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.bedafcd1bc34ccc7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.c008608bc1b3332f.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.c17c6eeabee1f14c.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.c5b9d98f9537b001.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.d05d3d1bc38761d6.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.d4665ac4f712fe05.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.d8dff4e3ccf35524.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.df02addcbc86d0f0.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.e6cb105066d4c0ac.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.ed4b53c4a46b232e.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.f7a2ae49342eedd5.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.fa032b1c304fa065.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.feceba09ca890851.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.014798d8aa6036f7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.071c5390eea2e2cd.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.07e3928c33305c30.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.0abb57aa1b451323.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.172358c8748f8843.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.172b9785c99bc0ad.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.174e281db476c7ac.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.179de7355b9c38dc.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.19f59de07acdf2a6.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.1c7d6f4aff4541e2.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.1fd3e79a044d1e10.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.215809c7702064f7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.22154fed7976f972.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.2376f27b4230801b.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.237dd1967fa10523.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.24ae2b0e615de870.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.255a314f4fd35144.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.25a696c025763f79.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.2d0ccdc637d58612.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.3336dfc6d09e36ec.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.3c4ed8c9a7661832.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.4888ce0e53d8f4a7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.4be5ffc9bf0fcb12.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.56ec8d63a11d3f2c.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.5a975590252897f1.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.5af72fa9f51d4210.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.5bbdfabd5dbcc208.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.606a58d886ca7051.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.60d325bd8b47be6a.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.6b5daf4e993de0ea.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.73ff7c849f4afaf7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.75a07a249aa8495e.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.7e647bf0665159b0.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.80db02befbb43d0f.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.8132cd7ea40393f2.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.829ff4059040981e.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.84550315d6dcdc1d.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.86404a1dbbe87dc7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.9066138cf8446511.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.9154f4f6dfe0af9c.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.932c9d2d33d9c04b.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.93336378a7df4d97.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.abf1a33d7794f280.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.adb132dac14a123a.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.adf5a23b0f10b14f.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.af1f8650daa83805.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.b25d1bc151b02964.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.b71d540ec115e4e1.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.b8a55995f0769178.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.be02cbaff7f9de6a.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.bedafcd1bc34ccc7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.c008608bc1b3332f.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.c17c6eeabee1f14c.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.c2f3454b6bc5c645.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.c5b9d98f9537b001.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.cdf360b5563e4829.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.ce4f4ee2489f2e1e.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.d05d3d1bc38761d6.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.d4665ac4f712fe05.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.d8dff4e3ccf35524.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.df02addcbc86d0f0.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.e6cb105066d4c0ac.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.e76192172cc0e407.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.ed4b53c4a46b232e.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.f7a2ae49342eedd5.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.fa032b1c304fa065.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\app\\layout.feceba09ca890851.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.014798d8aa6036f7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.071c5390eea2e2cd.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.07e3928c33305c30.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.0abb57aa1b451323.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.0bd39bf400481f06.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.172358c8748f8843.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.172b9785c99bc0ad.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.174e281db476c7ac.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.179de7355b9c38dc.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.19f59de07acdf2a6.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.1c7d6f4aff4541e2.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.1fd3e79a044d1e10.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.215809c7702064f7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.22154fed7976f972.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.2376f27b4230801b.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.237dd1967fa10523.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.24ae2b0e615de870.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.255a314f4fd35144.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.25a696c025763f79.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.2d0ccdc637d58612.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.3336dfc6d09e36ec.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.37132c2108a8a460.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.3c4ed8c9a7661832.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.4888ce0e53d8f4a7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.4be5ffc9bf0fcb12.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.56ec8d63a11d3f2c.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.5a975590252897f1.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.5af72fa9f51d4210.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.5bbdfabd5dbcc208.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.606a58d886ca7051.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.60d325bd8b47be6a.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.659af2b456cb7f7d.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.6b5daf4e993de0ea.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.73ff7c849f4afaf7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.75a07a249aa8495e.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.7e647bf0665159b0.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.80db02befbb43d0f.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.8132cd7ea40393f2.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.829ff4059040981e.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.84550315d6dcdc1d.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.86404a1dbbe87dc7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.9066138cf8446511.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.9154f4f6dfe0af9c.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.932c9d2d33d9c04b.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.93336378a7df4d97.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.942f729562d4b13e.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.a431a5d8bb31e43b.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.abf1a33d7794f280.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.adb132dac14a123a.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.adf5a23b0f10b14f.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.af1f8650daa83805.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.b25d1bc151b02964.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.b71d540ec115e4e1.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.b8a55995f0769178.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.be02cbaff7f9de6a.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.bedafcd1bc34ccc7.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.c008608bc1b3332f.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.c17c6eeabee1f14c.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.c2f3454b6bc5c645.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.c5b9d98f9537b001.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.c7119a6bad16aaf6.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.cdf360b5563e4829.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.ce4f4ee2489f2e1e.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.d05d3d1bc38761d6.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.d4665ac4f712fe05.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.d8dff4e3ccf35524.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.db470b18c6ca49df.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.df02addcbc86d0f0.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.e6cb105066d4c0ac.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.e76192172cc0e407.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.ed4b53c4a46b232e.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.f7a2ae49342eedd5.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.fa032b1c304fa065.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\static\\webpack\\webpack.feceba09ca890851.hot-update.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\admin\\dashboard\\heat-map\\[id]\\page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\admin\\dashboard\\heat-map\\page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\admin\\dashboard\\overview\\page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\admin\\layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\login\\page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\patrol\\[id]\\detail\\page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\patrol\\[id]\\layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\patrol\\layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\patrol\\page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\[locale]\\refresh\\page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\.next\\types\\app\\layout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\dashboard\\heat-map\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\dashboard\\heat-map\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\dashboard\\overview\\[id]\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IUser' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport {\r\n  IDefect,\r\n  IDefectCategory,\r\n  IPatrol,\r\n  IPatrolResult,\r\n  IUser,\r\n} from \"@/app/type\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport Loading from \"@/components/loading\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  HoverCard,\r\n  HoverCardContent,\r\n  HoverCardTrigger,\r\n} from \"@/components/ui/hover-card\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipTrigger,\r\n  TooltipProvider,\r\n} from \"@/components/ui/tooltip\";\r\nimport {\r\n  exportData,\r\n  fetchData,\r\n  formatTime,\r\n  getDefectStatusVariant,\r\n  getInitials,\r\n  getItemTypeVariant,\r\n  getPatrolStatusVariant,\r\n} from \"@/lib/utils\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport { notFound, useParams, useRouter } from \"next/navigation\";\r\nimport Map from \"@/components/map\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { DonutGraph } from \"@/components/donut-graph\";\r\nimport { RadialChart } from \"@/components/radial-chart\";\r\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogTrigger,\r\n  AlertDialogContent,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogDescription,\r\n  AlertDialogCancel,\r\n  AlertDialogAction,\r\n  AlertDialogFooter,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { CardFooter } from \"@/components/ui/card\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport NotFound from \"@/components/not-found\";\r\nimport { UserTooltip } from \"@/components/user-tooltip\";\r\n\r\nexport default function page() {\r\n  const a = useTranslations(\"Alert\");\r\n  const z = useTranslations(\"Zone\");\r\n  const t = useTranslations(\"General\");\r\n  const s = useTranslations(\"Status\");\r\n  const d = useTranslations(\"Dashboard\");\r\n\r\n  const [patrol, setPatrol] = useState<IPatrol>(null);\r\n  const params = useParams();\r\n  const [mounted, setMounted] = useState(false);\r\n  const [defects, setDefects] = useState<IDefect[]>([]);\r\n  const [defectCategory, setDefectCategory] = useState<IDefectCategory>();\r\n  const router = useRouter();\r\n  const locale = useLocale();\r\n\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  const [hoverState, setHoverState] = useState<{\r\n    [key: string]: { isHovered: boolean; isClicked: boolean };\r\n  }>({});\r\n\r\n  const getPatrolData = async () => {\r\n    if (params.id) {\r\n      try {\r\n        const data = await fetchData(\r\n          \"get\",\r\n          `/patrol/${params.id}?preset=true&result=true`,\r\n          true\r\n        );\r\n        setPatrol(data);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch patrol data:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getDefectReported = async () => {\r\n    if (params.id) {\r\n      try {\r\n        const data = await fetchData(\r\n          \"get\",\r\n          `/dashboard/overview/${params.id}`,\r\n          true\r\n        );\r\n        setDefects(data);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch defect data:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getDefectCategory = async () => {\r\n    if (params.id) {\r\n      try {\r\n        const data = await fetchData(\r\n          \"get\",\r\n          `/dashboard/defect-category?patrolId=${params.id}`,\r\n          true\r\n        );\r\n        setDefectCategory(data);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch defect data:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const formatId = (id: number): string => {\r\n    return `P${id.toString().padStart(4, \"0\")}`;\r\n  };\r\n\r\n  const countPatrolResult = (results: IPatrolResult[]) => {\r\n    let total = 0;\r\n    let pass = 0;\r\n    let fail = 0;\r\n    let defect = 0;\r\n    let comment = 0;\r\n\r\n    results?.forEach((result) => {\r\n      if (result.status === false) {\r\n        fail++;\r\n      }\r\n\r\n      if (result.status === true) {\r\n        pass++;\r\n      }\r\n\r\n      if (Array.isArray(result.defects) && result.defects.length > 0) {\r\n        defect++;\r\n      }\r\n\r\n      if (Array.isArray(result.comments) && result.comments.length > 0) {\r\n        comment++;\r\n      }\r\n\r\n      total++;\r\n    });\r\n\r\n    return { total, pass, fail, defect, comment };\r\n  };\r\n\r\n  function getZoneAllDefects(): number[] {\r\n    const zoneIds = new Set<number>();\r\n\r\n    defects.forEach((item) => {\r\n      if (item.zone && item.zone.id) {\r\n        zoneIds.add(item.zone.id);\r\n      }\r\n    });\r\n\r\n    return Array.from(zoneIds);\r\n  }\r\n\r\n  const handleMouseEnter = (id: string) => {\r\n    setHoverState((prev) => ({\r\n      ...prev,\r\n      [id]: { ...prev[id], isHovered: true },\r\n    }));\r\n  };\r\n\r\n  const handleMouseLeave = (id: string) => {\r\n    setHoverState((prev) => ({\r\n      ...prev,\r\n      [id]: { ...prev[id], isHovered: false },\r\n    }));\r\n  };\r\n\r\n  const handleClick = (id: string, e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    setHoverState((prev) => ({\r\n      ...prev,\r\n      [id]: { ...prev[id], isClicked: !prev[id]?.isClicked },\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    // ฟังก์ชันที่ใช้เพื่ออัพเดตความกว้างหน้าจอ\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n\r\n    // เพิ่ม event listener สำหรับ resize\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // ลบ event listener เมื่อคอมโพเนนต์ถูกทำลาย\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        await getPatrolData();\r\n        await getDefectReported();\r\n        await getDefectCategory();\r\n      } catch (error) {\r\n        console.error(\"Error loading data: \", error);\r\n      } finally {\r\n        setMounted(true);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (!mounted) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (mounted && !patrol?.id) {\r\n    return notFound();\r\n  }\r\n\r\n  const inspectors = patrol?.patrolChecklists\r\n    .map((checklist) => checklist.inspector) // ดึง inspector ออกจาก patrolChecklists\r\n    .filter(\r\n      (inspector, index, self) =>\r\n        self.findIndex((i) => i.id === inspector.id) === index // กรอง inspector ที่ซ้ำกันออก\r\n    );\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      {/* //first block */}\r\n      <div className=\"flex flex-col gap-4 bg-card px-6 py-4 rounded-md\">\r\n        <div className=\"flex flex-row justify-between  rounded-md\">\r\n          <p className=\"text-muted-foreground text-lg font-semibold text-\">\r\n            {formatTime(patrol.date, locale, false)}\r\n          </p>\r\n          <div className=\"flex flex-row gap-2\">\r\n            <Button\r\n              size=\"lg\"\r\n              variant=\"secondary\"\r\n              className=\"flex flex-row items-center\"\r\n              onClick={() =>\r\n                router.push(`/${locale}/admin/dashboard/overview/`)\r\n              }\r\n            >\r\n              <p>{t(\"Back\")}</p>\r\n            </Button>\r\n\r\n            <AlertDialog open={isAlertOpen}>\r\n              <AlertDialogTrigger asChild>\r\n                <Button\r\n                  size=\"lg\"\r\n                  variant=\"primary\"\r\n                  className=\"flex flex-row items-center\"\r\n                  onClick={() => handleOpenDialog()}\r\n                >\r\n                  <span className=\"material-symbols-outlined text-card w-[22px] h-[22px]\">\r\n                    ios_share\r\n                  </span>\r\n                  <p>{t(\"Export\")}</p>\r\n                </Button>\r\n              </AlertDialogTrigger>\r\n\r\n              <AlertDialogContent className=\"w-[400px] h-fit px-6 py-4 \">\r\n                <AlertDialogHeader className=\"flex flex-col gap-2\">\r\n                  <div className=\"flex flex-col gap-1\">\r\n                    <p className=\"text-lg font-semibold text-muted-foreground\">\r\n                      {formatTime(patrol.date, locale, false)}\r\n                    </p>\r\n                    <AlertDialogTitle>\r\n                      <p className=\"text-2xl font-semibold\">\r\n                        {patrol.preset.title}\r\n                      </p>\r\n                    </AlertDialogTitle>\r\n                  </div>\r\n\r\n                  <AlertDialogDescription className=\"flex flex-col gap-2\">\r\n                    <div className=\"flex flex-row gap-1\">\r\n                      <span className=\"material-symbols-outlined\">\r\n                        description\r\n                      </span>\r\n                      <p className=\"text-muted-foreground text-xl font-semibold\">\r\n                        {formatId(patrol.id)}\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <HoverCard\r\n                        open={\r\n                          hoverState[\"export\"]?.isClicked ||\r\n                          hoverState[\"export\"]?.isHovered\r\n                        }\r\n                      >\r\n                        <HoverCardTrigger\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleClick(\"export\", e);\r\n                          }}\r\n                          onMouseEnter={() => handleMouseEnter(\"export\")}\r\n                          onMouseLeave={() => handleMouseLeave(\"export\")}\r\n                          asChild\r\n                        >\r\n                          <div className=\"flex text-muted-foreground items-center cursor-pointer\">\r\n                            <span className=\"material-symbols-outlined me-1\">\r\n                              person_search\r\n                            </span>\r\n                            {inspectors.length > 0 && (\r\n                              <div className=\"flex items-center me-1 truncate max-w-[190px]\">\r\n                                <p className=\"text-xl me-2.5 truncate\">\r\n                                  {inspectors[0].profile.name}\r\n                                </p>\r\n                              </div>\r\n                            )}\r\n                            {inspectors.map((inspector, idx) => {\r\n                              return (\r\n                                <Avatar\r\n                                  key={idx}\r\n                                  className=\"custom-shadow ms-[-10px]\"\r\n                                >\r\n                                  <AvatarImage\r\n                                    src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector?.profile?.image?.path}`}\r\n                                  />\r\n                                  <AvatarFallback id={inspector.id.toString()}>\r\n                                    {getInitials(inspector.profile.name)}\r\n                                  </AvatarFallback>\r\n                                </Avatar>\r\n                              );\r\n                            })}\r\n\r\n                            {inspectors.length > 5 && (\r\n                              <Avatar className=\"custom-shadow flex items-center justify-center ms-[-10px]\">\r\n                                <AvatarImage src=\"\" />\r\n                                <span className=\"absolute text-card-foreground text-[16px] font-semibold\">\r\n                                  +{inspectors.length - 5}\r\n                                </span>\r\n                                <AvatarFallback id={\"0\"}></AvatarFallback>\r\n                              </Avatar>\r\n                            )}\r\n                          </div>\r\n                        </HoverCardTrigger>\r\n                        <HoverCardContent\r\n                          side=\"bottom\"\r\n                          align=\"start\"\r\n                          className=\"flex flex-col w-[300px] border-none gap-4 px-6 py-4 custom-shadow\"\r\n                        >\r\n                          <div className=\"flex items-center justify-center gap-1\">\r\n                            <span className=\"material-symbols-outlined\">\r\n                              person_search\r\n                            </span>\r\n                            <p className=\"text-lg font-semibold\">\r\n                              {t(\"InspectorList\")}\r\n                            </p>\r\n                          </div>\r\n                          {inspectors.map((inspector, idx) => {\r\n                            return (\r\n                              <div\r\n                                key={idx}\r\n                                className=\"flex items-center cursor-pointer w-full py-2 gap-1 border-b-2 border-secondary\"\r\n                              >\r\n                                <UserTooltip user={inspector}>\r\n                                  <Avatar className=\"custom-shadow ms-[-10px] me-2.5\">\r\n                                    <AvatarImage\r\n                                      src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector?.profile?.image?.path}`}\r\n                                    />\r\n                                    <AvatarFallback id={inspector.id.toString()}>\r\n                                      {getInitials(inspector.profile.name)}\r\n                                    </AvatarFallback>\r\n                                  </Avatar>\r\n                                </UserTooltip>\r\n                                <p className=\"text-lg truncate\">{inspector.profile.name}</p>\r\n                              </div>\r\n                            );\r\n                          })}\r\n                          <div className=\"flex items-center justify-between w-full text-muted-foreground\">\r\n                            <p className=\"text-lg font-semibold\">\r\n                              {t(\"Total\")}\r\n                            </p>\r\n                            <p className=\"text-lg font-semibold\">\r\n                              {inspectors.length}\r\n                            </p>\r\n                          </div>\r\n                        </HoverCardContent>\r\n                      </HoverCard>\r\n                    </div>\r\n\r\n                    <CardFooter className=\"p-0 gap-0\">\r\n                      <div className=\"flex gap-2 items-center w-full\">\r\n                        <div className=\"flex gap-1 text-primary items-center\">\r\n                          <span className=\"material-symbols-outlined\">\r\n                            checklist\r\n                          </span>\r\n                          <p className=\"text-xl font-semibold\">\r\n                            {countPatrolResult(patrol.results).total}\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"flex gap-1 text-orange items-center\">\r\n                          <span className=\"material-symbols-outlined\">\r\n                            close\r\n                          </span>\r\n                          <p className=\"text-xl font-semibold\">\r\n                            {countPatrolResult(patrol.results).fail}\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"flex gap-1 text-destructive items-center\">\r\n                          <span className=\"material-symbols-outlined\">\r\n                            error\r\n                          </span>\r\n                          <p className=\"text-xl font-semibold\">\r\n                            {countPatrolResult(patrol.results).defect}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </CardFooter>\r\n                  </AlertDialogDescription>\r\n                </AlertDialogHeader>\r\n                <AlertDialogFooter>\r\n                  <AlertDialogCancel onClick={() => handleCloseDialog()}>\r\n                    {t(\"Cancel\")}\r\n                  </AlertDialogCancel>\r\n                  <AlertDialogAction\r\n                    className=\"bg-primary text-primary-foreground shadow hover:bg-primary/90 h-10 rounded-md px-4 text-lg font-bold\"\r\n                    onClick={() => {\r\n                      patrol.status !== \"completed\"\r\n                        ? (toast({\r\n                          variant: \"error\",\r\n                          title: a(\"ExportPatrolNoData\"),\r\n                          description: a(\r\n                            \"ExportPatrolStatusNotCompleteDescription\"\r\n                          ),\r\n                        }),\r\n                          handleCloseDialog())\r\n                        : (exportData(patrol, patrol.results),\r\n                          toast({\r\n                            variant: \"success\",\r\n                            title: a(\"ExportReportPatrolTitle\"),\r\n                            description: a(\"ExportReportPatrolDescription\"),\r\n                          }));\r\n                    }}\r\n                  >\r\n                    <span className=\"material-symbols-outlined text-2xl me-2\">\r\n                      ios_share\r\n                    </span>\r\n                    {t(\"Export\")}\r\n                  </AlertDialogAction>\r\n                </AlertDialogFooter>\r\n              </AlertDialogContent>\r\n            </AlertDialog>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"text-2xl font-bold\">\r\n          <p>{patrol?.preset.title}</p>\r\n        </div>\r\n\r\n        <div className=\"flex flex-col gap-2\">\r\n          <div className=\"flex flex-row justify-between\">\r\n            <div className=\"flex flex-row gap-1 justify-start\">\r\n              <span className=\"material-symbols-outlined text-muted-foreground w-[22px] h-[22px]\">\r\n                description\r\n              </span>\r\n              <p className=\"text-lg text-muted-foreground\">\r\n                {formatId(patrol.id)}\r\n              </p>\r\n            </div>\r\n\r\n            <div>\r\n              <BadgeCustom\r\n                iconName={getPatrolStatusVariant(patrol.status).iconName}\r\n                showIcon={true}\r\n                variant={getPatrolStatusVariant(patrol.status).variant}\r\n              >\r\n                {s(patrol.status)}\r\n              </BadgeCustom>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex flex-row justify-between\">\r\n            <div className=\"flex flex-col gap-2 p-0\">\r\n              <HoverCard\r\n                open={\r\n                  hoverState[\"overview\"]?.isClicked ||\r\n                  hoverState[\"overview\"]?.isHovered\r\n                }\r\n              >\r\n                <HoverCardTrigger\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleClick(\"overview\", e);\r\n                  }}\r\n                  onMouseEnter={() => handleMouseEnter(\"overview\")}\r\n                  onMouseLeave={() => handleMouseLeave(\"overview\")}\r\n                  asChild\r\n                >\r\n                  <div className=\"flex text-muted-foreground cursor-pointer items-center\">\r\n                    <span className=\"material-symbols-outlined me-1\">\r\n                      person_search\r\n                    </span>\r\n                    {inspectors.length > 0 && (\r\n                      <div className=\"flex items-center me-1 truncate max-w-[190px]\">\r\n                        <p className=\"text-xl me-2.5 truncate\">\r\n                          {inspectors[0].profile.name}\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                    {inspectors.map((inspector, idx) => {\r\n                      return (\r\n                        <Avatar key={idx} className=\"custom-shadow ms-[-10px]\">\r\n                          <AvatarImage\r\n                            src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector?.profile?.image?.path}`}\r\n                          />\r\n                          <AvatarFallback id={inspector.id.toString()}>\r\n                            {getInitials(inspector.profile.name)}\r\n                          </AvatarFallback>\r\n                        </Avatar>\r\n                      );\r\n                    })}\r\n\r\n                    {inspectors.length > 5 && (\r\n                      <Avatar className=\"custom-shadow flex items-center justify-center ms-[-10px]\">\r\n                        <AvatarImage src=\"\" />\r\n                        <span className=\"absolute text-card-foreground text-base font-semibold\">\r\n                          +{inspectors.length - 5}\r\n                        </span>\r\n                        <AvatarFallback id={\"0\"}></AvatarFallback>\r\n                      </Avatar>\r\n                    )}\r\n                  </div>\r\n                </HoverCardTrigger>\r\n                <HoverCardContent\r\n                  side=\"bottom\"\r\n                  align=\"start\"\r\n                  className=\"flex flex-col w-[300px] border-none gap-4 px-6 py-4 custom-shadow\"\r\n                >\r\n                  <div className=\"flex items-center justify-center gap-1\">\r\n                    <span className=\"material-symbols-outlined\">\r\n                      person_search\r\n                    </span>\r\n                    <p className=\"text-lg font-semibold\">\r\n                      {t(\"InspectorList\")}\r\n                    </p>\r\n                  </div>\r\n                  {inspectors.map((inspector, idx) => {\r\n                    return (\r\n                      <div\r\n                        key={idx}\r\n                        className=\"flex items-center cursor-pointer w-full py-2 gap-1 border-b-2 border-secondary\"\r\n                      >\r\n                        <UserTooltip user={inspector}>\r\n                          <Avatar className=\"custom-shadow ms-[-10px] me-2.5\">\r\n                            <AvatarImage\r\n                              src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector?.profile?.image?.path}`}\r\n                            />\r\n                            <AvatarFallback id={inspector.id.toString()}>\r\n                              {getInitials(inspector.profile.name)}\r\n                            </AvatarFallback>\r\n                          </Avatar>\r\n                        </UserTooltip>\r\n                        <p className=\"text-lg truncate\">{inspector.profile.name}</p>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                  <div className=\"flex items-center justify-between w-full text-muted-foreground\">\r\n                    <p className=\"text-lg font-semibold\">\r\n                      {t(\"Total\")}\r\n                    </p>\r\n                    <p className=\"text-lg font-semibold\">\r\n                      {inspectors.length}\r\n                    </p>\r\n                  </div>\r\n                </HoverCardContent>\r\n              </HoverCard>\r\n            </div>\r\n\r\n            <div>\r\n              <div className=\"flex flex-row gap-2\">\r\n                <div className=\"flex gap-1 text-primary items-center\">\r\n                  <span className=\"material-symbols-outlined\">checklist</span>\r\n                  <p className=\"text-xl font-semibold\">\r\n                    {countPatrolResult(patrol.results).total}\r\n                  </p>\r\n                </div>\r\n                <div className=\"flex gap-1 text-orange items-center\">\r\n                  <span className=\"material-symbols-outlined\">close</span>\r\n                  <p className=\"text-xl font-semibold\">\r\n                    {countPatrolResult(patrol.results).fail}\r\n                  </p>\r\n                </div>\r\n                <div className=\"flex gap-1 text-destructive items-center\">\r\n                  <span className=\"material-symbols-outlined\">error</span>\r\n                  <p className=\"text-xl font-semibold\">\r\n                    {countPatrolResult(patrol.results).defect}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ScrollArea\r\n        className=\"h-full w-full rounded-md flex-1 \r\n            [&>[data-radix-scroll-area-viewport]]:max-h-[calc(100vh-400px)]\"\r\n      >\r\n        <div className=\"flex flex-col gap-4\">\r\n          {/* second block */}\r\n          <div className=\"grid xl:grid-cols-4 gap-4 sm:grid-cols-2 \">\r\n            <div className=\"flex flex-col gap-4 bg-card px-6 py-4 rounded-md\">\r\n              <div className=\"flex flex-row justify-between\">\r\n                <p className=\"text-xl\">{d(\"TotalPass\")}</p>\r\n                <div className=\"flex items-center justify-center bg-green/20 rounded-full h-9 w-9\">\r\n                  <span className=\"flex justify-center items-center material-symbols-outlined text-green w-[22px] h-[22px]\">\r\n                    check\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <p className=\"text-2xl font-bold\">\r\n                {countPatrolResult(patrol.results).pass}\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"flex flex-col gap-4 bg-card px-6 py-4 rounded-md\">\r\n              <div className=\"flex flex-row justify-between\">\r\n                <p className=\"text-xl\">{d(\"TotalFails\")}</p>\r\n                <div className=\"flex items-center justify-center bg-destructive/20 rounded-full h-9 w-9\">\r\n                  <span className=\"flex justify-center items-center material-symbols-outlined text-destructive w-[22px] h-[22px]\">\r\n                    close\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <p className=\"text-2xl font-bold\">\r\n                {countPatrolResult(patrol.results).fail}\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"flex flex-col gap-4 bg-card px-6 py-4 rounded-md\">\r\n              <div className=\"flex flex-row justify-between\">\r\n                <p className=\"text-xl\">{d(\"TotalReports\")}</p>\r\n                <div className=\"flex items-center justify-center bg-orange/20 rounded-full h-9 w-9\">\r\n                  <span className=\"flex justify-center items-center material-symbols-outlined text-orange w-[22px] h-[22px]\">\r\n                    campaign\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <p className=\"text-2xl font-bold\">\r\n                {countPatrolResult(patrol.results).defect}\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"flex flex-col gap-4 bg-card px-6 py-4 rounded-md\">\r\n              <div className=\"flex flex-row justify-between\">\r\n                <p className=\"text-xl\">{d(\"TotalComments\")}</p>\r\n                <div className=\"flex items-center justify-center bg-yellow/20 rounded-full h-9 w-9\">\r\n                  <span className=\"flex justify-center items-center material-symbols-outlined text-yellow w-[22px] h-[22px]\">\r\n                    chat\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <p className=\"text-2xl font-bold\">\r\n                {countPatrolResult(patrol.results).comment}\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* third block */}\r\n          <div className=\"flex flex-col rounded-md px-6 py-4 bg-card gap-4\">\r\n            <p className=\"text-2xl font-bold\">{d(\"DefectReported\")}</p>\r\n\r\n            <div className=\"rounded-md map-container cursor-default user-select-none \">\r\n              <Map disable={true} initialSelectedZones={getZoneAllDefects()} />\r\n            </div>\r\n\r\n            <ScrollArea className=\"rounded-md sm:w-[654px] lg:w-full whitespace-nowrap\">\r\n              <Table className=\"overflow-hidden sm:w-max lg:w-full\">\r\n                <TableHeader>\r\n                  <TableRow className=\"grid grid-cols-12 w-full\">\r\n                    <TableHead className=\"sm:col-span-3 sm:w-[200px] lg:col-span-2\">\r\n                      {t(\"Name\")}\r\n                    </TableHead>\r\n                    <TableHead className=\"sm:col-span-1 lg:col-span-2\">\r\n                      {t(\"Type\")}\r\n                    </TableHead>\r\n                    <TableHead className=\"sm:col-span-2 lg:col-span-2\">\r\n                      {t(\"Reporter\")}\r\n                    </TableHead>\r\n                    <TableHead className=\"sm:col-span-2 lg:col-span-2\">\r\n                      {t(\"Timestamp\")}\r\n                    </TableHead>\r\n                    <TableHead className=\"sm:col-span-2 lg:col-span-2\">\r\n                      {t(\"Zone\")}\r\n                    </TableHead>\r\n                    <TableHead className=\"sm:col-span-2 lg:col-span-2\">\r\n                      {t(\"Status\")}\r\n                    </TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody className=\"block overflow-hidden\">\r\n                  <ScrollArea className=\"h-[300px]\">\r\n                    {defects?.length === 0 ? (\r\n                      <tr className=\"flex sm:w-[654px] sm:h-[388px] lg:w-full lg:h-full\">\r\n                        <td colSpan={5} className=\"w-full text-center py-0\">\r\n                          <NotFound\r\n                            icon=\"campaign\"\r\n                            title=\"NoDefectsReported\"\r\n                            description=\"NoDefectsDescription\"\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                    ) : (\r\n                      defects.map((defect, index) => (\r\n                        <TableRow\r\n                          key={index}\r\n                          className=\"grid grid-cols-12 w-full items-center\"\r\n                        >\r\n                          <TableCell className=\"sm:text-sm lg:text-base sm:col-span-3 sm:w-[200px] lg:col-span-2 flex items-center min-w-0\">\r\n                            <TooltipProvider>\r\n                              <Tooltip>\r\n                                <TooltipTrigger asChild>\r\n                                  <span className=\"truncate\">\r\n                                    {defect.name}\r\n                                  </span>\r\n                                </TooltipTrigger>\r\n                                <TooltipContent\r\n                                  side=\"bottom\"\r\n                                  className=\"ml-[129px]\"\r\n                                >\r\n                                  <p className=\"max-w-[200px] break-words\">\r\n                                    {defect.name}\r\n                                  </p>\r\n                                </TooltipContent>\r\n                              </Tooltip>\r\n                            </TooltipProvider>\r\n                          </TableCell>\r\n                          <TableCell className=\"sm:text-sm lg:text-base sm:col-span-1 lg:col-span-2 flex items-center\">\r\n                            <BadgeCustom\r\n                              iconName={\r\n                                getItemTypeVariant(defect.type).iconName\r\n                              }\r\n                              showIcon={true}\r\n                              shape=\"square\"\r\n                              variant={getItemTypeVariant(defect.type).variant}\r\n                              hideText={windowWidth > 1024 ? false : true}\r\n                            >\r\n                              {s(defect.type)}\r\n                            </BadgeCustom>\r\n                          </TableCell>\r\n                          <TableCell className=\"sm:col-span-2 lg:col-span-2\">\r\n                            <UserTooltip user={defect.user}>\r\n                              <div className=\"flex items-center gap-2\">\r\n                                <div className=\"flex items-center gap-1\">\r\n                                  <Avatar className=\"custom-shadow h-[35px] w-[35px]\">\r\n                                    <AvatarImage\r\n                                      src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${defect.user.profile.image?.path}`}\r\n                                    />\r\n                                    <AvatarFallback\r\n                                      id={defect.user.id.toString()}\r\n                                    >\r\n                                      {getInitials(defect.user.profile.name)}\r\n                                    </AvatarFallback>\r\n                                  </Avatar>\r\n\r\n                                  <p className=\"text-card-foreground text-lg xl:block truncate\">\r\n                                    {defect.user.profile.name}\r\n                                  </p>\r\n                                </div>\r\n                              </div>\r\n                            </UserTooltip>\r\n                          </TableCell>\r\n                          <TableCell className=\"sm:col-span-2 lg:col-span-2 ps-4\">\r\n                            <p>{formatTime(defect.startTime, locale)}</p>\r\n                          </TableCell>\r\n                          <TableCell className=\"sm:col-span-2 lg:col-span-2\">\r\n                            <p>{z(defect.zone.name)}</p>\r\n                          </TableCell>\r\n                          <TableCell className=\"sm:text-sm lg:text-base sm:col-span-2 lg:col-span-2 flex items-center\">\r\n                            <BadgeCustom\r\n                              iconName={\r\n                                getDefectStatusVariant(defect.status).iconName\r\n                              }\r\n                              showIcon={true}\r\n                              showTime={false}\r\n                              variant={\r\n                                getDefectStatusVariant(defect.status).variant\r\n                              }\r\n                              hideText={windowWidth > 1024 ? false : true}\r\n                            >\r\n                              {s(defect.status)}\r\n                            </BadgeCustom>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))\r\n                    )}\r\n                    <ScrollBar orientation=\"vertical\" />\r\n                  </ScrollArea>\r\n                </TableBody>\r\n              </Table>\r\n              <ScrollBar orientation=\"horizontal\" />\r\n            </ScrollArea>\r\n          </div>\r\n          {/* forth block */}\r\n          <div className=\"flex xl:flex-row gap-4 justify-between sm:flex-col\">\r\n            {/* Patrol Duration */}\r\n            <div className=\"flex flex-col xl:flex-row gap-4 justify-between w-full\">\r\n              <div className=\"flex flex-col py-4 px-6 w-full rounded-md custom-shadow bg-card\">\r\n                <h1 className=\"text-2xl font-semibold text-card-foreground\">\r\n                  {d(\"PatrolDuration\")}\r\n                </h1>\r\n                <div className=\"flex flex-col\">\r\n                  <RadialChart duration={patrol.duration} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Defect Category */}\r\n            <div className=\"flex flex-col xl:flex-row gap-4 justify-between w-full\">\r\n              <div className=\"flex flex-col py-4 px-6 w-full rounded-md custom-shadow bg-card\">\r\n                <h1 className=\"text-2xl font-semibold text-card-foreground\">\r\n                  {d(\"DefectCategory\")}\r\n                </h1>\r\n                <DonutGraph\r\n                  key={Date.now()}\r\n                  chartData={defectCategory.chartData}\r\n                  trend={null}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ScrollArea>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\dashboard\\overview\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useCallback' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dateError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":72,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setSelectedDate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":74,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":464,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":464,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused args must match /^_/u.","line":847,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":847,"endColumn":64}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DayPickerDateRange' is defined but never used. Allowed unused vars must match /^_/u.","line":42,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport React, { useCallback, useMemo, useRef } from 'react'\r\nimport { useEffect, useState } from \"react\";\r\nimport Textfield from \"@/components/textfield\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\";\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuRadioGroup,\r\n  DropdownMenuRadioItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport { countPatrolResult, exportData, fetchData, formatTime, getPatrolStatusVariant } from \"@/lib/utils\";\r\nimport {\r\n  DatePickerWithRange,\r\n} from \"@/components/date-picker\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectGroup,\r\n  SelectItem,\r\n  SelectLabel,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport {\r\n  IPatrol,\r\n  IPreset,\r\n  IPatrolResult,\r\n} from \"@/app/type\";\r\nimport { IFilterPatrol } from \"@/app/type\";\r\nimport { sortData } from \"@/lib/utils\";\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport { DateRange, DateRange as DayPickerDateRange } from 'react-day-picker';\r\nimport Loading from \"@/components/loading\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport NotFound from \"@/components/not-found\";\r\nimport { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from \"@/components/ui/tooltip\";\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { useSocket } from '@/components/socket-provider';\r\nimport { useRouter } from 'next/navigation';\r\n\r\nexport default function Page() {\r\n  const a = useTranslations(\"Alert\");\r\n  const t = useTranslations(\"General\");\r\n  const s = useTranslations(\"Status\");\r\n\r\n  const [socketData, setSocketData] = useState<IPatrolResult[]>([]);\r\n  const [allPatrols, setAllPatrols] = useState<IPatrol[]>([]);\r\n  const [allPresets, setAllPresets] = useState<IPreset[]>();\r\n  const [selectedPatrolId, setSelectedPatrolId] = useState<number | null>(null);\r\n\r\n  const [dateError, setDateError] = useState<string | null>(null);\r\n  const [mounted, setMounted] = useState<boolean>(false);\r\n  const [selectedDate, setSelectedDate] = useState<string>();\r\n  const [checkedItems, setCheckedItems] = useState<Record<string, boolean>>({});\r\n\r\n  const [isSortOpen, setIsSortOpen] = useState(false);\r\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n\r\n  const { socket, isConnected } = useSocket();\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  const router = useRouter();\r\n  const locale = useLocale();\r\n\r\n  const mergedPatrols = useMemo(() => {\r\n    if (!socketData || socketData.length === 0) {\r\n      return allPatrols;\r\n    }\r\n\r\n    return allPatrols.map((patrol) => {\r\n      if (!patrol.results || patrol.results.length === 0) {\r\n        return patrol;\r\n      }\r\n\r\n      const updatedResults = patrol.results\r\n        .map((existingResult) => {\r\n          const matchingSocketResult = socketData.find((result) => result.id === existingResult.id);\r\n          return matchingSocketResult ? { ...existingResult, ...matchingSocketResult } : existingResult;\r\n        })\r\n        .filter((result) => result.id); // กรองเฉพาะที่มี id เท่านั้น\r\n\r\n      return { ...patrol, results: updatedResults };\r\n    });\r\n  }, [allPatrols, socketData]);\r\n\r\n  // ใช้ useEffect เพื่อตั้งค่า allPatrols ถ้า mergedPatrols เปลี่ยนแปลง\r\n  useEffect(() => {\r\n    if (JSON.stringify(allPatrols) !== JSON.stringify(mergedPatrols)) {\r\n      setAllPatrols(mergedPatrols);\r\n    }\r\n  }, [mergedPatrols]);\r\n\r\n  const getPatrolData = async () => {\r\n    try {\r\n      const queryString = buildQueryString(filter, searchTerm);\r\n      const patrols = await fetchData(\"get\", `/patrols?${queryString}`, true);\r\n      setAllPatrols(patrols);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch patrol data:\", error);\r\n    }\r\n  };\r\n\r\n  const getPresetData = async () => {\r\n    try {\r\n      const preset = await fetchData(\"get\", \"/presets?latest=true\", true);\r\n      setAllPresets(preset);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch patrol data:\", error);\r\n    }\r\n  };\r\n\r\n  const joinedRoomsRef = useRef(new Set());\r\n\r\n  const handleOpenAlert = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleCloseAlert = () => {\r\n    setIsAlertOpen(false)\r\n  }\r\n\r\n  const handleOpenDialog = (patrolId: number) => {\r\n    setSelectedPatrolId(patrolId);\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setSelectedPatrolId(null)\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  const handleRemovePatrol = (patrolId: number) => {\r\n    removePatrol(patrolId)\r\n  };\r\n\r\n  const handleDetail = (patrolId: number) => {\r\n    router.push(`/${locale}/admin/dashboard/overview/${patrolId}`)\r\n  }\r\n\r\n  const removePatrol = async (patrolId: number) => {\r\n    try {\r\n      await fetchData(\"delete\", `/patrol/${patrolId}`, true);\r\n      socket.emit(\"delete_patrol\", patrolId);\r\n      toast({\r\n        variant: \"success\",\r\n        title: a(\"PatrolRemoveSuccessTitle\"),\r\n        description: a(\"PatrolRemoveSuccessDescription\"),\r\n      });\r\n      getPatrolData()\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  // search sort filter\r\n  const handleSortChange = (type: string, value: string) => {\r\n    setSort((prevSort) => ({\r\n      ...prevSort,\r\n      [type]: value,\r\n    }));\r\n  };\r\n\r\n  const initialFilter = {\r\n    presetTitle: \"All\",\r\n    patrolStatuses: [\"pending\", \"on_going\", \"scheduled\"],\r\n    dateRange: { start: undefined, end: undefined },\r\n  };\r\n\r\n  const getStoredFilter = () => {\r\n    if (typeof window !== 'undefined') {\r\n      const storedFilter = localStorage.getItem('filter');\r\n      if (storedFilter) {\r\n        return JSON.parse(storedFilter);\r\n      }\r\n    }\r\n    return initialFilter;\r\n  };\r\n\r\n  const [filter, setFilter] = useState<IFilterPatrol | null>(getStoredFilter())\r\n\r\n  const [sort, setSort] = useState<{ by: string; order: string }>({\r\n    by: \"Doc No.\",\r\n    order: \"Ascending\",\r\n  });\r\n\r\n  const toggleStatusFilter = (status: string, checked: boolean) => {\r\n    if (checked) {\r\n      setFilter((prev) => {\r\n        if (prev) {\r\n          return {\r\n            ...prev,\r\n            patrolStatuses: [...prev.patrolStatuses, status],\r\n          };\r\n        } else {\r\n          return {\r\n            presetTitle: \"All\",\r\n            patrolStatuses: [],\r\n            dateRange: { start: undefined, end: undefined }\r\n          }\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      setFilter((prev) => {\r\n        if (prev) {\r\n          return {\r\n            ...prev,\r\n            patrolStatuses: prev.patrolStatuses.filter((s) => s !== status),\r\n          };\r\n        }\r\n        return prev;\r\n      });\r\n    }\r\n  };\r\n\r\n  const applyFilter = () => {\r\n    const fetchData = async () => {\r\n      await getPatrolData()\r\n    };\r\n    fetchData();\r\n  };\r\n\r\n  const resetFilter = () => {\r\n    setFilter(initialFilter)\r\n  };\r\n\r\n  const handleDateSelect = (dateRange: DateRange) => {\r\n    const startDate = dateRange.from ?? null;\r\n    const endDate = dateRange.to\r\n      ? new Date(new Date(dateRange.to).setHours(23, 59, 59, 999))\r\n      : null;\r\n    setFilter({\r\n      presetTitle: filter?.presetTitle || null,\r\n      patrolStatuses: filter?.patrolStatuses || [],\r\n      dateRange: {\r\n        start: startDate || undefined,\r\n        end: endDate || undefined\r\n      }\r\n    });\r\n  };\r\n\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const handleSearch = (event: any) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const buildQueryString = (filter: IFilterPatrol | null, searchTerm: string) => {\r\n    const params: Record<string, string | undefined> = {};\r\n\r\n    // เพิ่ม search term ถ้ามี\r\n    if (searchTerm) params.search = searchTerm;\r\n\r\n    // เพิ่ม preset filter ถ้าไม่ใช่ \"All\"\r\n    if (filter?.presetTitle && filter.presetTitle !== \"All\") {\r\n      params.preset = filter.presetTitle;\r\n    }\r\n\r\n    // เพิ่ม status filter\r\n    if (filter?.patrolStatuses?.length) {\r\n      params.status = filter.patrolStatuses.join(\",\");\r\n    }\r\n\r\n    // เพิ่ม startDate\r\n    if (filter?.dateRange?.start) {\r\n      params.startDate = filter?.dateRange.start.toISOString();\r\n    }\r\n\r\n    // เพิ่ม endDate \r\n    if (filter?.dateRange?.end) {\r\n      params.endDate = filter?.dateRange?.end.toISOString();\r\n    }\r\n\r\n    return new URLSearchParams(params).toString();\r\n  };\r\n\r\n  const formatId = (id: number): string => {\r\n    return `P${id.toString().padStart(4, '0')}`;\r\n  };\r\n\r\n  const handleCheckboxChange = (patrolId: number, checked: boolean) => {\r\n    setCheckedItems((prev) => ({\r\n      ...prev,\r\n      [patrolId]: checked,\r\n    }));\r\n  };\r\n\r\n  const handleSelectAllCheckbox = (checked: boolean) => {\r\n    const newCheckedItems = allPatrols.reduce((acc, patrol) => {\r\n      acc[patrol.id] = checked;\r\n      return acc;\r\n    }, {} as Record<string, boolean>);\r\n    setCheckedItems(newCheckedItems);\r\n  };\r\n\r\n  const exportPatrol = (allPatrols: IPatrol[], checkedItems: Record<string, boolean>) => {\r\n    const selectedPatrols = allPatrols.filter((p) => checkedItems[p.id]);\r\n\r\n    if (allPatrols.length === 0 || selectedPatrols.length === 0) {\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"ExportPatrolNoData\"),\r\n        description: a(\"ExportPatrolNoDataDescription\"),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const hasIncompletePatrol = selectedPatrols.some((patrol) => patrol.status !== \"completed\");\r\n\r\n    if (hasIncompletePatrol) {\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"ExportPatrolNoData\"),\r\n        description: a(\"ExportPatrolStatusNotCompleteDescription\"),\r\n      });\r\n      return;\r\n    }\r\n\r\n    selectedPatrols.forEach((patrol) => {\r\n      const results = patrol.results;\r\n\r\n      try {\r\n        exportData(patrol, results);\r\n        toast({\r\n          variant: \"success\",\r\n          title: a(\"ExportReportPatrolTitle\"),\r\n          description: a(\"ExportReportPatrolDescription\"),\r\n        });\r\n      } catch (error) {\r\n        console.error(`Export failed for patrol ID: ${patrol.id}`, error);\r\n      }\r\n    });\r\n  };\r\n\r\n  const calculateProgress = (patrolResults: IPatrolResult[]) => {\r\n    if (!patrolResults) return 0;\r\n    const checkedResults = patrolResults.filter(\r\n      (res) => res.status !== null\r\n    ).length;\r\n    const totalResults = patrolResults.length;\r\n\r\n    if (totalResults === 0) return 0;\r\n    return (checkedResults / totalResults) * 100;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await getPresetData();\r\n      await getPatrolData();\r\n    };\r\n    fetchData();\r\n    // ฟังก์ชันที่ใช้เพื่ออัพเดตความกว้างหน้าจอ\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n\r\n    // เพิ่ม event listener สำหรับ resize\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    // ลบ event listener เมื่อคอมโพเนนต์ถูกทำลาย\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await getPatrolData();\r\n    };\r\n    fetchData();\r\n  }, [searchTerm]);\r\n\r\n  useEffect(() => {\r\n    const initializeSocketListeners = () => {\r\n      // ฟังก์ชันรับข้อมูลเริ่มต้นจาก socket\r\n      const handleInitialData = (initialResults: IPatrolResult[]) => {\r\n        if (initialResults.length <= 0) {\r\n          return;\r\n        }\r\n        // ตั้งค่า socketData ให้เป็นข้อมูลที่รับมาจาก socket\r\n        setSocketData(prevData => {\r\n          // อัปเดตข้อมูลที่ตรงกันหรือลงข้อมูลใหม่\r\n          const updatedResults = initialResults.map((incomingResult) => {\r\n            // เช็คว่า incomingResult.id มีอยู่ใน prevData หรือไม่\r\n            const existingIndex = prevData.findIndex(result => result.id === incomingResult.id);\r\n\r\n            if (existingIndex !== -1) {\r\n              // ถ้ามี id ตรงกัน, อัปเดตข้อมูลใน existing result\r\n              return {\r\n                ...prevData[existingIndex],  // ข้อมูลเดิม\r\n                ...incomingResult,            // ข้อมูลใหม่ที่มาจาก initialResults\r\n              };\r\n            }\r\n\r\n            // ถ้าไม่มี id ตรงกัน, ให้เพิ่มข้อมูลใหม่\r\n            return incomingResult;\r\n          });\r\n\r\n          // เช็คผลลัพธ์ใหม่ที่ไม่มีใน prevData\r\n          const newResults = initialResults.filter(result =>\r\n            !prevData.some(existingResult => existingResult.id === result.id)\r\n          );\r\n\r\n          // รวมข้อมูลเดิมที่อัปเดตและผลลัพธ์ใหม่\r\n          return [...updatedResults, ...newResults];\r\n        });\r\n      };\r\n\r\n      // ฟังก์ชันที่ใช้ในการอัปเดตข้อมูลผลลัพธ์\r\n      const handleResultUpdate = (incomingResult: IPatrolResult) => {\r\n        setSocketData(prevData => {\r\n          // เช็คว่า incomingResult.id มีอยู่ใน prevData หรือไม่\r\n          const updatedResults = prevData.map(existingResult => {\r\n            if (existingResult.id === incomingResult.id) {\r\n              return {\r\n                ...existingResult,   // ข้อมูลเดิม\r\n                ...incomingResult,   // ข้อมูลใหม่ที่มาจาก incomingResult\r\n              };\r\n            }\r\n            return existingResult;\r\n          });\r\n\r\n          // ถ้าไม่มีผลลัพธ์จาก incomingResult ใน prevData, ให้เพิ่มเข้าไป\r\n          if (!prevData.some(existingResult => existingResult.id === incomingResult.id)) {\r\n            return [...updatedResults, incomingResult];\r\n          }\r\n\r\n          return updatedResults;\r\n        });\r\n      };\r\n\r\n      // อัปเดตสถานะเมื่อ patrol เริ่ม\r\n      const handlePatrolStarted = async (data: { patrolId: string; patrolData: IPatrol }) => {\r\n        if (!joinedRoomsRef.current.has(data.patrolId)) {\r\n          socket.emit(\"join_patrol\", data.patrolId);\r\n          joinedRoomsRef.current.add(data.patrolId);\r\n        }\r\n        await getPatrolData();\r\n      };\r\n\r\n      // อัปเดตสถานะเมื่อ patrol จบ\r\n      const handlePatrolFinished = async (data: { patrolId: string; patrolData: IPatrol }) => {\r\n        await getPatrolData();\r\n      };\r\n\r\n      // อัปเดตข้อมูลเมื่อมี Patrol ใหม่\r\n      const handleNewPatrol = (newPatrol) => {\r\n        if (!joinedRoomsRef.current.has(newPatrol.id)) {\r\n          socket.emit(\"join_patrol\", newPatrol.id);\r\n          joinedRoomsRef.current.add(newPatrol.id);\r\n        }\r\n\r\n        setAllPatrols((prev) => {\r\n          const existingIndex = prev.findIndex((patrol) => patrol.id === newPatrol.id);\r\n\r\n          if (existingIndex !== -1) {\r\n            const updatedPatrols = [...prev];\r\n            updatedPatrols[existingIndex] = { ...prev[existingIndex], ...newPatrol };\r\n            return updatedPatrols;\r\n          } else {\r\n            return [...prev, newPatrol];\r\n          }\r\n        });\r\n\r\n\r\n      };\r\n\r\n      // อัปเดตข้อมูลเมื่อ Patrol ถูกลบ \r\n      const handlePatrolDeleted = (patrolId) => {\r\n        setAllPatrols((prevPatrols) => prevPatrols.filter((patrol) => patrol.id !== patrolId));\r\n        if (!joinedRoomsRef.current.has(patrolId)) {\r\n          socket.emit(\"join_patrol\", patrolId);\r\n          joinedRoomsRef.current.add(patrolId);\r\n        }\r\n      };\r\n      socket.on(\"initial_patrol_data\", handleInitialData);\r\n      socket.on(\"patrol_result_update\", handleResultUpdate);\r\n      socket.on(\"patrol_started\", handlePatrolStarted);\r\n      socket.on(\"patrol_finished\", handlePatrolFinished);\r\n      socket.on(\"patrol_created\", handleNewPatrol);\r\n      socket.on(\"patrol_deleted\", handlePatrolDeleted);\r\n      setMounted(true);\r\n      return () => {\r\n        socket.off(\"initial_patrol_data\", handleInitialData);\r\n        socket.off(\"patrol_result_update\", handleResultUpdate);\r\n        socket.off(\"patrol_started\", handlePatrolStarted);\r\n        socket.off(\"patrol_finished\", handlePatrolFinished);\r\n        socket.off(\"patrol_created\", handleNewPatrol);\r\n        socket.off(\"patrol_deleted\", handlePatrolDeleted);\r\n\r\n      };\r\n    };\r\n\r\n    initializeSocketListeners();\r\n  }, [socket, isConnected]);\r\n\r\n  useEffect(() => {\r\n    allPatrols.forEach((patrol) => {\r\n      if (!joinedRoomsRef.current.has(patrol.id) && patrol.status === 'on_going' || patrol.status === 'scheduled') {\r\n        socket.emit(\"join_patrol\", patrol.id);\r\n        joinedRoomsRef.current.add(patrol.id);\r\n      }\r\n    });\r\n  }, [allPatrols])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('filter', JSON.stringify(filter));\r\n  }, [filter]);\r\n\r\n  useEffect(() => {\r\n    const sortedData = sortData(allPatrols, sort);\r\n    if (JSON.stringify(sortedData) !== JSON.stringify(allPatrols)) {\r\n      setAllPatrols(sortedData);\r\n    }\r\n  }, [sort]);\r\n\r\n  useEffect(() => {\r\n    if (selectedDate !== null || selectedDate !== undefined) {\r\n      setDateError(null)\r\n    }\r\n  }, [selectedDate])\r\n\r\n  if (!mounted) {\r\n    return <Loading />\r\n  }\r\n\r\n  return (\r\n    <div className='flex flex-col gap-4'>\r\n      {/* Patrol List */}\r\n      <div className='flex flex-row justify-between items-center'>\r\n        <p className='text-2xl font-bold'>{t(\"PatrolList\")}</p>\r\n        <Button size='lg' variant='primary' className='flex flex-row items-center' onClick={() => handleOpenAlert()}>\r\n          <span className=\"material-symbols-outlined text-card w-[22px] h-[22px]\">\r\n            ios_share\r\n          </span>\r\n          <p>{t(\"Export\")}</p>\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Search Sort Filter */}\r\n      <div className=\"flex items-center gap-2\">\r\n        <Textfield\r\n          iconName=\"search\"\r\n          showIcon={true}\r\n          placeholder={t(\"Search\")}\r\n          onChange={handleSearch}\r\n        />\r\n\r\n        <DropdownMenu onOpenChange={(open) => setIsSortOpen(open)}>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium \r\n    ${isSortOpen ? \"border border-destructive\" : \"border-none\"}`}\r\n          >\r\n            <span className=\"material-symbols-outlined\">swap_vert</span>\r\n            <div className=\"text-lg\">{t('Sort')}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align=\"end\" className=\"p-2 gap-2\">\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('SortBy')}</DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sort.by}\r\n              onValueChange={(value) => handleSortChange('by', value)}\r\n            >\r\n              <DropdownMenuRadioItem value=\"Doc No.\" className=\"text-base\" onSelect={(e) => e.preventDefault()}>\r\n                {t('DocNo')}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem value=\"Date\" className=\"text-base\" onSelect={(e) => e.preventDefault()}>\r\n                {t('Date')}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('Order')}</DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sort.order}\r\n              onValueChange={(value) => handleSortChange('order', value)}\r\n            >\r\n              <DropdownMenuRadioItem value=\"Ascending\" className=\"text-base\" onSelect={(e) => e.preventDefault()}>\r\n                {t('Ascending')}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem value=\"Descending\" className=\"text-base\" onSelect={(e) => e.preventDefault()}>\r\n                {t('Descending')}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n\r\n        <DropdownMenu onOpenChange={(open) => setIsFilterOpen(open)}>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium \r\n    ${isFilterOpen ? \"border border-destructive\" : \"border-none\"}`}\r\n          >\r\n            <span className=\"material-symbols-outlined\">page_info</span>\r\n            <div className=\"text-lg\">{t('Filter')}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent\r\n            className=\"flex flex-col justify-center gap-2 p-2 z-50\"\r\n            align=\"end\"\r\n          >\r\n            <div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('Date')}</DropdownMenuLabel>\r\n              <DatePickerWithRange\r\n                startDate={filter?.dateRange.start}\r\n                endDate={filter?.dateRange.end}\r\n                onSelect={handleDateSelect}\r\n                className=\"my-date-picker\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('Status')}</DropdownMenuLabel>\r\n              <DropdownMenuCheckboxItem\r\n                checked={filter?.patrolStatuses.includes(\"pending\")}\r\n                onCheckedChange={(checked) => toggleStatusFilter(\"pending\", checked)}\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                <BadgeCustom\r\n                  width=\"w-full\"\r\n                  variant=\"blue\"\r\n                  showIcon={true}\r\n                  iconName=\"hourglass_top\"\r\n                  children=\"Pending\"\r\n                />\r\n              </DropdownMenuCheckboxItem>\r\n              <DropdownMenuCheckboxItem\r\n                checked={filter?.patrolStatuses.includes(\"scheduled\")}\r\n                onCheckedChange={(checked) => toggleStatusFilter(\"scheduled\", checked)}\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                <BadgeCustom\r\n                  width=\"w-full\"\r\n                  variant=\"yellow\"\r\n                  showIcon={true}\r\n                  iconName=\"event_available\"\r\n                  children=\"Scheduled\"\r\n                />\r\n              </DropdownMenuCheckboxItem>\r\n              <DropdownMenuCheckboxItem\r\n                checked={filter?.patrolStatuses.includes(\"on_going\")}\r\n                onCheckedChange={(checked) => toggleStatusFilter(\"on_going\", checked)}\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                <BadgeCustom\r\n                  width=\"w-full\"\r\n                  variant=\"purple\"\r\n                  showIcon={true}\r\n                  iconName=\"cached\"\r\n                  children=\"On Going\"\r\n                />\r\n              </DropdownMenuCheckboxItem>\r\n              <DropdownMenuCheckboxItem\r\n                checked={filter?.patrolStatuses.includes(\"completed\")}\r\n                onCheckedChange={(checked) => toggleStatusFilter(\"completed\", checked)}\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                <BadgeCustom\r\n                  width=\"w-full\"\r\n                  variant=\"green\"\r\n                  showIcon={true}\r\n                  iconName=\"check\"\r\n                  children=\"Complete\"\r\n                />\r\n              </DropdownMenuCheckboxItem>\r\n\r\n            </div>\r\n            <div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">{t('Preset')}</DropdownMenuLabel>\r\n              <Select\r\n                value={filter?.presetTitle || 'All'}\r\n                onValueChange={(value) =>\r\n                  setFilter({\r\n                    presetTitle: value,\r\n                    patrolStatuses: filter?.patrolStatuses || [],\r\n                    dateRange: { start: filter?.dateRange.start, end: filter?.dateRange.end }\r\n                  })\r\n                }\r\n              >\r\n                <SelectTrigger className=\"\">\r\n                  <SelectValue\r\n                    placeholder={filter?.presetTitle === 'All' ? t('All') : filter?.presetTitle}\r\n                  />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectGroup>\r\n                    <SelectLabel>{t('Preset')}</SelectLabel>\r\n                    <SelectItem value=\"All\">{t('All')}</SelectItem>\r\n                    {allPresets &&\r\n                      allPresets.map((preset) => (\r\n                        <SelectItem value={preset.title} key={preset.id}>\r\n                          {preset.title}\r\n                        </SelectItem>\r\n                      ))}\r\n                  </SelectGroup>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div className=\"flex w-full justify-end mt-4 gap-2\">\r\n              <Button size=\"sm\" variant=\"secondary\" onClick={resetFilter}>\r\n                {t('Reset')}\r\n              </Button>\r\n              <Button variant=\"primary\" size=\"sm\" onClick={applyFilter}>{t('Apply')}</Button>\r\n            </div>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </div>\r\n\r\n      {/* Table */}\r\n      <div>\r\n        <ScrollArea\r\n          className=\"rounded-md w-full whitespace-nowrap\">\r\n          <Table className=' sm:w-max lg:w-full'>\r\n            <TableHeader>\r\n              <TableRow className=\"grid grid-cols-12 w-full\">\r\n                <TableHead className='sm:col-span-1 lg:col-span-1'>\r\n                  <Checkbox className='rounded-sm'\r\n                    checked={\r\n                      allPatrols.length > 0 &&\r\n                      allPatrols.every((patrol) => checkedItems[patrol.id])\r\n                    }\r\n                    onCheckedChange={handleSelectAllCheckbox} />\r\n                </TableHead>\r\n                <TableHead className='sm:col-span-2 lg:col-span-2'>\r\n                  {t(\"DocID\")}\r\n                </TableHead>\r\n                <TableHead className='sm:col-span-2 lg:col-span-2'>\r\n                  {t(\"Preset\")}\r\n                </TableHead>\r\n                <TableHead className='sm:col-span-1 lg:col-span-2'>\r\n                  {t(\"Status\")}\r\n                </TableHead>\r\n                <TableHead className='sm:col-span-2 lg:col-span-2'>\r\n                  {t(\"Progress\")}\r\n                </TableHead>\r\n                <TableHead className='sm:col-span-2 lg:col-span-1'>\r\n                  {t(\"Date\")}\r\n                </TableHead>\r\n                <TableHead className='sm:col-span-2 lg:col-span-2'>\r\n                  {t(\"Result\")}\r\n                </TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              <ScrollArea className=\"rounded-md w-full lg:[&>[data-radix-scroll-area-viewport]]:max-h-[calc(100vh-388px)] sm:[&>[data-radix-scroll-area-viewport]]:max-h-[calc(100vh-360px)]\"\r\n              >\r\n                {allPatrols.length === 0 || !allPatrols ? (\r\n                  <tr className=\"flex w-full h-full\">\r\n                    <td colSpan={5} className=\"w-full text-center py-6\">\r\n                      <NotFound\r\n                        icon=\"task\" title=\"NoPatrolsAvailable\" description=\"NoPatrolsDescription\"\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ) :\r\n                  (\r\n                    allPatrols.map((patrol, index) => (\r\n                      <TableRow key={index} className='grid grid-cols-12 w-full items-center' onClick={() => handleDetail(patrol.id)}>\r\n                        <TableCell className='sm:col-span-1 lg:col-span-1'>\r\n                          <Checkbox className='w-5 h-5 rounded-sm'\r\n                            onClick={(e) => e.stopPropagation()}\r\n                            checked={checkedItems[patrol.id] || false}\r\n                            onCheckedChange={(checked: boolean) => handleCheckboxChange(patrol.id, checked)}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell className='sm:col-span-2 lg:col-span-2'>\r\n                          <p>{formatId(patrol.id)}</p>\r\n                        </TableCell>\r\n                        <TableCell className='sm:text-sm lg:text-base sm:col-span-2 lg:col-span-2 flex min-w-0\"'>\r\n                          <TooltipProvider>\r\n                            <Tooltip>\r\n                              <TooltipTrigger asChild>\r\n                                <span className=\"truncate\">{patrol.preset.title}</span>\r\n                              </TooltipTrigger>\r\n                              <TooltipContent side=\"bottom\" className=\"ml-[129px]\">\r\n                                <p className=\"max-w-[200px] break-words\">{patrol.preset.title}</p>\r\n                              </TooltipContent>\r\n                            </Tooltip>\r\n                          </TooltipProvider>\r\n                        </TableCell>\r\n                        <TableCell className='sm:col-span-1 lg:col-span-2 flex'>\r\n                          <BadgeCustom\r\n                            iconName={getPatrolStatusVariant(patrol.status).iconName}\r\n                            showIcon={true}\r\n                            showTime={false}\r\n                            variant={getPatrolStatusVariant(patrol.status).variant}\r\n                            hideText={windowWidth > 1024 ? false : true}\r\n                          >\r\n                            {s(patrol.status)}\r\n                          </BadgeCustom>\r\n                        </TableCell>\r\n                        <TableCell className='sm:col-span-2 lg:col-span-2'>\r\n                          <p>\r\n                            <Progress value={calculateProgress(patrol.results)} />\r\n                          </p>\r\n                        </TableCell>\r\n                        <TableCell className='sm:col-span-2 lg:col-span-1'>\r\n                          <p>{formatTime(patrol.date, locale, false)}</p>\r\n                        </TableCell>\r\n                        <TableCell className='sm:col-span-2 lg:col-span-2'>\r\n                          <div className='flex justify-between'>\r\n                            <div className='flex flex-row gap-2' >\r\n                              <div className=\"flex gap-1 text-primary items-center\">\r\n                                <span className=\"material-symbols-outlined\">checklist</span>\r\n                                <p className=\"text-xl font-semibold\">{patrol.itemCounts}</p>\r\n                              </div>\r\n                              <div className=\"flex gap-1 text-orange items-center\">\r\n                                <span className=\"material-symbols-outlined\">close</span>\r\n                                <p className=\"text-xl font-semibold\">{countPatrolResult(patrol.results).fail}</p>\r\n                              </div>\r\n                              <div className=\"flex gap-1 text-destructive items-center\">\r\n                                <span className=\"material-symbols-outlined\">\r\n                                  error\r\n                                </span>\r\n                                <p className=\"text-xl font-semibold\">{countPatrolResult(patrol.results).defect}</p>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div>\r\n                              <DropdownMenu>\r\n                                <DropdownMenuTrigger onClick={(e) => e.stopPropagation()}>\r\n                                  <Button variant=\"ghost\" className=\"w-[45px] h-[45px]\">\r\n                                    <span className=\"material-symbols-outlined items-center text-input\">\r\n                                      more_horiz\r\n                                    </span>\r\n                                  </Button>\r\n                                </DropdownMenuTrigger>\r\n\r\n                                <DropdownMenuContent align=\"end\" className=\"p-0\">\r\n                                  <DropdownMenuItem onClick={(e) => {\r\n                                    handleDetail(patrol.id)\r\n                                  }}>\r\n                                    <h1>{t(\"Detail\")}</h1>\r\n                                  </DropdownMenuItem>\r\n                                  <DropdownMenuItem onClick={(e) => {\r\n                                    e.stopPropagation()\r\n                                    handleOpenDialog(patrol.id)\r\n                                  }}>\r\n                                    <h1 className=\"text-destructive cursor-pointer\">{t(\"Delete\")}</h1>\r\n                                  </DropdownMenuItem>\r\n                                </DropdownMenuContent>\r\n                              </DropdownMenu>\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))\r\n                  )\r\n                }\r\n              </ScrollArea>\r\n            </TableBody>\r\n          </Table>\r\n          <ScrollBar orientation=\"horizontal\" />\r\n        </ScrollArea>\r\n\r\n        {isDialogOpen && (\r\n          <AlertCustom\r\n            title={a(\"PatrolRemoveConfirmTitle\")}\r\n            description={a(\"PatrolRemoveConfirmDescription\")}\r\n            primaryButtonText={t(\"Confirm\")}\r\n            primaryIcon=\"check\"\r\n            secondaryButtonText={t(\"Cancel\")}\r\n            backResult={(backResult) => {\r\n              if (backResult) {\r\n                handleRemovePatrol(selectedPatrolId)\r\n              }\r\n              handleCloseDialog()\r\n            }}\r\n          ></AlertCustom>\r\n        )}\r\n\r\n        {isAlertOpen && (\r\n          <AlertCustom\r\n            title={a(\"ExportPatrolAlert\")}\r\n            description={a(\"ExportPatrolAlertDescription\")}\r\n            primaryButtonText={t(\"Confirm\")}\r\n            primaryIcon=\"check\"\r\n            secondaryButtonText={t(\"Cancel\")}\r\n            backResult={(backResult) => {\r\n              if (backResult) {\r\n                exportPatrol(allPatrols, checkedItems)\r\n              }\r\n              handleCloseAlert()\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </div >\r\n  )\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\employees\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":449,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":449,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport { IUser, role } from \"@/app/type\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport Textfield from \"@/components/textfield\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuLabel,\r\n  DropdownMenuRadioGroup,\r\n  DropdownMenuRadioItem,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectGroup,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { fetchData, getInitials, getUserVariant } from \"@/lib/utils\";\r\nimport { DropdownMenuTrigger } from \"@radix-ui/react-dropdown-menu\";\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { useForm, FormProvider } from \"react-hook-form\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport NotFound from \"@/components/not-found\";\r\nimport { UserTooltip } from \"@/components/user-tooltip\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\n\r\nexport default function Page() {\r\n  const t = useTranslations(\"General\");\r\n  const a = useTranslations(\"Alert\");\r\n  const [filteredUsers, setFilteredUsers] = useState([]);\r\n  const [selectedRoles, setSelectedRoles] = useState<string[]>([]);\r\n  const [selectedStatus, setSelectedStatus] = useState<string | null>(null);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  const roles = [\r\n    {\r\n      value: \"admin\",\r\n      label: t(\"admin\"),\r\n      icon: \"manage_accounts\",\r\n      variant: \"blue\",\r\n    },\r\n    {\r\n      value: \"inspector\",\r\n      label: t(\"inspector\"),\r\n      icon: \"person_search\",\r\n      variant: \"red\",\r\n    },\r\n    {\r\n      value: \"supervisor\",\r\n      label: t(\"supervisor\"),\r\n      icon: \"manage_accounts\",\r\n      variant: \"yellow\",\r\n    },\r\n  ];\r\n\r\n  const statuses = [\r\n    { value: \"true\", label: \"Active\", color: \"bg-green\", variant: \"green\" },\r\n    {\r\n      value: \"false\",\r\n      label: \"Inactive\",\r\n      color: \"bg-destructive\",\r\n      variant: \"red\",\r\n    },\r\n  ];\r\n\r\n  const [allUsers, setAllUsers] = useState<IUser[]>([]);\r\n  const getData = async () => {\r\n    try {\r\n      // Construct query params for roles, active status, and search term\r\n      const params = new URLSearchParams();\r\n\r\n      // Add selected roles to params (if any)\r\n      if (selectedRoles.length > 0) {\r\n        params.append(\"roles\", selectedRoles.join(\",\"));\r\n      } else {\r\n      }\r\n\r\n      // Add active status to params\r\n      if (selectedStatus !== null) {\r\n        params.append(\"active\", selectedStatus.toString()); // Assuming `selectedStatus` is a boolean\r\n      } else {\r\n      }\r\n\r\n      // Add search term to params (if any)\r\n      if (searchTerm) {\r\n        params.append(\"search\", searchTerm);\r\n      } else {\r\n      }\r\n\r\n      // Fetch data using fetchData utility with query params\r\n      const data = await fetchData(\r\n        \"get\",\r\n        `/users?profile=true&image=true&user=true&${params.toString()}`,\r\n        true\r\n      );\r\n\r\n      // Validate data format\r\n      if (!Array.isArray(data)) {\r\n        console.error(\"Invalid data format:\", data);\r\n        return []; // Return empty array if data format is incorrect\r\n      }\r\n\r\n      setAllUsers(data); // Update state with the fetched data\r\n      setFilteredUsers(data); // Initially set filtered data to all data\r\n\r\n      return data; // Return fetched data\r\n    } catch (error) {\r\n      if (error.name !== \"AbortError\") {\r\n        console.error(\"Failed to fetch user data:\", error); // Log error\r\n      }\r\n      return []; // Return empty array on error\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // เรียกใช้งานครั้งแรก\r\n    handleResize();\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  // Fetch and apply search filter on search term change\r\n\r\n  const handleApply = async () => {\r\n    const freshData = await getData(); // Fetch fresh data\r\n    setFilteredUsers(freshData);\r\n  };\r\n\r\n  // Reset handler function\r\n  const handleReset = async () => {\r\n    setSelectedRoles([]);\r\n    setSelectedStatus(null);\r\n  };\r\n\r\n  const form = useForm();\r\n  const { handleSubmit } = form;\r\n\r\n  const onSubmit = () => { };\r\n\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [pendingAction, setPendingAction] = useState<(() => void) | null>(null);\r\n  const [dialogType, setDialogType] = useState<string>(\"\");\r\n\r\n  const handleUserUpdateActive = async (userId: number) => {\r\n    // Toggle status and create data payload\r\n    setFilteredUsers((prevUsers) => {\r\n      const user = prevUsers.find((user) => user.id === userId);\r\n      if (!user) {\r\n        return prevUsers;\r\n      }\r\n\r\n      const updatedStatus = !user.active;\r\n\r\n      // Show toast based on the new status\r\n      toast({\r\n        variant: \"success\",\r\n        title: updatedStatus\r\n          ? a(\"UserActivationSuccessful\")\r\n          : a(\"UserDeactivationSuccessful\"),\r\n        description: updatedStatus\r\n          ? a(\"UserActivationSuccessfulDescription\")\r\n          : a(\"UserDeactivationSuccessfulDescription\"),\r\n      });\r\n\r\n      return prevUsers.map((user) =>\r\n        user.id === userId ? { ...user, active: updatedStatus } : user\r\n      );\r\n    });\r\n\r\n    try {\r\n      // Perform the API update after state update\r\n      await fetchData(\"put\", `/user/${userId}`, true, {\r\n        active: !filteredUsers.find((user) => user.id === userId)?.active,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Update failed\", error);\r\n    }\r\n  };\r\n\r\n  const handleUserUpdate = async (\r\n    userId: number,\r\n    password: string,\r\n    role: role,\r\n    active?: boolean,\r\n  ) => {\r\n    setFilteredUsers((prevUsers) => {\r\n      const user = prevUsers.find((user) => user.id === userId);\r\n      if (!user) {\r\n        console.error(`User with ID ${userId} not found.`);\r\n        return prevUsers;\r\n      }\r\n\r\n      const data: { active: boolean; password?: string; role: role } = {\r\n        active,\r\n        role,\r\n      };\r\n\r\n      // Add password to data if provided\r\n      if (password && password.trim() !== \"\") {\r\n        data.password = password;\r\n      }\r\n\r\n      // Check if there is no update to apply\r\n      if (role === user.role && password === \"\") {\r\n        toast({\r\n          variant: \"default\",\r\n          title: a(\"NoUpdatesApplied\"),\r\n          description: a(\"NoUpdatesAppliedDescription\"),\r\n        });\r\n        return prevUsers; // No updates, return previous state\r\n      }\r\n\r\n      // Proceed to update if changes are detected\r\n      const updatedUsers = prevUsers.map((user) =>\r\n        user.id === userId\r\n          ? {\r\n            ...user,\r\n            ...(data.role && { role: data.role }), // Update role if needed\r\n            ...(password && { password: data.password }), // Update password if needed\r\n            active: data.active, // Update active status\r\n          }\r\n          : user\r\n      );\r\n\r\n      // Perform the API update\r\n      const updateUserData = async () => {\r\n        try {\r\n          toast({\r\n            variant: \"success\",\r\n            title: a(\"UserUpdateSuccessful\"),\r\n            description: a(\"UserUpdateSuccessfulDescription\"),\r\n          });\r\n          await fetchData(\"put\", `/user/${userId}`, true, data);\r\n          await getData(); // Fetch latest data if needed\r\n        } catch (error) {\r\n          console.error(\"Update failed\", error);\r\n          toast({\r\n            variant: \"error\",\r\n            title: a(\"UserUpdateFailed\"),\r\n            description: a(\"UserUpdateFailedDescription\"),\r\n          });\r\n        }\r\n      };\r\n\r\n      // Call update only if there are changes\r\n      if (role !== user.role || password !== \"\") {\r\n        updateUserData(); // Execute async update call\r\n      }\r\n\r\n      return updatedUsers; // Return updated user list for optimistic rendering\r\n    });\r\n  };\r\n\r\n  let userCreate = useRef<editedUser>({\r\n    username: \"\",\r\n    password: \"\",\r\n    role: \"inspector\", // Set a default role\r\n  });\r\n\r\n  const handleUserCreate = async (\r\n    username: string,\r\n    password: string,\r\n    role: role\r\n  ) => {\r\n    const data = {\r\n      username: username,\r\n      password: password,\r\n      role: role,\r\n      active: true,\r\n    };\r\n    try {\r\n      toast({\r\n        variant: \"success\",\r\n        title: a(\"EmployeeAdded\"),\r\n        description: a(\"EmployeeAddedDescription\"),\r\n      });\r\n      const response = await fetchData(\"post\", `/user`, true, data);\r\n      setFilteredUsers((prev) => [...prev, response]);\r\n    } catch (error) {\r\n      console.error(\"Update failed\", error);\r\n    }\r\n  };\r\n\r\n  // State to manage validation errors\r\n  const [errorsForCreateUser, setErrorsForCreateUser] = React.useState({\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const validateFieldsUserCreate = () => {\r\n    const { username, password } = userCreate.current;\r\n    const newErrors = { username: \"\", password: \"\" };\r\n    if (!username) {\r\n      newErrors.username = a(\"ValidUsernamePlease\");\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"EmployeeAddedFailed\"),\r\n        description: a(\"EmployeeAddedFailedNotValidInfo\"),\r\n      });\r\n    }\r\n    if (!password) {\r\n      newErrors.password = a(\"ValidPasswordPlease\");\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"EmployeeAddedFailed\"),\r\n        description: a(\"EmployeeAddedFailedNotValidInfo\"),\r\n      });\r\n    } else if (password.length < 8) {\r\n      newErrors.password = a(\"PasswordNotLongEnough\");\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"EmployeeAddedFailed\"),\r\n        description: a(\"PasswordNotLongEnough\"),\r\n      });\r\n    }\r\n\r\n    setErrorsForCreateUser(newErrors);\r\n\r\n    return !newErrors.username && !newErrors.password;\r\n  };\r\n\r\n  const handleCreateUserDialog = () => {\r\n    const { username, password, role } = userCreate.current;\r\n\r\n    if (!validateFieldsUserCreate()) {\r\n      return;\r\n    }\r\n\r\n    setPendingAction(() => () => handleUserCreate(username, password, role));\r\n    setDialogType(\"create\");\r\n    handleOpenDialog();\r\n  };\r\n\r\n  const handleInactiveUserDialog = (userId: number) => {\r\n    setPendingAction(() => () => handleUserUpdateActive(userId));\r\n    setDialogType(\"deactivate\");\r\n    handleOpenDialog();\r\n  };\r\n\r\n  const [passwordErrorForEdit, setPasswordErrorForEdit] = useState<\r\n    string | null\r\n  >(null); // State for password error message\r\n\r\n  const handleEditUserDialog = async (userId: number, index: number) => {\r\n    const updatedUser = userRefs.current[index];\r\n\r\n    if (\r\n      updatedUser.username === sortedUser[index].username &&\r\n      updatedUser.role === sortedUser[index].role &&\r\n      updatedUser.password === \"\"\r\n    ) {\r\n      toast({\r\n        variant: \"default\",\r\n        title: a(\"NoUpdatesApplied\"),\r\n        description: a(\"NoUpdatesAppliedDescription\"),\r\n      });\r\n      await setIsDialogOpen(false);\r\n      return;\r\n    }\r\n\r\n    if (\r\n      updatedUser &&\r\n      updatedUser.password.length < 8 &&\r\n      updatedUser.password !== \"\"\r\n    ) {\r\n      setPasswordErrorForEdit(\r\n        a(\"EmployeeEditPasswordMinLengthErrorDescription\")\r\n      );\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"PasswordError\"),\r\n        description: a(\"PasswordNotLongEnough\"),\r\n      });\r\n      return;\r\n    } else {\r\n      setPasswordErrorForEdit(null); // Clear error message when password is valid\r\n      setPendingAction(() => () => handleSave(userId, index));\r\n      setDialogType(\"edit\");\r\n      handleOpenDialog();\r\n    }\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogResult = (result: boolean) => {\r\n    setIsDialogOpen(false);\r\n    if (result && pendingAction) {\r\n      pendingAction(); // Execute the pending action\r\n      setPendingAction(null); // Clear the pending action\r\n      setDialogType(\"\"); // Reset the dialog type after action is completed\r\n    }\r\n  };\r\n\r\n  type editedUser = {\r\n    username: string;\r\n    password: string;\r\n    role: role;\r\n  };\r\n\r\n  const userRefs = useRef<editedUser[]>([]);\r\n\r\n  // Initialize userRefs after first render\r\n\r\n  // Handler to save the updated user data\r\n  const handleSave = async (userId: number, index: number) => {\r\n    const updatedUser = userRefs.current[index];\r\n    const user = allUsers.find((user) => user.id === userId);\r\n\r\n    if (updatedUser) {\r\n      handleUserUpdate(\r\n        userId,\r\n        updatedUser.password,\r\n        updatedUser.role\r\n      );\r\n    } else {\r\n      console.error(`User at index ${userId} is undefined`);\r\n    }\r\n  };\r\n  const [sortOption, setSortOption] = useState<\"Name\" | \"Type\" | \"ID\">(\"ID\");\r\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"asc\");\r\n  const [sortedUser, setSortedUser] = useState<IUser[]>([]);\r\n\r\n  // Filter by search term\r\n  const filterBySearchTerm = (users: IUser[]) => {\r\n    if (!searchTerm) return users; // If no search term, return all users\r\n\r\n    return users.filter(\r\n      (user) =>\r\n        user.id.toString().includes(searchTerm) || // Convert ID to string before searching\r\n        user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        (user.profile?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ??\r\n          false) // Ensure profile exists\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchAndFilter = async () => {\r\n      const freshData = await getData(); // Fetch fresh data\r\n      const filtered = filterBySearchTerm(freshData); // Apply search term filter\r\n      setFilteredUsers(filtered); // Update state with filtered data\r\n    };\r\n\r\n    fetchAndFilter();\r\n  }, [searchTerm]); // Trigger fetch when search term changes\r\n\r\n  useEffect(() => {\r\n    const sorted = [...filteredUsers].sort((a, b) => {\r\n      let comparison = 0;\r\n\r\n      // Sort by Name\r\n      if (sortOption === \"Name\") {\r\n        const titleA = a.title || a.username || \"\"; // Handle undefined values\r\n        const titleB = b.title || b.username || \"\"; // Handle undefined values\r\n        comparison = titleA.localeCompare(titleB);\r\n      }\r\n      // Sort by Type\r\n      else if (sortOption === \"Type\") {\r\n        const typeA = a.role || \"\"; // Handle undefined values\r\n        const typeB = b.role || \"\"; // Handle undefined values\r\n        comparison = typeA.localeCompare(typeB);\r\n      }\r\n      // Sort by ID\r\n      else if (sortOption === \"ID\") {\r\n        comparison = a.id - b.id; // Assume ID is a number\r\n      }\r\n\r\n      return sortOrder === \"asc\" ? comparison : -comparison; // Ascending/Descending order\r\n    });\r\n\r\n    setSortedUser(sorted); // Set the sorted users list\r\n  }, [filteredUsers, sortOption, sortOrder]); // Dependencies (no need for `allUsers` here)\r\n\r\n  useEffect(() => {\r\n    userRefs.current = sortedUser.map((employee) => ({\r\n      username: employee.username,\r\n      password: \"\",\r\n      role: employee.role,\r\n    }));\r\n  }, [sortedUser, allUsers]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col \">\r\n      {/* Search and Actions */}\r\n      <div className=\"flex justify-between\">\r\n        <h1 className=\"font-bold text-2xl\">{t(\"ManageEmployees\")}</h1>\r\n        <div className=\"flex justify-between items-center mb-4\">\r\n          <AlertDialog\r\n            open={\r\n              isDialogOpen &&\r\n              (dialogType === \"add_user_menu\" || dialogType === \"create\")\r\n            }\r\n            onOpenChange={(open) => {\r\n              if (!open) {\r\n                setIsDialogOpen(false);\r\n              }\r\n            }}\r\n          >\r\n            <AlertDialogTrigger asChild>\r\n              <Button\r\n                className=\"gap-2\"\r\n                variant=\"primary\"\r\n                onClick={() => {\r\n                  userCreate.current = {\r\n                    username: \"\",\r\n                    password: \"\",\r\n                    role: \"inspector\",\r\n                  }; // Default values\r\n                  setDialogType(\"add_user_menu\");\r\n                  setIsDialogOpen(true);\r\n                  setErrorsForCreateUser({\r\n                    username: \"\",\r\n                    password: \"\",\r\n                  });\r\n                }}\r\n                size=\"default\"\r\n              >\r\n                <span className=\"material-symbols-outlined\">add</span>\r\n                {t(\"NewEmployee\")}\r\n              </Button>\r\n            </AlertDialogTrigger>\r\n            <AlertDialogContent\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n              }}\r\n            >\r\n              <AlertDialogTitle></AlertDialogTitle>\r\n              <AlertDialogHeader>\r\n                <h1 className=\"text-2xl font-bold\">{t(\"AddNewEmployee\")}</h1>\r\n                <AlertDialogDescription>\r\n                  {t(\"AddNewEmployeeDescription\")}{\" \"}\r\n                </AlertDialogDescription>\r\n              </AlertDialogHeader>\r\n              <FormProvider {...form}>\r\n                <form\r\n                  onSubmit={handleSubmit(onSubmit)}\r\n                  className=\"flex flex-col gap-4\"\r\n                >\r\n                  <div className=\"flex flex-col gap-1 w-96\">\r\n                    <label>{t(\"Username\")}</label>\r\n                    <Textfield\r\n                      className=\"bg-secondary\"\r\n                      showIcon={true}\r\n                      iconName=\"person\"\r\n                      placeholder={t(\"Username\")}\r\n                      onChange={(e) => {\r\n                        if (userCreate.current) {\r\n                          userCreate.current.username = e.target.value;\r\n                        }\r\n                        setErrorsForCreateUser((prev) => ({\r\n                          ...prev,\r\n                          username: \"\",\r\n                        })); // Clear error on input change\r\n                      }}\r\n                    />\r\n                    {errorsForCreateUser.username && (\r\n                      <p className=\"text-red-500 text-sm mt-1\">\r\n                        {errorsForCreateUser.username}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"flex flex-col gap-1 w-96\">\r\n                    <label>{t(\"Password\")}</label>\r\n                    <Textfield\r\n                      className=\"bg-secondary\"\r\n                      showIcon={true}\r\n                      iconName=\"lock\"\r\n                      placeholder={t(\"Password\")}\r\n                      onChange={(e) => {\r\n                        if (userCreate.current) {\r\n                          userCreate.current.password = e.target.value;\r\n                        }\r\n                        setErrorsForCreateUser((prev) => ({\r\n                          ...prev,\r\n                          password: \"\",\r\n                        })); // Clear error on input change\r\n                      }}\r\n                    />\r\n                    {errorsForCreateUser.password && (\r\n                      <p className=\"text-red-500 text-sm mt-1\">\r\n                        {errorsForCreateUser.password}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"flex flex-col gap-1\">\r\n                    <label>{t(\"Role\")}</label>\r\n                    <div className=\"relative rounded-md w-auto\">\r\n                      <Select\r\n                        defaultValue=\"inspector\"\r\n                        onValueChange={(value) => {\r\n                          userCreate.current.role = value as role;\r\n                        }}\r\n                      >\r\n                        <SelectTrigger className=\"bg-secondary w-96 h-auto p-2 rounded-md border-none\">\r\n                          <SelectValue placeholder=\"\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectGroup>\r\n                            <SelectItem value=\"supervisor\">\r\n                              <BadgeCustom\r\n                                variant={\"yellow\"}\r\n                                iconName=\"engineering\"\r\n                                showIcon={true}\r\n                                shape=\"square\"\r\n                              >\r\n                                {t(\"supervisor\")}\r\n                              </BadgeCustom>\r\n                            </SelectItem>\r\n                            <SelectItem value=\"inspector\">\r\n                              <BadgeCustom\r\n                                variant={\"red\"}\r\n                                iconName=\"person_search\"\r\n                                showIcon={true}\r\n                                shape=\"square\"\r\n                              >\r\n                                {t(\"inspector\")}\r\n                              </BadgeCustom>\r\n                            </SelectItem>\r\n                            <SelectItem value=\"admin\">\r\n                              <BadgeCustom\r\n                                variant={\"blue\"}\r\n                                iconName=\"manage_accounts\"\r\n                                showIcon={true}\r\n                                shape=\"square\"\r\n                              >\r\n                                {t(\"admin\")}\r\n                              </BadgeCustom>\r\n                            </SelectItem>\r\n                          </SelectGroup>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"mt-6 flex justify-end items-center gap-4\">\r\n                    <AlertDialogCancel asChild>\r\n                      <Button variant=\"secondary\" type=\"button\">\r\n                        {t(\"Back\")}\r\n                      </Button>\r\n                    </AlertDialogCancel>\r\n                    <Button\r\n                      className=\"flex gap-2\"\r\n                      variant=\"primary\"\r\n                      onClick={(e) => {\r\n                        e.stopPropagation(); // Prevent click event from bubbling up\r\n                        handleCreateUserDialog();\r\n                      }}\r\n                    >\r\n                      <span className=\"material-symbols-outlined\">add</span>\r\n                      {t(\"AddNewEmployee\")}{\" \"}\r\n                    </Button>\r\n                    {isDialogOpen && dialogType === \"create\" && (\r\n                      <AlertCustom\r\n                        title={a(\"SureToAddEmployee\")}\r\n                        description={a(\"SureToAddEmployeeDescription\")}\r\n                        primaryButtonText={t(\"Confirm\")}\r\n                        primaryIcon=\"check\"\r\n                        secondaryButtonText={t(\"Cancel\")}\r\n                        backResult={(result) => handleDialogResult(result)}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </form>\r\n              </FormProvider>\r\n            </AlertDialogContent>\r\n          </AlertDialog>\r\n        </div>\r\n      </div>\r\n      <div className=\"flex flex-col gap-4\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <Textfield\r\n            iconName=\"search\"\r\n            showIcon={true}\r\n            placeholder={t(\"Search\")}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n          />\r\n          <DropdownMenu>\r\n            <DropdownMenuTrigger\r\n              className={`custom-shadow px-[10px]\r\n               bg-card w-auto h-[40px] gap-[10px] inline-flex items-center\r\n               justify-center rounded-md text-sm font-medium`}\r\n            >\r\n              <span className=\"material-symbols-outlined\">swap_vert</span>\r\n              <div className=\"text-lg\">{t(\"Sort\")}</div>\r\n            </DropdownMenuTrigger>\r\n\r\n            <DropdownMenuContent align=\"end\" className=\"p-2 gap-2\">\r\n              {/* Sort By label */}\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                {t(\"SortBy\")}\r\n              </DropdownMenuLabel>\r\n\r\n              <DropdownMenuRadioGroup\r\n                value={sortOption}\r\n                onValueChange={(value: string) =>\r\n                  setSortOption(value as \"Name\" | \"Type\" | \"ID\")\r\n                }\r\n              >\r\n                <DropdownMenuRadioItem value=\"Name\" className=\"text-base\">\r\n                  {t(\"Name\")}\r\n                </DropdownMenuRadioItem>\r\n\r\n                <DropdownMenuRadioItem value=\"Type\" className=\"text-base\">\r\n                  {t(\"Type\")}\r\n                </DropdownMenuRadioItem>\r\n                <DropdownMenuRadioItem value=\"ID\" className=\"text-base\">\r\n                  {t(\"Id\")}\r\n                </DropdownMenuRadioItem>\r\n              </DropdownMenuRadioGroup>\r\n\r\n              {/* Order label */}\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                {t(\"Order\")}\r\n              </DropdownMenuLabel>\r\n\r\n              <DropdownMenuRadioGroup\r\n                value={sortOrder}\r\n                onValueChange={(value: string) =>\r\n                  setSortOrder(value as \"asc\" | \"desc\")\r\n                }\r\n              >\r\n                <DropdownMenuRadioItem value=\"asc\" className=\"text-base\">\r\n                  {t(\"Ascending\")}\r\n                </DropdownMenuRadioItem>\r\n                <DropdownMenuRadioItem value=\"desc\" className=\"text-base\">\r\n                  {t(\"Descending\")}\r\n                </DropdownMenuRadioItem>\r\n              </DropdownMenuRadioGroup>\r\n            </DropdownMenuContent>\r\n          </DropdownMenu>\r\n\r\n          <DropdownMenu>\r\n            <DropdownMenuTrigger\r\n              className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium`}\r\n            >\r\n              <span className=\"material-symbols-outlined\">page_info</span>\r\n              <div className=\"text-lg\"> {t(\"Filter\")}</div>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent\r\n              className=\"flex flex-col justify-center gap-2 p-2 z-50\"\r\n              align=\"end\"\r\n            >\r\n              <div>\r\n                <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                  {t(\"Role\")}\r\n                </DropdownMenuLabel>\r\n\r\n                {roles.map((role) => (\r\n                  <DropdownMenuCheckboxItem\r\n                    key={role.value}\r\n                    checked={selectedRoles.includes(role.value)}\r\n                    className={`text-base ${selectedRoles.includes(role.value) ? \"bg-muted/50\" : \"\"\r\n                      }`}\r\n                    onSelect={(e) => {\r\n                      e.preventDefault();\r\n                      // Toggle role selection in the array\r\n                      setSelectedRoles((prevSelectedRoles) =>\r\n                        prevSelectedRoles.includes(role.value)\r\n                          ? prevSelectedRoles.filter(\r\n                            (item) => item !== role.value\r\n                          )\r\n                          : [...prevSelectedRoles, role.value]\r\n                      );\r\n                    }}\r\n                  >\r\n                    <BadgeCustom\r\n                      shape=\"square\"\r\n                      variant={\r\n                        role.variant as\r\n                        | \"blue\"\r\n                        | \"red\"\r\n                        | \"yellow\"\r\n                        | \"green\"\r\n                        | \"default\"\r\n                        | \"secondary\"\r\n                        | \"mint\"\r\n                        | \"orange\"\r\n                        | \"purple\"\r\n                      }\r\n                      iconName={role.icon}\r\n                      showIcon={true}\r\n                    >\r\n                      {t(role.value)}\r\n                    </BadgeCustom>\r\n                  </DropdownMenuCheckboxItem>\r\n                ))}\r\n\r\n                <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                  {t(\"Status\")}\r\n                </DropdownMenuLabel>\r\n                <DropdownMenuRadioGroup value={selectedStatus}>\r\n                  {statuses.map((status) => (\r\n                    <DropdownMenuRadioItem\r\n                      key={status.value}\r\n                      value={status.value}\r\n                      className={`text-base ${selectedStatus === status.value ? \"bg-muted/50\" : \"\"\r\n                        }`}\r\n                      onSelect={(e) => {\r\n                        if (\r\n                          status.value === \"true\" ||\r\n                          status.value === \"false\"\r\n                        ) {\r\n                          setSelectedStatus(null);\r\n                        }\r\n                        e.preventDefault();\r\n                        setSelectedStatus(status.value);\r\n                      }}\r\n                    >\r\n                      <BadgeCustom\r\n                        variant={\r\n                          status.variant as\r\n                          | \"blue\"\r\n                          | \"red\"\r\n                          | \"yellow\"\r\n                          | \"green\"\r\n                          | \"default\"\r\n                          | \"secondary\"\r\n                          | \"mint\"\r\n                          | \"orange\"\r\n                          | \"purple\"\r\n                        }\r\n                      >\r\n                        <div className=\"flex flex-row justify-center items-center gap-2 w-[105px]\">\r\n                          <div\r\n                            className={`flex w-2 h-2 rounded-full ${status.color}`}\r\n                          ></div>\r\n                          {t(status.label)}\r\n                        </div>\r\n                      </BadgeCustom>\r\n                    </DropdownMenuRadioItem>\r\n                  ))}\r\n                </DropdownMenuRadioGroup>\r\n              </div>\r\n\r\n              <div className=\"flex w-full justify-end mt-4 gap-2\">\r\n                <Button size=\"sm\" variant=\"secondary\" onClick={handleReset}>\r\n                  {t(\"Reset\")}\r\n                </Button>\r\n                <Button variant=\"primary\" size=\"sm\" onClick={handleApply}>\r\n                  {t(\"Apply\")}\r\n                </Button>\r\n              </div>\r\n            </DropdownMenuContent>\r\n          </DropdownMenu>\r\n        </div>\r\n\r\n        {/* Manage Employees Section */}\r\n\r\n        {/* Header */}\r\n        {sortedUser.length > 0 ? (\r\n          <div className=\"bg-secondary rounded-lg border-none\">\r\n            <Table className=\"overflow-hidden min-h-[calc(100vh-860px)]\">\r\n              <TableHeader>\r\n                <TableRow className=\"grid grid-cols-12 w-full\">\r\n                  <TableHead className=\"sm:col-span-1 lg:col-span-1\">\r\n                    {t(\"Id\")}\r\n                  </TableHead>\r\n                  <TableHead className=\"sm:col-span-4 lg:col-span-3\">\r\n                    {t(\"FullName\")}\r\n                  </TableHead>\r\n                  <TableHead className=\"sm:col-span-3 lg:col-span-3\">\r\n                    {t(\"Role\")}\r\n                  </TableHead>\r\n                  <TableHead className=\"sm:col-span-3 lg:col-span-4\">\r\n                    {t(\"Status\")}\r\n                  </TableHead>\r\n                  <TableHead className=\"sm:col-span-0 lg:col-span-0\"></TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                <ScrollArea className=\"h-full w-full rounded-md flex-1 [&>[data-radix-scroll-area-viewport]]:max-h-[calc(100vh-300px)]\">\r\n                  {sortedUser.map((employee, index) => (\r\n                    <TableRow key={index} className=\"grid grid-cols-12\">\r\n                      <TableCell className=\"sm:text-sm lg:text-base sm:col-span-1 lg:col-span-1 flex items-center min-w-0\">\r\n                        {employee.id}\r\n                      </TableCell>\r\n                      <TableCell className=\"sm:text-sm lg:text-base sm:col-span-4 lg:col-span-3 flex items-center\">\r\n                        <div className=\"flex items-center gap-2 w-full\">\r\n                          <UserTooltip user={employee}>\r\n                            <div className=\"flex items-center gap-2 md:w-[220px] xl:w-[440px]\">\r\n                              <Avatar className=\"custom-shadow h-[35px] w-[35px]\">\r\n                                <AvatarImage\r\n                                  src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${employee.profile.image?.path}`}\r\n                                />\r\n                                <AvatarFallback id={employee.id.toString()}>\r\n                                  {getInitials(employee.profile.name)}\r\n                                </AvatarFallback>\r\n                              </Avatar>\r\n                              {employee.profile.name ? (\r\n                                <p className=\"truncate\">\r\n                                  {employee.profile.name}\r\n                                </p>\r\n                              ) : (\r\n                                <p className=\"text-[14px] text-destructive truncate\">\r\n                                  {employee.username}\r\n                                  {t(\"NoProfileProvided\")}\r\n                                </p>\r\n                              )}\r\n                            </div>\r\n                          </UserTooltip>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell className=\"sm:text-sm lg:text-base sm:col-span-3 lg:col-span-3 flex  items-center\">\r\n                        <BadgeCustom\r\n                          shape=\"square\"\r\n                          variant={getUserVariant(employee.role).variant}\r\n                          iconName={getUserVariant(employee.role).iconName}\r\n                          showIcon={true}\r\n                          hideText={windowWidth > 1024 ? false : true}\r\n                        >\r\n                          {t(employee.role)}\r\n                        </BadgeCustom>\r\n                      </TableCell>\r\n                      <TableCell className=\"sm:text-sm lg:text-base sm:col-span-3 lg:col-span-4 flex  items-center\">\r\n                        <BadgeCustom\r\n                          variant={employee.active ? \"green\" : \"red\"}\r\n                          showIcon={true}\r\n                          hideText={windowWidth > 1024 ? false : true}\r\n                          iconName=\"radio_button_checked\"\r\n                        >\r\n                          {employee.active ? t(\"Active\") : t(\"Inactive\")}\r\n                        </BadgeCustom>\r\n                      </TableCell>\r\n                      <TableCell className=\"sm:text-sm lg:text-base sm:col-span-0 lg:col-span-0 flex items-end justify-end\">\r\n                        <DropdownMenu>\r\n                          <DropdownMenuTrigger>\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              className=\"w-[45px] h-[45px]\"\r\n                              onClick={() => setDialogType(\"blank\")}\r\n                            >\r\n                              <span className=\"material-symbols-outlined items-center text-muted-foreground\">\r\n                                more_horiz\r\n                              </span>\r\n                            </Button>\r\n                          </DropdownMenuTrigger>\r\n                          <DropdownMenuContent\r\n                            align=\"end\"\r\n                            className=\"px-4 py-2\"\r\n                          >\r\n                            <div className=\" cursor-pointer\">\r\n                              <AlertDialog\r\n                                open={\r\n                                  (isDialogOpen && dialogType === \"editform\") ||\r\n                                  dialogType === \"edit\"\r\n                                }\r\n                              >\r\n                                <AlertDialogTrigger\r\n                                  asChild\r\n                                  onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    setIsDialogOpen(true);\r\n                                    setPasswordErrorForEdit(null);\r\n                                    setDialogType(\"editform\");\r\n                                    userRefs.current[index].password = \"\";\r\n                                  }}\r\n                                >\r\n                                  <div\r\n                                    onClick={(e) => e.stopPropagation()}\r\n                                    className=\"flex w-full text-[18px]\"\r\n                                  >\r\n                                    {t(\"Edit\")}\r\n                                  </div>\r\n                                </AlertDialogTrigger>\r\n                                <AlertDialogContent\r\n                                  className=\"flex flex-col gap-4 \"\r\n                                  onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                  }}\r\n                                >\r\n                                  <AlertDialogHeader>\r\n                                    <h1 className=\"text-2xl font-bold\">\r\n                                      {t(\"EditEmployee\")}\r\n                                    </h1>\r\n                                    <AlertDialogTitle></AlertDialogTitle>\r\n                                    <AlertDialogDescription>\r\n                                      {t(\"EditEmployeeDescription\")}\r\n                                    </AlertDialogDescription>\r\n                                  </AlertDialogHeader>\r\n\r\n                                  <div className=\"flex flex-col gap-1 pointer-events-none w-96\">\r\n                                    <label> {t(\"Username\")}</label>\r\n                                    <Textfield\r\n                                      className=\"bg-secondary cursor-not-allowed \"\r\n                                      showIcon={true}\r\n                                      iconName=\"person\"\r\n                                      onChange={() => { }}\r\n                                      value={\"\"}\r\n                                      placeholder={employee.username}\r\n                                    />\r\n                                  </div>\r\n\r\n                                  <div className=\" flex flex-col gap-4  w-96 h-auto\">\r\n                                    <div>\r\n                                      <label>{t(\"Password\")}</label>\r\n                                      <Textfield\r\n                                        placeholder={t(\"Password\")}\r\n                                        className={`bg-secondary`}\r\n                                        showIcon={true}\r\n                                        iconName=\"lock\"\r\n                                        onChange={(e) => {\r\n                                          try {\r\n                                            if (userRefs.current[index]) {\r\n                                              userRefs.current[index].password =\r\n                                                e.target.value;\r\n                                            }\r\n\r\n                                            // Validate password length\r\n                                            if (e.target.value.length < 8) {\r\n                                              setPasswordErrorForEdit(\r\n                                                \"Password must be at least 8 characters long.\"\r\n                                              );\r\n                                            } else {\r\n                                              setPasswordErrorForEdit(null);\r\n                                            }\r\n                                          } catch (error) {\r\n                                            console.error(\r\n                                              \"Error in onChange handler:\",\r\n                                              error\r\n                                            );\r\n                                          }\r\n                                        }}\r\n                                      />\r\n                                    </div>\r\n\r\n                                    {passwordErrorForEdit && (\r\n                                      <p className=\"text-red-500 text-sm mt-1\">\r\n                                        {passwordErrorForEdit}\r\n                                      </p>\r\n                                    )}\r\n                                  </div>\r\n\r\n                                  <div className=\"w-96 h-auto\">\r\n                                    <label>{t(\"Role\")}</label>\r\n                                    <div className=\"relative bg-secondary rounded-md\">\r\n                                      <Select\r\n                                        defaultValue={employee.role}\r\n                                        onValueChange={(value) => {\r\n                                          if (userRefs.current[index]) {\r\n                                            userRefs.current[index].role =\r\n                                              value as role; // Ensure the value matches the type\r\n                                          }\r\n                                        }}\r\n                                      >\r\n                                        <SelectTrigger className=\"bg-secondary w-96 h-auto p-2  rounded-md border-none\">\r\n                                          <SelectValue placeholder=\"\" />\r\n                                        </SelectTrigger>\r\n                                        <SelectContent>\r\n                                          <SelectGroup>\r\n                                            <SelectItem value=\"supervisor\">\r\n                                              <BadgeCustom\r\n                                                variant=\"yellow\"\r\n                                                iconName=\"engineering\"\r\n                                                showIcon={true}\r\n                                                shape=\"square\"\r\n                                              >\r\n                                                {t(\"supervisor\")}\r\n                                              </BadgeCustom>\r\n                                            </SelectItem>\r\n                                            <SelectItem value=\"inspector\">\r\n                                              <BadgeCustom\r\n                                                variant=\"red\"\r\n                                                iconName=\"person_search\"\r\n                                                showIcon={true}\r\n                                                shape=\"square\"\r\n                                              >\r\n                                                {t(\"inspector\")}\r\n                                              </BadgeCustom>\r\n                                            </SelectItem>\r\n                                            <SelectItem value=\"admin\">\r\n                                              <BadgeCustom\r\n                                                variant=\"blue\"\r\n                                                iconName=\"manage_accounts\"\r\n                                                showIcon={true}\r\n                                                shape=\"square\"\r\n                                              >\r\n                                                {t(\"admin\")}\r\n                                              </BadgeCustom>\r\n                                            </SelectItem>\r\n                                          </SelectGroup>\r\n                                        </SelectContent>\r\n                                      </Select>\r\n                                    </div>\r\n                                  </div>\r\n\r\n                                  <AlertDialogFooter>\r\n                                    <Button\r\n                                      variant=\"secondary\"\r\n                                      size=\"lg\"\r\n                                      onClick={async () => {\r\n                                        handleDialogResult(false);\r\n                                        setPendingAction(null); // Clear the pending action\r\n                                        setDialogType(\"\"); // Reset the dialog type after action is completed\r\n                                      }}\r\n                                    >\r\n                                      {t(\"Back\")}\r\n                                    </Button>\r\n                                    <Button\r\n                                      className=\" flex  justify-center gap-2\"\r\n                                      variant=\"primary\"\r\n                                      size=\"lg\"\r\n                                      onClick={(e) => {\r\n                                        e.stopPropagation(); // Prevent click event from bubbling up\r\n                                        handleEditUserDialog(\r\n                                          employee.id,\r\n                                          index\r\n                                        );\r\n                                      }}\r\n                                    >\r\n                                      <span className=\"material-symbols-outlined\">\r\n                                        save\r\n                                      </span>\r\n                                      {t(\"Save\")}\r\n                                    </Button>\r\n                                  </AlertDialogFooter>\r\n                                </AlertDialogContent>\r\n\r\n                                {isDialogOpen === true &&\r\n                                  dialogType === \"edit\" && (\r\n                                    <AlertCustom\r\n                                      title={a(\"SureToEditEmployee\")}\r\n                                      description={a(\r\n                                        \"SureToEditEmployeeDescription\"\r\n                                      )}\r\n                                      primaryButtonText={t(\"Confirm\")}\r\n                                      primaryIcon=\"check\"\r\n                                      secondaryButtonText={t(\"Cancel\")}\r\n                                      backResult={handleDialogResult}\r\n                                    />\r\n                                  )}\r\n                              </AlertDialog>\r\n                            </div>\r\n                            <div className=\" cursor-pointer\">\r\n                              <div\r\n                                onClick={(e) => {\r\n                                  e.stopPropagation();\r\n                                  handleInactiveUserDialog(employee.id);\r\n                                }}\r\n                                className=\"flex w-full text-[18px] text-destructive\"\r\n                              >\r\n                                {employee.active\r\n                                  ? t(\"Deactivate\")\r\n                                  : t(\"Activate\")}\r\n                              </div>\r\n                              {isDialogOpen === true &&\r\n                                dialogType === \"deactivate\" && (\r\n                                  <AlertCustom\r\n                                    title={\r\n                                      employee.active\r\n                                        ? a(\"SureToDeactivate\")\r\n                                        : a(\"SureToActivate\")\r\n                                    }\r\n                                    description={\r\n                                      employee.active\r\n                                        ? a(\"SureToDeactivateDescription\")\r\n                                        : a(\"SureToActivateDescription\")\r\n                                    }\r\n                                    primaryButtonText={t(\"Confirm\")}\r\n                                    primaryIcon=\"check\"\r\n                                    secondaryButtonText={t(\"Cancel\")}\r\n                                    backResult={handleDialogResult}\r\n                                  />\r\n                                )}\r\n                            </div>\r\n                          </DropdownMenuContent>\r\n                        </DropdownMenu>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </ScrollArea>\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        ) : (\r\n          <div className=\"col-span-full min-h-[261px]\">\r\n            <NotFound\r\n              icon=\"quick_reference_all\"\r\n              title=\"NoDataAvailable\"\r\n              description=\"NoDataAvailableDescription\"\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\location-&-zone\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-checklist\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-checklist\\create\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-checklist\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatTime' is defined but never used. Allowed unused vars must match /^_/u.","line":38,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getInitials' is defined but never used. Allowed unused vars must match /^_/u.","line":38,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Avatar' is defined but never used. Allowed unused vars must match /^_/u.","line":41,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AvatarFallback' is defined but never used. Allowed unused vars must match /^_/u.","line":41,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AvatarImage' is defined but never used. Allowed unused vars must match /^_/u.","line":42,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Skeleton' is defined but never used. Allowed unused vars must match /^_/u.","line":43,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used. Allowed unused vars must match /^_/u.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used. Allowed unused vars must match /^_/u.","line":50,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *  หน้าแสดงรายการ Checklist ทั้งหมดในระบบ โดยสามารถค้นหา Checklist ได้ และสามารถค้นหา Checklist ตาม Zone และ Date ได้\r\n * Input:\r\n * - ไม่มี\r\n * Output:\r\n * - แสดงรายการ Checklist ทั้งหมดในระบบ โดยแสดงรายละเอียดของ Checklist แต่ละรายการ และสามารถค้นหา Checklist ได้ และสามารถค้นหา Checklist ตาม Zone และ Date ได้\r\n * - สามารถคลิกเพื่อดูรายละเอียดของ Checklist แต่ละรายการ\r\n * - สามารถคลิกเพื่อสร้าง Checklist ใหม่ได้\r\n **/\r\n\r\n\"use client\";\r\nimport { IChecklist, IZone } from \"@/app/type\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport Textfield from \"@/components/textfield\";\r\n\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Button, buttonVariants } from \"@/components/ui/button\";\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuLabel,\r\n  DropdownMenuRadioGroup,\r\n  DropdownMenuRadioItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\n\r\nimport { fetchData, formatTime, getInitials } from \"@/lib/utils\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\r\nimport { AvatarImage } from \"@radix-ui/react-avatar\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport {\r\n  TooltipProvider,\r\n  Tooltip,\r\n  TooltipTrigger,\r\n  TooltipContent,\r\n} from \"@radix-ui/react-tooltip\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { DatePickerWithRange } from \"@/components/date-picker\";\r\nimport dynamic from \"next/dynamic\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport NotFound from \"@/components/not-found\";\r\nimport { VersionTooltip } from \"@/components/version-tooltip\";\r\nimport { ZoneTooltip } from \"@/components/zone-tooltip\";\r\nconst Map = dynamic(() => import(\"@/components/map\"), { ssr: false });\r\n\r\nexport default function Page() {\r\n  const z = useTranslations(\"Zone\");\r\n  const t = useTranslations(\"General\");\r\n  const a = useTranslations(\"Alert\");\r\n\r\n  const router = useRouter();\r\n  const locale = useLocale();\r\n  interface IChecklistWithExtras extends IChecklist {\r\n    zones: string[]; // New field\r\n    itemCounts: Record<string, number>; // Another new field\r\n    versionCount: number;\r\n  }\r\n\r\n  const handleDeleteChecklist = async (id: number) => {\r\n    toast({\r\n      variant: \"success\",\r\n      title: a(\"ChecklistRemoveSuccessTitle\"),\r\n      description: a(\"ChecklistRemoveSuccessDescription\"),\r\n    });\r\n    try {\r\n      const response = await fetchData(\"delete\", `/checklist/${id}`, true);\r\n\r\n      if (response) {\r\n        setFilteredChecklists((prevChecklists) =>\r\n          prevChecklists.filter((checklist) => checklist.id !== id)\r\n        );\r\n      } else {\r\n        console.error(\"Failed to delete checklist: No response from API\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"An error occurred while deleting the checklist:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDeletePatrolChecklistDialog = async (id: number) => {\r\n    setPendingAction(() => () => handleDeleteChecklist(id));\r\n    setDialogType(\"delete\");\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [pendingAction, setPendingAction] = useState<(() => void) | null>(null);\r\n  const [dialogType, setDialogType] = useState<string>(\"\");\r\n\r\n  const handleDialogResult = (result: boolean) => {\r\n    setIsDialogOpen(false);\r\n    if (result && pendingAction) {\r\n      pendingAction(); // Execute the pending action\r\n      setPendingAction(null); // Clear the pending action\r\n      setDialogType(\"\"); // Reset the dialog type after action is completed\r\n    }\r\n  };\r\n\r\n  const getChecklistColor = (checklist: IChecklistWithExtras): string => {\r\n    let safety = checklist.itemCounts.safety || 0;\r\n    let environment = checklist.itemCounts.environment || 0;\r\n    let maintenance = checklist.itemCounts.maintenance || 0;\r\n\r\n    // Find the highest value\r\n    const maxValue = Math.max(safety, environment, maintenance);\r\n\r\n    // Handle if all are equal\r\n    if (safety === environment && environment === maintenance) {\r\n      return \"border-yellow\"; // All are equal\r\n    }\r\n\r\n    // Handle cases where two values are tied and are the max\r\n    if (safety === maxValue && environment === maxValue) {\r\n      return \"border-mint\"; // Safety and environment are tied\r\n    }\r\n    if (environment === maxValue && maintenance === maxValue) {\r\n      return \"border-purple\"; // Environment and maintenance are tied\r\n    }\r\n    if (safety === maxValue && maintenance === maxValue) {\r\n      return \"border-orange\"; // Safety and maintenance are tied\r\n    }\r\n\r\n    // Handle single highest value\r\n    if (safety === maxValue) {\r\n      return \"border-green\"; // Safety has the highest value\r\n    }\r\n    if (environment === maxValue) {\r\n      return \"border-primary\"; // Environment has the highest value\r\n    }\r\n    if (maintenance === maxValue) {\r\n      return \"border-destructive\"; // Maintenance has the highest value\r\n    }\r\n\r\n    // Default fallback\r\n    return \"\"; // Default color when none of the above conditions are met\r\n  };\r\n\r\n  const handleChecklist = (id: number) => {\r\n    router.push(`/${locale}/admin/settings/patrol-checklist/${id}`);\r\n  };\r\n\r\n  const handleGoToCreateChecklist = () => {\r\n    router.push(`/${locale}/admin/settings/patrol-checklist/create`);\r\n  };\r\n  // Modify the getData function to use fetchData\r\n  const getData = async () => {\r\n    try {\r\n      // Construct query params for the filters\r\n      const params = new URLSearchParams();\r\n\r\n      // Add search term to params\r\n      if (searchTerm) {\r\n        params.append(\"search\", searchTerm);\r\n      }\r\n\r\n      // Add selected zones to params\r\n      if (selectedZones.length > 0) {\r\n        params.append(\r\n          \"zones\",\r\n          selectedZones.map((zone) => zone.name).join(\",\")\r\n        );\r\n      }\r\n\r\n      // Add date range to params\r\n      if (selectedDateRange?.from) {\r\n        params.append(\"startDate\", selectedDateRange.from.toISOString());\r\n      }\r\n      if (selectedDateRange?.to) {\r\n        params.append(\"endDate\", selectedDateRange.to.toISOString());\r\n      }\r\n\r\n      // Fetch data using fetchData utility with query params\r\n      const data = await fetchData(\r\n        \"get\",\r\n        `/checklists?${params.toString()}`,\r\n        true\r\n      );\r\n\r\n      // Validate data format\r\n      if (!Array.isArray(data)) {\r\n        console.error(\"Invalid data format:\", data);\r\n        return []; // Return empty array if data format is incorrect\r\n      }\r\n\r\n      setFilteredChecklists(data); // Initially set filtered data to all data\r\n\r\n      return data; // Return fetched data\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch checklist data:\", error); // Log error\r\n      return []; // Return empty array on error\r\n    }\r\n  };\r\n\r\n  // Trigger the fetch on component mount using useEffect\r\n  useEffect(() => {\r\n    getData();\r\n  }, []); // Initial fetch when the component mounts\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [sortOption, setSortOption] = useState<\r\n    \"Name\" | \"ModifiedDate\" | \"Type\"\r\n  >(\"Name\");\r\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"asc\");\r\n  const [selectedZones, setSelectedZones] = useState<IZone[]>([]);\r\n  const [tempSelectedZones, setTempSelectedZones] = useState<IZone[]>([]);\r\n  const [selectedDateRange, setSelectedDateRange] = useState<{\r\n    from?: Date;\r\n    to?: Date;\r\n  }>({});\r\n  const [tempDateRange, setTempDateRange] = useState<{\r\n    from?: Date;\r\n    to?: Date;\r\n  }>({});\r\n  const [filteredChecklists, setFilteredChecklists] = useState<\r\n    IChecklistWithExtras[]\r\n  >([]);\r\n\r\n  // Filter by search term\r\n  const filterBySearchTerm = (checklists: IChecklistWithExtras[]) => {\r\n    if (!searchTerm) return checklists; // If no search term, return all checklists\r\n    return checklists.filter((checklist) =>\r\n      checklist.title.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n  };\r\n\r\n  // Fetch and apply search filter on search term change\r\n  useEffect(() => {\r\n    const fetchAndFilter = async () => {\r\n      const freshData = await getData(); // Fetch fresh data\r\n      const filtered = filterBySearchTerm(freshData); // Apply search term filter\r\n      setFilteredChecklists(filtered); // Update state with filtered data\r\n    };\r\n\r\n    fetchAndFilter();\r\n  }, [searchTerm]); // Trigger fetch when search term changes\r\n\r\n  // Apply filters (zones, date range, and search term)\r\n  const applyFilters = async () => {\r\n    const freshData = await getData(); // Fetch fresh data\r\n\r\n    // Update selected filters\r\n    setSelectedZones(tempSelectedZones);\r\n    setSelectedDateRange(tempDateRange);\r\n\r\n    // Apply filters for zones and date range\r\n    const filtered = freshData.filter((checklist) => {\r\n      const matchesZones =\r\n        tempSelectedZones.length === 0 || // If no zones are selected, show all\r\n        checklist.zones.some((zone) =>\r\n          tempSelectedZones.some(\r\n            (selectedZone) =>\r\n              selectedZone.name.toLowerCase() === zone.toLowerCase()\r\n          )\r\n        );\r\n\r\n      const matchesDateRange =\r\n        (!tempDateRange?.from ||\r\n          new Date(checklist.updatedAt) >= tempDateRange.from) &&\r\n        (!tempDateRange?.to ||\r\n          new Date(checklist.updatedAt) <= tempDateRange.to);\r\n\r\n      return matchesZones && matchesDateRange;\r\n    });\r\n\r\n    // Apply search term filter\r\n    const filteredWithSearch = filterBySearchTerm(filtered);\r\n    setFilteredChecklists(filteredWithSearch); // Update the filtered state\r\n  };\r\n\r\n  // Reset filters to default\r\n  const resetFilters = async () => {\r\n    setTempSelectedZones([]); // Reset temp selected zones\r\n    setTempDateRange({}); // Reset temp date range\r\n    setSelectedZones([]); // Clear applied zones\r\n    setSelectedDateRange({}); // Clear applied date range\r\n  };\r\n\r\n  const [sortedChecklists, setSortedChecklists] = useState<\r\n    IChecklistWithExtras[]\r\n  >([]);\r\n\r\n  useEffect(() => {\r\n    const sorted = [...filteredChecklists].sort((a, b) => {\r\n      let comparison = 0;\r\n\r\n      if (sortOption === \"Name\") {\r\n        comparison = a.title.localeCompare(b.title);\r\n      } else if (sortOption === \"ModifiedDate\") {\r\n        comparison =\r\n          new Date(a.updatedAt).getTime() - new Date(b.updatedAt).getTime();\r\n      } else if (sortOption === \"Type\") {\r\n        const typeA = getChecklistColor(a);\r\n        const typeB = getChecklistColor(b);\r\n\r\n        comparison = typeA.localeCompare(typeB);\r\n      }\r\n\r\n      return sortOrder === \"asc\" ? comparison : -comparison;\r\n    });\r\n\r\n    setSortedChecklists(sorted); // Update sorted checklists state\r\n  }, [filteredChecklists, sortOption, sortOrder]); // Dependencies to trigger the effect\r\n  return (\r\n    <div className=\"flex flex-col gap-4 \">\r\n      <div className=\"flex flex-row justify-between pt-2\">\r\n        <div className=\"text-2xl font-bold\">{t(\"Checklist\")}</div>\r\n        <Button\r\n          onClick={() => {\r\n            handleGoToCreateChecklist();\r\n          }}\r\n          className=\"flex flex-row gap-2 custom-shadow\"\r\n          variant=\"primary\"\r\n        >\r\n          <span className=\"material-symbols-outlined text-2xl\">add</span>\r\n          <div className=\"text-lg\">{t(\"CreateChecklist\")}</div>\r\n        </Button>\r\n      </div>\r\n      <div className=\"flex items-center gap-2\">\r\n        <Textfield\r\n          iconName=\"search\"\r\n          showIcon={true}\r\n          placeholder={t(\"Search\")}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px]\r\n                     bg-card w-auto h-[40px] gap-[10px] inline-flex items-center\r\n                     justify-center rounded-md text-sm font-medium`}\r\n          >\r\n            <span className=\"material-symbols-outlined\">swap_vert</span>\r\n            <div className=\"text-lg\">{t(\"Sort\")}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align=\"end\" className=\"p-2 gap-2\">\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n              {t(\"SortBy\")}\r\n            </DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sortOption}\r\n              onValueChange={(value) =>\r\n                setSortOption(value as \"Name\" | \"ModifiedDate\" | \"Type\")\r\n              }\r\n            >\r\n              <DropdownMenuRadioItem\r\n                value=\"Name\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Name\")}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem\r\n                value=\"ModifiedDate\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"DateModified\")}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem\r\n                value=\"Type\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Type\")}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n              {t(\"Order\")}\r\n            </DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sortOrder}\r\n              onValueChange={(value) => setSortOrder(value as \"desc\" | \"asc\")}\r\n            >\r\n              <DropdownMenuRadioItem\r\n                value=\"asc\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Ascending\")}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem\r\n                value=\"desc\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Descending\")}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium \r\n                `}\r\n          >\r\n            <span className=\"material-symbols-outlined\">page_info</span>\r\n            <div className=\"text-lg\">{t(\"Filter\")}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent\r\n            className=\"flex flex-col justify-center gap-2 p-2 z-50\"\r\n            align=\"end\"\r\n          >\r\n            <div>\r\n              <div>\r\n                <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                  {t(\"Date\")}\r\n                </DropdownMenuLabel>\r\n                <DatePickerWithRange\r\n                  className=\"my-date-picker\"\r\n                  startDate={tempDateRange?.from || selectedDateRange?.from}\r\n                  endDate={tempDateRange?.to || selectedDateRange?.to}\r\n                  onSelect={(range) => {\r\n                    if (range?.from || range?.to) {\r\n                      setTempDateRange(range);\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                {t(\"Zone\")}\r\n              </DropdownMenuLabel>\r\n              <AlertDialog>\r\n                <AlertDialogTrigger\r\n                  asChild\r\n                  className=\"flex items-center gap-2 rounded cursor-pointer\"\r\n                >\r\n                  <Button\r\n                    variant={\"secondary\"}\r\n                    className=\"w-full h-[36px] rounded-md bg-secondary justify-start text-left gap-[2px] font-normal text-base\"\r\n                  >\r\n                    <span className=\"material-symbols-outlined\">\r\n                      location_on\r\n                    </span>\r\n                    <p className=\"truncate w-[200px]\">\r\n                      {selectedZones.length > 0\r\n                        ? selectedZones.map((zone) => z(zone.name)).join(\", \")\r\n                        : t(\"SelectZones\")}\r\n                    </p>\r\n                  </Button>\r\n                </AlertDialogTrigger>\r\n\r\n                <AlertDialogContent className=\"w-full sm:w-[40%] md:w-[50%] lg:w-[100%] max-w-[1200px] rounded-md\">\r\n                  <AlertDialogHeader>\r\n                    <AlertDialogTitle className=\"text-2xl\">\r\n                      {t(\"FilterByZoneTitle\")}\r\n                    </AlertDialogTitle>\r\n                    <AlertDialogDescription className=\"text-base\">\r\n                      {t(\"FilterByZoneDescription\")}\r\n                    </AlertDialogDescription>\r\n                  </AlertDialogHeader>\r\n                  <div>\r\n                    <div className=\"text-muted-foreground flex items-center\">\r\n                      <span className=\"material-symbols-outlined\">\r\n                        location_on\r\n                      </span>\r\n                      {t(\"Zone\")}\r\n                    </div>\r\n                    <div className=\"flex justify-center bg-secondary rounded-lg py-4\">\r\n                      <Map\r\n                        disable={false}\r\n                        initialSelectedZones={selectedZones.map(\r\n                          (zone) => zone.id\r\n                        )}\r\n                        onZoneSelect={(zones: IZone[]) =>\r\n                          setTempSelectedZones(zones)\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <AlertDialogFooter>\r\n                    <AlertDialogAction\r\n                      className=\"bg-primary\"\r\n                      onClick={() => {\r\n                        setSelectedZones(tempSelectedZones); // Apply selected zones\r\n                      }}\r\n                    >\r\n                      {t(\"Done\")}\r\n                    </AlertDialogAction>\r\n                  </AlertDialogFooter>\r\n                </AlertDialogContent>\r\n              </AlertDialog>\r\n            </div>\r\n\r\n            <div className=\"flex w-full justify-end mt-4 gap-2\">\r\n              <Button size=\"sm\" variant=\"secondary\" onClick={resetFilters}>\r\n                {t(\"Reset\")}\r\n              </Button>\r\n              <Button variant=\"primary\" size=\"sm\" onClick={applyFilters}>\r\n                {t(\"Apply\")}\r\n              </Button>\r\n            </div>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </div>\r\n\r\n      {/* Checklist Cards */}\r\n      <ScrollArea className=\"h-full w-full rounded-md flex-1 [&>[data-radix-scroll-area-viewport]]:max-h-[calc(100vh-280px)]\">\r\n        <div className=\"space-y-4  rounded-lg\">\r\n          {sortedChecklists.length > 0 ? (\r\n            sortedChecklists.map((checklist) => (\r\n              <div key={checklist.id}>\r\n                <div\r\n                  onClick={() => {\r\n                    handleChecklist(checklist.id);\r\n                  }}\r\n                  className={`flex flex-row border-l-[10px] truncate h-full cursor-pointer ${getChecklistColor(\r\n                    checklist\r\n                  )} border-destructive h-[166px] bg-card rounded-lg custom-shadow px-6 py-4 justify-between`}\r\n                >\r\n                  <div className=\"flex flex-col gap-4  min-w-0\">\r\n                    {/* Left Section */}\r\n                    <div className=\"gap-1\">\r\n                      <VersionTooltip object={checklist}>\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          className=\"text-card-foreground text-base flex items-center hover:bg-card m-0 p-0\"\r\n                        >\r\n                          <span className=\"material-symbols-outlined mr-1\">\r\n                            history\r\n                          </span>\r\n                          {t(\"Version\")} {checklist.version}\r\n                        </Button>\r\n                      </VersionTooltip>\r\n\r\n                      <h2 className=\"text-2xl font-semibold truncate\">\r\n                        {checklist.title}\r\n                      </h2>\r\n                    </div>\r\n\r\n                    {/* Stats */}\r\n                    <div className=\"flex flex-col gap-2 text-gray-500\">\r\n                      <div className=\"flex flex-row gap-2\">\r\n                        <span className=\"material-symbols-outlined  text-muted-foreground\">\r\n                          location_on\r\n                        </span>\r\n\r\n                        <ZoneTooltip zonesName={checklist.zones}>\r\n                          <p className=\"text-base text-muted-foreground  truncate w-[700px] whitespace-nowrap min-w-0\">\r\n                            {checklist.zones\r\n                              .map((zone) => z(zone))\r\n                              .join(\", \")}\r\n                          </p>\r\n                        </ZoneTooltip>\r\n                      </div>\r\n                      <div className=\"flex gap-2\">\r\n                        <div className=\"flex items-center\">\r\n                          <span className=\"material-symbols-outlined text-green text-xl\">\r\n                            verified_user\r\n                          </span>\r\n                          <span className=\"ml-1 text-green text-xl\">\r\n                            {checklist.itemCounts.safety || 0}\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"flex items-center\">\r\n                          <span className=\"material-symbols-outlined text-blue-500 text-xl\">\r\n                            psychiatry\r\n                          </span>\r\n                          <span className=\"ml-1 text-blue-500 text-xl\">\r\n                            {checklist.itemCounts.environment || 0}\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"flex items-center\">\r\n                          <span className=\"material-symbols-outlined text-destructive text-xl\">\r\n                            build\r\n                          </span>\r\n                          <span className=\"ml-1 text-destructive text-xl\">\r\n                            {checklist.itemCounts.maintenance || 0}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"sticky right-[0px]  flex flex-row items-end \">\r\n                    <DropdownMenu>\r\n                      <DropdownMenuTrigger asChild\r\n                        className={\r\n                          buttonVariants({\r\n                            variant: \"ghost\",\r\n                            size: \"icon\",\r\n                          })}\r\n                      >\r\n                        <span className=\"material-symbols-outlined text-input\">\r\n                          more_vert\r\n                        </span>\r\n                      </DropdownMenuTrigger>\r\n                      <DropdownMenuContent\r\n                        align=\"end\"\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                        }}\r\n                        className=\"w-[80px] px-4 py-2\"\r\n                        side=\"bottom\"\r\n                      >\r\n                        <div className=\"text-lg cursor-pointer \">\r\n                          {t(\"Edit\")}\r\n                        </div>\r\n                        <div\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleDeletePatrolChecklistDialog(checklist.id);\r\n                          }}\r\n                          className=\"text-destructive text-lg cursor-pointer hover:text-transparent-50\"\r\n                        >\r\n                          {t(\"Delete\")}\r\n                        </div>\r\n                        {isDialogOpen && dialogType === \"delete\" && (\r\n                          <AlertCustom\r\n                            title={a(\"ChecklistRemoveConfirmTitle\")}\r\n                            description={a(\"ChecklistRemoveConfirmDescription\")}\r\n                            primaryButtonText={t(\"Confirm\")}\r\n                            primaryIcon=\"check\"\r\n                            secondaryButtonText={t(\"Cancel\")}\r\n                            backResult={(result) => handleDialogResult(result)}\r\n                          />\r\n                        )}\r\n                      </DropdownMenuContent>\r\n                    </DropdownMenu>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <div className=\"col-span-full min-h-[261px]\">\r\n              <NotFound\r\n                icon=\"quick_reference_all\"\r\n                title=\"NoChecklistsAvailable\"\r\n                description=\"NoChecklistsDescription\"\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </ScrollArea>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-preset\\[id]\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-preset\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-preset\\create\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-preset\\create\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-preset\\error\\unassinged-zone\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRouter' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport { useRouter } from \"next/navigation\";\r\nexport default function Page() {\r\n  //แปลภาษา\r\n  const t = useTranslations(\"General\");\r\n\r\n  const locale = useLocale();\r\n\r\n  return (\r\n    <div className=\" flex flex-col items-center text-center text-muted-foreground\">\r\n      <img\r\n        src=\"/assets/img/login_cover_2.png\"\r\n        alt=\"404 Not Found\"\r\n        className=\" absolute w-[380px] object-contain\"\r\n      />\r\n      <div className=\"pt-80\">\r\n        {/* Title */}\r\n        <p className=\"text-4xl font-semibold text-card-foreground mb-2\">\r\n          {t(\"ZoneWithoutAssignedUsers\")}\r\n        </p>\r\n        {/* Message to admin */}\r\n        <p className=\"text-lg font-medium mt-4\">\r\n          {t(\"ZoneWithoutAssignedUsersDescription\")}\r\n        </p>\r\n        <p className=\"text-lg font-medium mt-2\">\r\n          {t(\"PleaseGoTo\")}{\" \"}\r\n          <a\r\n            href={`/${locale}/admin/settings/location-&-zone`}\r\n            className=\"text-blue-500 underline\"\r\n          >\r\n            {t(\"Location&Zone\")}\r\n          </a>{\" \"}\r\n          {t(\"AssignUsersToTheZone\")}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\admin\\settings\\patrol-preset\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Skeleton' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatTime' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getInitials' is defined but never used. Allowed unused vars must match /^_/u.","line":26,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used. Allowed unused vars must match /^_/u.","line":46,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":47,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":48,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used. Allowed unused vars must match /^_/u.","line":49,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Avatar' is defined but never used. Allowed unused vars must match /^_/u.","line":51,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AvatarFallback' is defined but never used. Allowed unused vars must match /^_/u.","line":51,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AvatarImage' is defined but never used. Allowed unused vars must match /^_/u.","line":51,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserTooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":54,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":245,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":245,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *  หน้าแสดงรายการ Preset ทั้งหมดในระบบ โดยสามารถค้นหา Preset ได้ และสามารถค้นหา Preset ตาม Zone และ Date ได้\r\n * Input:\r\n * - ไม่มี\r\n * Output:\r\n * - แสดงรายการ Preset ทั้งหมดในระบบ โดยแสดงรายละเอียดของ Preset แต่ละรายการ และสามารถค้นหา Preset ได้ และสามารถค้นหา Preset ตาม Zone และ Date ได้\r\n * - สามารถคลิกเพื่อดูรายละเอียดของ Preset แต่ละรายการ\r\n * - สามารถคลิกเพื่อสร้าง Preset ใหม่ได้\r\n **/\r\n\r\n\"use client\";\r\nimport { IPreset, IZone } from \"@/app/type\";\r\nimport Textfield from \"@/components/textfield\";\r\nimport { Button, buttonVariants } from \"@/components/ui/button\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuLabel,\r\n  DropdownMenuRadioGroup,\r\n  DropdownMenuRadioItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { fetchData, formatTime, getInitials } from \"@/lib/utils\";\r\n\r\nimport { useRouter } from \"next/navigation\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport dynamic from \"next/dynamic\";\r\nimport { DatePickerWithRange } from \"@/components/date-picker\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport {\r\n  TooltipProvider,\r\n  Tooltip,\r\n  TooltipTrigger,\r\n  TooltipContent,\r\n} from \"@radix-ui/react-tooltip\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport NotFound from \"@/components/not-found\";\r\nimport { UserTooltip } from \"@/components/user-tooltip\";\r\nimport { VersionTooltip } from \"@/components/version-tooltip\";\r\nimport { ZoneTooltip } from \"@/components/zone-tooltip\";\r\nimport { TextTooltip } from \"@/components/text-tooltip\";\r\n\r\nconst Map = dynamic(() => import(\"@/components/map\"), { ssr: false });\r\n\r\nexport default function Page() {\r\n  //แปลภาษา\r\n  const a = useTranslations(\"Alert\");\r\n  const t = useTranslations(\"General\");\r\n  const z = useTranslations(\"Zone\");\r\n\r\n  const router = useRouter();\r\n  const locale = useLocale();\r\n  interface IPresetWithExtras extends IPreset {\r\n    updateByUserName: string;\r\n    updateByUserImagePath: string;\r\n  }\r\n\r\n  // ลบจาก API removePreset\r\n  const removePreset = async (id: number) => {\r\n    toast({\r\n      variant: \"success\",\r\n      title: a(\"PresetRemoveSuccessTitle\"),\r\n      description: a(\"PresetRemoveSuccessDescription\"),\r\n    });\r\n    try {\r\n      const response = await fetchData(\"delete\", `/preset/${id}`, true);\r\n\r\n      if (response) {\r\n        setAllPreset((prevPresets) =>\r\n          prevPresets.filter((preset) => preset.id !== id)\r\n        );\r\n        setFilteredPresets((prev) => prev.filter((preset) => preset.id !== id));\r\n      } else {\r\n        console.error(\"Failed to delete Preset: No response from API\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"An error occurred while deleting the preset:\", error);\r\n    }\r\n  };\r\n\r\n  const handleRemovePreset = (id: number) => {\r\n    setPendingAction(() => () => removePreset(id)); // ตั้งค่า Action ที่จะลบ\r\n    setDialogType(\"delete\");\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const [allPreset, setAllPreset] = useState<IPresetWithExtras[]>([]);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false); // State สำหรับเปิด/ปิด Dialog\r\n  const [pendingAction, setPendingAction] = useState<(() => void) | null>(null); // เก็บ Action ที่จะลบ\r\n  const [dialogType, setDialogType] = useState<string>(\"\");\r\n\r\n  const handleDialogResult = (result: boolean) => {\r\n    setIsDialogOpen(false);\r\n    if (result && pendingAction) {\r\n      pendingAction(); // Execute the pending action\r\n      setPendingAction(null); // Clear the pending action\r\n      setDialogType(\"\");\r\n    }\r\n  };\r\n\r\n  const handleCreatePreset = () => {\r\n    router.push(`/${locale}/admin/settings/patrol-preset/create`);\r\n  };\r\n\r\n  const getData = async () => {\r\n    try {\r\n      // Construct query params for the filters\r\n      const params = new URLSearchParams();\r\n\r\n      // Add search term to params\r\n      if (searchTerm) {\r\n        params.append(\"search\", searchTerm);\r\n      }\r\n\r\n      // Add selected zones to params\r\n      if (selectedZones.length > 0) {\r\n        params.append(\r\n          \"zones\",\r\n          selectedZones.map((zone) => zone.name).join(\",\")\r\n        );\r\n      }\r\n\r\n      // Add date range to params\r\n      if (selectedDateRange?.from) {\r\n        params.append(\"startDate\", selectedDateRange.from.toISOString());\r\n      }\r\n      if (selectedDateRange?.to) {\r\n        params.append(\"endDate\", selectedDateRange.to.toISOString());\r\n      }\r\n\r\n      // Fetch data using fetchData utility with query params\r\n      const data = await fetchData(\r\n        \"get\",\r\n        `/presets?${params.toString()}`,\r\n        true\r\n      );\r\n\r\n      // Validate data format\r\n      if (!Array.isArray(data)) {\r\n        console.error(\"Invalid data format:\", data);\r\n        return []; // Return empty array if data format is incorrect\r\n      }\r\n\r\n      setFilteredPresets(data); // Initially set filtered data to all data\r\n\r\n      return data; // Return fetched data\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch preset data:\", error); // Log error\r\n      return []; // Return empty array on error\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  // search bar\r\n  const [searchTerm, setSearchTerm] = useState<string>(\"\");\r\n  const [sortOption, setSortOption] = useState<\"Name\" | \"ModifiedDate\">(\"Name\");\r\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"asc\");\r\n  const [selectedZones, setSelectedZones] = useState<IZone[]>([]);\r\n  const [tempSelectedZones, setTempSelectedZones] = useState<IZone[]>([]);\r\n  const [selectedDateRange, setSelectedDateRange] = useState<{\r\n    from?: Date;\r\n    to?: Date;\r\n  }>({});\r\n  const [tempDateRange, setTempDateRange] = useState<{\r\n    from?: Date;\r\n    to?: Date;\r\n  }>({});\r\n  const [filteredPreset, setFilteredPresets] =\r\n    useState<IPresetWithExtras[]>(allPreset);\r\n\r\n  // Filter by search term\r\n  const filterBySearchTerm = (presets: IPresetWithExtras[]) => {\r\n    if (!searchTerm) return presets;\r\n\r\n    const cleanSearch = searchTerm.toLowerCase().trim();\r\n\r\n    return presets.filter((preset) => {\r\n      const titleMatch = preset.title.toLowerCase().includes(cleanSearch);\r\n      const descMatch = preset.description?.toLowerCase().includes(cleanSearch);\r\n      return titleMatch || descMatch;\r\n    });\r\n  };\r\n  // Fetch and apply search filter on search term change\r\n  useEffect(() => {\r\n    const fetchAndFilter = async () => {\r\n      const freshData = await getData(); // Fetch fresh data\r\n      const filtered = filterBySearchTerm(freshData); // Apply search term filter\r\n      setFilteredPresets(filtered); // Update state with filtered data\r\n    };\r\n    fetchAndFilter();\r\n  }, [searchTerm]); // Trigger fetch when search term changes\r\n\r\n  // Apply filters (zones, date range, and search term)\r\n  const applyFilters = async () => {\r\n    const freshData = await getData(); // Fetch fresh data\r\n\r\n    // Update selected filters\r\n    setSelectedZones(tempSelectedZones);\r\n    setSelectedDateRange(tempDateRange);\r\n\r\n    // Apply filters for zones and date range\r\n    const filtered = freshData.filter((preset) => {\r\n      const matchesZones =\r\n        tempSelectedZones.length === 0 || // If no zones are selected, show all\r\n        preset.zones.some((zone) =>\r\n          tempSelectedZones.some(\r\n            (selectedZone) =>\r\n              selectedZone.name.toLowerCase() === zone.name.toLowerCase()\r\n          )\r\n        );\r\n\r\n      const matchesDateRange =\r\n        (!tempDateRange?.from ||\r\n          new Date(preset.updatedAt) >= tempDateRange.from) &&\r\n        (!tempDateRange?.to || new Date(preset.updatedAt) <= tempDateRange.to);\r\n\r\n      return matchesZones && matchesDateRange;\r\n    });\r\n\r\n    // Apply search term filter\r\n    const filteredWithSearch = filterBySearchTerm(filtered);\r\n    setFilteredPresets(filteredWithSearch); // Update the filtered state\r\n  };\r\n\r\n  const resetFilters = async () => {\r\n    const data = await fetchData(\"get\", `/presets`, true);\r\n    setTempSelectedZones([]);\r\n    setTempDateRange({});\r\n    setSelectedZones([]);\r\n    setSelectedDateRange({});\r\n  };\r\n\r\n  const [sortedPresets, setSortedPresets] = useState<IPresetWithExtras[]>([]);\r\n\r\n  useEffect(() => {\r\n    const sorted = [...filteredPreset].sort((a, b) => {\r\n      let comparison = 0;\r\n\r\n      if (sortOption === \"Name\") {\r\n        comparison = a.title.localeCompare(b.title);\r\n      } else if (sortOption === \"ModifiedDate\") {\r\n        comparison =\r\n          new Date(a.updatedAt).getTime() - new Date(b.updatedAt).getTime();\r\n      }\r\n\r\n      return sortOrder === \"asc\" ? comparison : -comparison;\r\n    });\r\n\r\n    setSortedPresets(sorted); // Update sorted checklists state\r\n  }, [filteredPreset, sortOption, sortOrder]); // Dependencies to trigger the effect\r\n\r\n  const handleEdit = (id: number) => {\r\n    // Find the preset by id from the sortedPresets array\r\n    const preset = sortedPresets.find((p) => p.id === id);\r\n\r\n    // Redirect to the error page if preset or zones are missing\r\n    if (!preset?.zones?.length || !preset.zones.every((zone) => zone.userId)) {\r\n      router.push(\r\n        `/${locale}/admin/settings/patrol-preset/error/unassinged-zone`\r\n      );\r\n    } else {\r\n      // If all zones have a userId, navigate to the patrol preset page\r\n      router.push(`/${locale}/admin/settings/patrol-preset/${id}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4 \">\r\n      <div className=\"flex flex-row justify-between pt-2\">\r\n        <div className=\"text-2xl font-bold\">{t(\"SettingsPatrolPreset\")}</div>\r\n        <Button\r\n          variant=\"primary\"\r\n          className=\"flex flex-row gap-2\"\r\n          onClick={handleCreatePreset}\r\n        >\r\n          <span className=\"material-symbols-outlined text-2xl\">add</span>\r\n          <div className=\"text-lg\">{t(\"CreatePreset\")}</div>\r\n        </Button>\r\n      </div>\r\n      <div className=\"flex items-center gap-2\">\r\n        <Textfield\r\n          iconName=\"search\"\r\n          showIcon={true}\r\n          placeholder={t(\"Search\")}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          value={searchTerm}\r\n        />\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium `}\r\n          >\r\n            <span className=\"material-symbols-outlined\">swap_vert</span>\r\n            <div className=\"text-lg\">{t(\"Sort\")}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align=\"end\" className=\"p-2 gap-2\">\r\n            {/* Sort By */}\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n              {t(\"SortBy\")}\r\n            </DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sortOption}\r\n              onValueChange={(value) =>\r\n                setSortOption(value as \"Name\" | \"ModifiedDate\")\r\n              }\r\n            >\r\n              <DropdownMenuRadioItem\r\n                value=\"Name\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Name\")}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem\r\n                value=\"ModifiedDate\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"DateModified\")}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n\r\n            {/* Sort Order */}\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n              {t(\"Order\")}\r\n            </DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sortOrder}\r\n              onValueChange={(value) => setSortOrder(value as \"desc\" | \"asc\")}\r\n            >\r\n              <DropdownMenuRadioItem\r\n                value=\"asc\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Ascending\")}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem\r\n                value=\"desc\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Descending\")}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium`}\r\n          >\r\n            <span className=\"material-symbols-outlined\">page_info</span>\r\n            <div className=\"text-lg\">{t(\"Filter\")}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent\r\n            className=\"flex flex-col justify-center gap-2 p-2 z-50\"\r\n            align=\"end\"\r\n          >\r\n            <div>\r\n              <div>\r\n                <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                  {t(\"Date\")}\r\n                </DropdownMenuLabel>\r\n                <DatePickerWithRange\r\n                  className=\"my-date-picker\"\r\n                  startDate={tempDateRange?.from || selectedDateRange?.from}\r\n                  endDate={tempDateRange?.to || selectedDateRange?.to}\r\n                  onSelect={(range) => {\r\n                    if (range?.from || range?.to) {\r\n                      setTempDateRange(range);\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                {t(\"Zone\")}\r\n              </DropdownMenuLabel>\r\n              <AlertDialog>\r\n                <AlertDialogTrigger\r\n                  asChild\r\n                  className=\"flex items-center gap-2 rounded cursor-pointer\"\r\n                >\r\n                  <Button\r\n                    variant={\"secondary\"}\r\n                    className=\"w-full h-[36px] rounded-md bg-secondary justify-start text-left gap-[13px] font-normal text-base pl-2 flex\"\r\n                  >\r\n                    <span className=\"material-symbols-outlined ml-1 shrink-0\">\r\n                      location_on\r\n                    </span>\r\n                    <p className=\"truncate w-[200px]\">\r\n                      {selectedZones.length > 0\r\n                        ? selectedZones.map((zone) => z(zone.name)).join(\", \")\r\n                        : t(\"SelectZones\")}\r\n                    </p>\r\n                  </Button>\r\n                </AlertDialogTrigger>\r\n\r\n                <AlertDialogContent className=\"w-full sm:w-[40%] md:w-[50%] lg:w-[100%] max-w-[1200px] rounded-md\">\r\n                  <AlertDialogHeader>\r\n                    <AlertDialogTitle className=\"text-2xl\">\r\n                      {t(\"FilterByZoneTitle\")}\r\n                    </AlertDialogTitle>\r\n                    <AlertDialogDescription className=\"text-base\">\r\n                      {t(\"FilterByZoneDescription\")}\r\n                    </AlertDialogDescription>\r\n                  </AlertDialogHeader>\r\n\r\n                  <AlertDialogContent className=\"w-full sm:w-[50%] md:w-[70%] lg:w-[100%] max-w-[1200px] rounded-md px-6 py-4\">\r\n                    <div className=\"flex flex-col gap-1\">\r\n                      <div className=\"text-muted-foreground flex items-center gap-1\">\r\n                        <span className=\"material-symbols-outlined\">\r\n                          location_on\r\n                        </span>\r\n                        <p>{t(\"Zone\")}</p>\r\n                      </div>\r\n                      <div className=\" flex justify-center bg-secondary rounded-md py-4\">\r\n                        <Map\r\n                          disable={false}\r\n                          initialSelectedZones={selectedZones.map(\r\n                            (zone) => zone.id\r\n                          )}\r\n                          onZoneSelect={(zones: IZone[]) =>\r\n                            setTempSelectedZones(zones)\r\n                          } // อัปเดต tempSelectedZones\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <AlertDialogFooter>\r\n                      <AlertDialogCancel>{t(\"Cancel\")}</AlertDialogCancel>\r\n                      <AlertDialogAction\r\n                        className=\"bg-primary\"\r\n                        onClick={() => {\r\n                          // กด Done แค่เซฟชั่วคราวใน tempSelectedZones\r\n                          setSelectedZones(tempSelectedZones);\r\n                        }}\r\n                      >\r\n                        {t(\"Done\")}\r\n                      </AlertDialogAction>\r\n                    </AlertDialogFooter>\r\n                  </AlertDialogContent>\r\n                </AlertDialogContent>\r\n              </AlertDialog>\r\n            </div>\r\n\r\n            <div className=\"flex w-full justify-end mt-4 gap-2\">\r\n              <Button size=\"sm\" variant=\"secondary\" onClick={resetFilters}>\r\n                {t(\"Reset\")}\r\n              </Button>\r\n              <Button variant=\"primary\" size=\"sm\" onClick={applyFilters}>\r\n                {t(\"Apply\")}\r\n              </Button>\r\n            </div>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </div>\r\n      <ScrollArea className=\"h-full overflow-hidden rounded-md flex-1 [&>[data-radix-scroll-area-viewport]]:max-h-[calc(100vh-290px)]\">\r\n        <div className=\"space-y-4\">\r\n          {(() => {\r\n            return sortedPresets.length > 0 ? (\r\n              sortedPresets.map((preset) => (\r\n                <div\r\n                  onClick={() => {\r\n                    handleEdit(preset.id);\r\n                  }}\r\n                  key={preset.id}\r\n                  className=\"bg-card rounded-lg custom-shadow p-4 cursor-pointer h-[219px]\"\r\n                >\r\n                  {/* Title and Details */}\r\n                  <div className=\"flex justify-between overflow-hidden text-ellipsis\">\r\n                    <div className=\"flex flex-col gap-4 min-w-0\">\r\n                      <div className=\"flex flex-col gap-1 justify-start items-start\">\r\n                        {/* Version with Tooltip */}\r\n                        <VersionTooltip object={preset}>\r\n                          <div className=\"flex justify-center\">\r\n                            <span className=\"material-symbols-outlined mr-1\">\r\n                              history\r\n                            </span>\r\n                            {t(\"Version\")} {preset.version}\r\n                          </div>\r\n                        </VersionTooltip>\r\n                        {/* Title */}\r\n                        <h2 className=\"text-xl font-semibold truncate\">\r\n                          {preset.title}\r\n                        </h2>\r\n                      </div>\r\n                      {/* Zones */}\r\n                      <div className=\"flex items-center gap-2 text-muted-foreground\">\r\n                        <span className=\"material-symbols-outlined\">\r\n                          location_on\r\n                        </span>\r\n                        <ZoneTooltip zones={preset.zones}>\r\n                          <div className=\"text-base text-muted-foreground overflow-hidden text-ellipsis whitespace-nowrap w-[600px] truncate min-w-0\">\r\n                            {preset.zones && preset.zones.length > 0\r\n                              ? preset.zones.map((zone, index) => (\r\n                                <span\r\n                                  key={index}\r\n                                  className={\r\n                                    zone.userId ? \"\" : \"  text-destructive\"\r\n                                  }\r\n                                >\r\n                                  {z(zone.name)}\r\n                                  {index < preset.zones.length - 1 && \", \"}\r\n                                </span>\r\n                              ))\r\n                              : z(\"NoZonesAvailable\")}\r\n                          </div>\r\n                        </ZoneTooltip>\r\n                      </div>\r\n                      {/* Description */}\r\n                      <div className=\"flex items-center gap-2 text-muted-foreground\">\r\n                        <span className=\"material-symbols-outlined\">\r\n                          data_info_alert\r\n                        </span>\r\n                        <TextTooltip object={preset.description}>\r\n\r\n                          <div className=\"text-sm text-muted-foreground truncate w-[700px]\">\r\n                            {preset.description}\r\n                          </div>\r\n                        </TextTooltip>\r\n\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Action Buttons */}\r\n                  </div>\r\n                  <div className=\"flex flex-row justify-end items-end \">\r\n                    <DropdownMenu>\r\n                      <DropdownMenuTrigger asChild\r\n                        className={\r\n                          buttonVariants({\r\n                          variant: \"ghost\",\r\n                          size: \"icon\",\r\n                        })}\r\n                      >\r\n                        <span className=\"material-symbols-outlined text-input\">\r\n                          more_vert\r\n                        </span>\r\n                      </DropdownMenuTrigger>\r\n                      <DropdownMenuContent\r\n                        align=\"end\"\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                        }}\r\n                        className=\"w-[80px] px-4 py-2\"\r\n                        side=\"bottom\"\r\n                      >\r\n                        <div\r\n                          onClick={() => {\r\n                            handleEdit(preset.id);\r\n                          }}\r\n                          key={preset.id}\r\n                          className=\"text-lg cursor-pointer \"\r\n                        >\r\n                          {t(\"Edit\")}\r\n                        </div>\r\n\r\n                        <div\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleRemovePreset(preset.id);\r\n                          }}\r\n                          className=\"text-destructive text-lg cursor-pointer hover:text-transparent-50\"\r\n                        >\r\n                          {t(\"Delete\")}\r\n                        </div>\r\n\r\n                        {/* แสดง AlertCustom เฉพาะเมื่อ dialogType === \"delete\" */}\r\n                        {isDialogOpen && dialogType === \"delete\" && (\r\n                          <AlertCustom\r\n                            title={a(\"PresetRemoveConfirmTitle\")}\r\n                            description={a(\"PresetRemoveConfirmDescription\")}\r\n                            primaryButtonText={t(\"Confirm\")}\r\n                            primaryIcon=\"check\"\r\n                            secondaryButtonText={t(\"Cancel\")}\r\n                            backResult={(result) => handleDialogResult(result)}\r\n                          />\r\n                        )}\r\n                      </DropdownMenuContent>\r\n                    </DropdownMenu>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <div className=\"col-span-full min-h-[261px]\">\r\n                <NotFound\r\n                  icon=\"quick_reference_all\"\r\n                  title=\"NoFoundPresetsAvailable\"\r\n                  description=\"NotFoundPresetsDescription\"\r\n                />\r\n              </div>\r\n            );\r\n          })()}\r\n        </div>\r\n      </ScrollArea>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\comment\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\comment\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DropdownMenuCheckboxItem' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogAction' is defined but never used. Allowed unused vars must match /^_/u.","line":60,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":63,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogHeader' is defined but never used. Allowed unused vars must match /^_/u.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertDialogTitle' is defined but never used. Allowed unused vars must match /^_/u.","line":66,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'buttonVariants' is defined but never used. Allowed unused vars must match /^_/u.","line":69,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *  หน้านี้แสดงรายการคำแนะนำที่ผู้ตรวจตราแจ้งเข้ามา\r\n * Input:\r\n * - ไม่มี\r\n * Output:\r\n * - แสดงรายละเอียดของคำแนะนำที่ผู้ตรวจตราแจ้งเข้ามา\r\n * - สามารถกรองข้อมูลได้ตามช่วงวันที่ และสถานะของคำแนะนำ\r\n * - สามารถอัพเดทสถานะของคำแนะนำได้\r\n **/\r\n\r\n\"use client\";\r\nimport { IFilterComment, IComment, itemType } from \"@/app/type\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport { DatePickerWithRange } from \"@/components/date-picker\";\r\nimport Loading from \"@/components/loading\";\r\nimport Textfield from \"@/components/textfield\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuRadioGroup,\r\n  DropdownMenuRadioItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectGroup,\r\n  SelectItem,\r\n  SelectLabel,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport {\r\n  fetchData,\r\n  getInitials,\r\n  getItemTypeVariant,\r\n  sortData,\r\n} from \"@/lib/utils\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { DateRange } from \"react-day-picker\";\r\nimport { formatTime } from \"@/lib/utils\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { buttonVariants } from \"@/components/ui/button\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport NotFound from \"@/components/not-found\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { UserTooltip } from \"@/components/user-tooltip\";\r\nimport { TextTooltip } from \"@/components/text-tooltip\";\r\n\r\nexport default function Page() {\r\n  const t = useTranslations(\"General\");\r\n  const s = useTranslations(\"Status\");\r\n  const z = useTranslations(\"Zone\");\r\n  const a = useTranslations(\"Alert\");\r\n\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [isSortOpen, setIsSortOpen] = useState(false);\r\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n  const [allComments, setAllComments] = useState<IComment[]>([]);\r\n  const locale = useLocale();\r\n\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [pendingAction, setPendingAction] = useState<(() => void) | null>(null);\r\n\r\n  const handleDialogResult = (result: boolean) => {\r\n    setIsDialogOpen(false);\r\n    if (result && pendingAction) {\r\n      pendingAction(); // Execute the pending action\r\n      setPendingAction(null); // Clear the pending action\r\n    }\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const getAllComments = async () => {\r\n    try {\r\n      const queryString = buildQueryString(filter, searchTerm);\r\n      const data = await fetchData(\"get\", `/comments?${queryString}`, true);\r\n      setAllComments(data);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch patrol data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleConfirmComment = (id) => {\r\n    setPendingAction(() => () => confirmComment(id));\r\n    handleOpenDialog();\r\n  };\r\n\r\n  const confirmComment = async (id) => {\r\n    try {\r\n      await fetchData(\"put\", `/comment/${id}`, true);\r\n      setAllComments((prev) =>\r\n        prev.map((comment) =>\r\n          comment.id === id ? { ...comment, status: true } : comment\r\n        )\r\n      );\r\n      toast({\r\n        variant: \"success\",\r\n        title: a(\"CommentConfirmSuccessTitle\"),\r\n        description: a(\"CommentConfirmSuccessDescription\"),\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error deleting patrol:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSortChange = (type: string, value: string) => {\r\n    setSort((prevSort) => ({\r\n      ...prevSort,\r\n      [type]: value,\r\n    }));\r\n  };\r\n\r\n  const commentStatus = [\"completed\", \"pending\"];\r\n\r\n  const initialFilter = {\r\n    commentStatus: \"All\",\r\n    dateRange: { start: undefined, end: undefined },\r\n  };\r\n\r\n  const getStoredFilter = () => {\r\n    if (typeof window !== \"undefined\") {\r\n      const storedFilter = localStorage.getItem(\"commentFilter\");\r\n      if (storedFilter) {\r\n        return JSON.parse(storedFilter);\r\n      }\r\n    }\r\n    return initialFilter;\r\n  };\r\n\r\n  const [filter, setFilter] = useState<IFilterComment | null>(\r\n    getStoredFilter()\r\n  );\r\n\r\n  const [sort, setSort] = useState<{ by: string; order: string }>({\r\n    by: \"CommentDate\",\r\n    order: \"Descending\",\r\n  });\r\n\r\n  const applyFilter = () => {\r\n    getAllComments();\r\n  };\r\n\r\n  const resetFilter = () => {\r\n    setFilter(initialFilter);\r\n  };\r\n\r\n  const handleDateSelect = (dateRange: DateRange) => {\r\n    const startDate = dateRange.from ?? null;\r\n    const endDate = dateRange.to\r\n      ? new Date(new Date(dateRange.to).setHours(23, 59, 59, 999))\r\n      : null;\r\n    setFilter({\r\n      commentStatus: filter?.commentStatus || null,\r\n      dateRange: {\r\n        start: startDate || undefined,\r\n        end: endDate || undefined,\r\n      },\r\n    });\r\n  };\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const handleSearch = (event: any) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const buildQueryString = (\r\n    filter: IFilterComment | null,\r\n    searchTerm: string\r\n  ) => {\r\n    const params: Record<string, string | undefined> = {};\r\n\r\n    // เพิ่ม search term ถ้ามี\r\n    if (searchTerm) params.search = searchTerm;\r\n\r\n    // เพิ่ม status filter ถ้าไม่ใช่ \"All\"\r\n    if (filter?.commentStatus && filter.commentStatus !== \"All\") {\r\n      params.status = filter.commentStatus === \"completed\" ? \"true\" : \"false\";\r\n    }\r\n\r\n    // เพิ่ม startDate\r\n    if (filter?.dateRange?.start) {\r\n      params.startDate = filter?.dateRange.start.toISOString();\r\n    }\r\n\r\n    // เพิ่ม endDate\r\n    if (filter?.dateRange?.end) {\r\n      params.endDate = filter?.dateRange?.end.toISOString();\r\n    }\r\n\r\n    return new URLSearchParams(params).toString();\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllComments();\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getAllComments();\r\n  }, [searchTerm]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"commentFilter\", JSON.stringify(filter));\r\n  }, [filter]);\r\n\r\n  useEffect(() => {\r\n    const sortedData = sortData(allComments, sort);\r\n    if (JSON.stringify(sortedData) !== JSON.stringify(allComments)) {\r\n      setAllComments(sortedData);\r\n    }\r\n  }, [sort, allComments]);\r\n\r\n  if (loading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      <div className=\"flex items-center gap-2\">\r\n        <Textfield\r\n          iconName=\"search\"\r\n          showIcon={true}\r\n          placeholder={t(\"Search\")}\r\n          onChange={handleSearch}\r\n        />\r\n\r\n        <DropdownMenu onOpenChange={(open) => setIsSortOpen(open)}>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium \r\n          ${isSortOpen ? \"border border-destructive\" : \"border-none\"}`}\r\n          >\r\n            <span className=\"material-symbols-outlined\">swap_vert</span>\r\n            <div className=\"text-lg\">{t(\"Sort\")}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align=\"end\" className=\"p-2 gap-2\">\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n              {t(\"SortBy\")}\r\n            </DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sort.by}\r\n              onValueChange={(value) => handleSortChange(\"by\", value)}\r\n            >\r\n              <DropdownMenuRadioItem\r\n                value=\"CommentDate\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Date\")}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem\r\n                value=\"Status\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Status\")}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n              {t(\"Order\")}\r\n            </DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sort.order}\r\n              onValueChange={(value) => handleSortChange(\"order\", value)}\r\n            >\r\n              <DropdownMenuRadioItem\r\n                value=\"Ascending\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Ascending\")}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem\r\n                value=\"Descending\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Descending\")}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n\r\n        <DropdownMenu onOpenChange={(open) => setIsFilterOpen(open)}>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium \r\n          ${isFilterOpen ? \"border border-destructive\" : \"border-none\"}`}\r\n          >\r\n            <span className=\"material-symbols-outlined\">page_info</span>\r\n            <div className=\"text-lg\">{t(\"Filter\")}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent\r\n            className=\"flex flex-col justify-center gap-2 p-2 z-50\"\r\n            align=\"end\"\r\n          >\r\n            <div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                {t(\"Date\")}\r\n              </DropdownMenuLabel>\r\n              <DatePickerWithRange\r\n                startDate={filter?.dateRange.start}\r\n                endDate={filter?.dateRange.end}\r\n                onSelect={handleDateSelect}\r\n                className=\"my-date-picker\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                {t(\"Status\")}\r\n              </DropdownMenuLabel>\r\n              <Select\r\n                value={filter?.commentStatus || \"All\"}\r\n                onValueChange={(value) =>\r\n                  setFilter({\r\n                    commentStatus: value,\r\n                    dateRange: {\r\n                      start: filter?.dateRange.start,\r\n                      end: filter?.dateRange.end,\r\n                    },\r\n                  })\r\n                }\r\n              >\r\n                <SelectTrigger className=\"\">\r\n                  <SelectValue\r\n                    placeholder={\r\n                      filter?.commentStatus === \"All\"\r\n                        ? t(\"All\")\r\n                        : filter?.commentStatus\r\n                    }\r\n                  />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectGroup>\r\n                    <SelectLabel>{t(\"Status\")}</SelectLabel>\r\n                    <SelectItem value=\"All\">{t(\"All\")}</SelectItem>\r\n                    {commentStatus.map((status) => (\r\n                      <SelectItem value={status} key={status}>\r\n                        {s(status)}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectGroup>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div className=\"flex w-full justify-end mt-4 gap-2\">\r\n              <Button size=\"sm\" variant=\"secondary\" onClick={resetFilter}>\r\n                {t(\"Reset\")}\r\n              </Button>\r\n              <Button size=\"sm\" variant=\"primary\" onClick={applyFilter}>\r\n                {t(\"Apply\")}\r\n              </Button>\r\n            </div>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </div>\r\n      <Table>\r\n        <TableHeader>\r\n          <TableRow className=\"grid grid-cols-12 w-full\">\r\n            <TableHead className=\"sm:col-span-3 lg:col-span-5\">\r\n              {t(\"Message\")}\r\n            </TableHead>\r\n            <TableHead className=\"sm:col-span-2 lg:col-span-2\">\r\n              {t(\"Date\")}\r\n            </TableHead>\r\n            <TableHead className=\"sm:col-span-3 lg:col-span-2\">\r\n              {t(\"Status\")}\r\n            </TableHead>\r\n            <TableHead className=\"sm:col-span-3 lg:col-span-2\">\r\n              {t(\"inspector\")}\r\n            </TableHead>\r\n            <TableHead className=\"sm:col-span-1 lg:col-span-1\"></TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          <ScrollArea className=\"rounded-md w-full [&>[data-radix-scroll-area-viewport]]:max-h-[calc(100vh-160px)]\">\r\n            {allComments?.length === 0 ? (\r\n              <tr className=\"flex w-full h-full\">\r\n                <td colSpan={5} className=\"w-full text-center py-6\">\r\n                  <NotFound\r\n                    icon=\"chat\"\r\n                    title=\"NoCommentsFound\"\r\n                    description=\"NoCommentsDescription\"\r\n                  />\r\n                </td>\r\n              </tr>\r\n            ) : (\r\n              allComments.map((comment, index) => (\r\n                <TableRow key={index} className=\"grid grid-cols-12\">\r\n                  <TableCell className=\"font-medium sm:col-span-3 lg:col-span-5\">\r\n                    <TextTooltip object={comment.message}>\r\n                      <div className=\" truncate max-w-[400px]\">{comment.message}</div>\r\n                    </TextTooltip>\r\n                  </TableCell>\r\n                  <TableCell className=\"font-medium sm:col-span-2 lg:col-span-2\">\r\n                    {formatTime(comment.timestamp, locale)}\r\n                  </TableCell>\r\n                  <TableCell className=\"font-medium sm:col-span-3 lg:col-span-2\">\r\n                    <BadgeCustom\r\n                      variant={comment.status === false ? \"blue\" : \"green\"}\r\n                      iconName={\r\n                        comment.status === false ? \"hourglass_top\" : \"check\"\r\n                      }\r\n                      showIcon={true}\r\n                    >\r\n                      {s(comment.status === false ? \"pending\" : \"completed\")}\r\n                    </BadgeCustom>\r\n                  </TableCell>\r\n                  <TableCell className=\"font-medium sm:col-span-3 lg:col-span-2 flex flex-row gap-2 items-center\">\r\n                    {comment.user.profile.name ? (\r\n                      <UserTooltip user={comment.user}>\r\n                        <Avatar>\r\n                          <AvatarImage\r\n                            src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${comment.user.profile.image?.path}`}\r\n                          />\r\n                          <AvatarFallback id={comment.user.id.toString()}>\r\n                            {getInitials(comment.user.profile.name)}\r\n                          </AvatarFallback>\r\n                        </Avatar>\r\n                      </UserTooltip>\r\n                    ) : (\r\n                      <Skeleton className=\"h-12 w-12 rounded-full bg-input\" />\r\n                    )}\r\n                    <div>\r\n                      {comment.user.profile.name ? (\r\n                        comment.user.profile.name\r\n                      ) : (\r\n                        <div className=\"text-destructive\">\r\n                          {comment.user.username}\r\n                          <div className=\"text-[14px]\">\r\n                            No profile is provided\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <DropdownMenu>\r\n                      <DropdownMenuTrigger onClick={(e) => e.stopPropagation()}>\r\n                        <Button variant=\"ghost\" className=\"w-[45px] h-[45px]\">\r\n                          <span className=\"material-symbols-outlined items-center text-input\">\r\n                            more_horiz\r\n                          </span>\r\n                        </Button>\r\n                      </DropdownMenuTrigger>\r\n\r\n                      <DropdownMenuContent align=\"end\" className=\"p-0\">\r\n                        <DropdownMenuItem className=\"p-0\">\r\n                          <AlertDialog>\r\n                            <AlertDialogTrigger\r\n                              asChild\r\n                              className=\"pl-2 py-2\"\r\n                              onClick={(e) => e.stopPropagation()}\r\n                            >\r\n                              <div\r\n                                className=\"cursor-pointer w-full h-full flex\"\r\n                                onClick={(e) => {\r\n                                  e.stopPropagation();\r\n                                }}\r\n                              >\r\n                                {t(\"Detail\")}\r\n                              </div>\r\n                            </AlertDialogTrigger>\r\n                            <AlertDialogContent className=\"px-6 py-4 gap-4\">\r\n                              <div className=\"flex flex-col gap-2\">\r\n                                <p className=\"text-lg font-semibold text-muted-foreground\">\r\n                                  {formatTime(comment.timestamp, locale)}\r\n                                </p>\r\n                                <p className=\"text-2xl font-bold text-card-foreground\">\r\n                                  {\r\n                                    comment.patrolResult.itemZone.item.checklist\r\n                                      .title\r\n                                  }\r\n                                </p>\r\n                              </div>\r\n                              <div className=\"flex flex-col gap-2\">\r\n                                <p className=\"text-xl text-muted-foreground\">\r\n                                  {comment.patrolResult.itemZone.item.name}\r\n                                </p>\r\n                                <div className=\"flex items-center gap-1 text-base text-muted-foreground\">\r\n                                  <span className=\"material-symbols-outlined\">\r\n                                    location_on\r\n                                  </span>\r\n                                  <p>\r\n                                    {z(comment.patrolResult.itemZone.zone.name)}\r\n                                  </p>\r\n                                </div>\r\n                              </div>\r\n                              <BadgeCustom\r\n                                variant={\r\n                                  getItemTypeVariant(\r\n                                    comment.patrolResult.itemZone.item\r\n                                      .type as itemType\r\n                                  ).variant\r\n                                }\r\n                                shape=\"square\"\r\n                                showIcon={true}\r\n                                iconName={\r\n                                  getItemTypeVariant(\r\n                                    comment.patrolResult.itemZone.item\r\n                                      .type as itemType\r\n                                  ).iconName\r\n                                }\r\n                              >\r\n                                {s(comment.patrolResult.itemZone.item.type)}\r\n                              </BadgeCustom>\r\n\r\n                              <AlertDialogFooter>\r\n                                <AlertDialogCancel\r\n                                  onClick={(e) => e.stopPropagation()}\r\n                                >\r\n                                  {t(\"Close\")}\r\n                                </AlertDialogCancel>\r\n                              </AlertDialogFooter>\r\n                            </AlertDialogContent>\r\n                          </AlertDialog>\r\n                        </DropdownMenuItem>\r\n                        {isDialogOpen && (\r\n                          <AlertCustom\r\n                            title={a(\"ConfirmCommentTitle\")}\r\n                            description={a(\"ConfirmCommentDescription\")}\r\n                            primaryButtonText={t(\"Confirm\")}\r\n                            primaryIcon=\"check\"\r\n                            primaryVariant=\"primary\"\r\n                            secondaryButtonText={t(\"Cancel\")}\r\n                            backResult={handleDialogResult}\r\n                          ></AlertCustom>\r\n                        )}\r\n                        <DropdownMenuItem\r\n                          className=\"cursor-pointer w-full h-full flex\"\r\n                          disabled={comment.status === true}\r\n                          onClick={(e) => {\r\n                            e.preventDefault();\r\n                            handleConfirmComment(comment.id);\r\n                            e.stopPropagation();\r\n                          }}\r\n                        >\r\n                          <p className=\"text-primary\">{t(\"Resolve\")}</p>\r\n                        </DropdownMenuItem>\r\n                      </DropdownMenuContent>\r\n                    </DropdownMenu>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))\r\n            )}\r\n          </ScrollArea>\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\defect\\[id]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\defect\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\defect\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\login\\forgot-password\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isValidToken' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport React, { useEffect, useState } from 'react'\r\nimport loginCover3 from \"@/public/assets/img/login_cover_3.png\"\r\nimport Image from 'next/image'\r\nimport Textfield from '@/components/textfield'\r\nimport { toast } from '@/hooks/use-toast'\r\nimport { useLocale, useTranslations } from 'next-intl'\r\nimport { fetchData } from '@/lib/utils'\r\nimport ModeToggle from '@/components/mode-toggle'\r\nimport { useTheme } from 'next-themes'\r\nimport lightLogo from \"@/public/assets/img/system_logo_light.png\"\r\nimport darkLogo from \"@/public/assets/img/system_logo_dark.png\"\r\nimport { Button } from '@/components/ui/button'\r\nimport Loading from '@/components/loading'\r\nimport { useRouter, useSearchParams } from 'next/navigation'\r\nimport { AlertCustom } from '@/components/alert-custom'\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuItem,\r\n    DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\n\r\nexport default function page() {\r\n    const t = useTranslations('General')\r\n    const a = useTranslations(\"Alert\");\r\n    const [newPassword, setNewPassword] = useState<string | null>(null)\r\n    const [confirmPassword, setConfirmPassword] = useState<string | null>(null)\r\n    const [mounted, setMounted] = useState(false);\r\n    const searchParams = useSearchParams();\r\n    const [token, setToken] = useState<string | null>(null);\r\n    const router = useRouter()\r\n    const locale = useLocale();\r\n    const { resolvedTheme } = useTheme()\r\n\r\n    const [newPassError, setNewPassError] = useState<string | null>(null);\r\n    const [confirmPasswordError, setConfirmPasswordError] = useState<string | null>(null);\r\n    const [isValidToken, setIsValidToken] = useState<boolean | null>(null)\r\n\r\n    const [isAlertOpen, setIsAlertOpen] = useState(false)\r\n    const handleOpenAlert = () => setIsAlertOpen(true);\r\n    const handleCloseAlert = () => setIsAlertOpen(false)\r\n\r\n    const handleInputNewPassword = (\r\n        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n    ) => {\r\n        const { value } = e.target;\r\n        setNewPassword(value)\r\n    };\r\n\r\n    const handleInputConfirmPassword = (\r\n        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n    ) => {\r\n        const { value } = e.target;\r\n        setConfirmPassword(value)\r\n    };\r\n\r\n    const handleUpdateUserPassword = async () => {\r\n        let showErrorToast = false;\r\n        setNewPassError(null);\r\n        setConfirmPasswordError(null);\r\n\r\n        // ตรวจสอบว่ามีการกรอกรหัสผ่านใหม่หรือไม่\r\n        if (!newPassword) {\r\n            setNewPassError(a(\"ProfileNewPassRequire\"));\r\n            showErrorToast = true;\r\n        }\r\n\r\n        // ตรวจสอบว่ามีการกรอกยืนยันรหัสผ่านหรือไม่\r\n        if (!confirmPassword) {\r\n            setConfirmPasswordError(a(\"ProfileConfirmPassRequire\"));\r\n            showErrorToast = true;\r\n        }\r\n\r\n        // ตรวจสอบความยาวของรหัสผ่าน (ต้องมีอย่างน้อย 8 ตัวอักษร)\r\n        if (newPassword && newPassword.length < 8) {\r\n            setNewPassError(a(\"ProfileNewPassMinLength\"));\r\n            showErrorToast = true;\r\n        }\r\n\r\n        if (confirmPassword && confirmPassword.length < 8) {\r\n            setConfirmPasswordError(a(\"ProfileNewPassMinLength\"));\r\n            showErrorToast = true;\r\n        }\r\n\r\n        // ตรวจสอบว่ารหัสผ่านใหม่และยืนยันรหัสผ่านตรงกันหรือไม่\r\n        if (newPassword && confirmPassword && newPassword !== confirmPassword) {\r\n            setConfirmPasswordError(a(\"ProfileConfirmPassInvalid\"));\r\n            showErrorToast = true;\r\n        }\r\n\r\n        // ถ้ามีข้อผิดพลาดแสดง toast และหยุดการทำงาน\r\n        if (showErrorToast) {\r\n            toast({\r\n                variant: \"error\",\r\n                title: a(\"ProfileUpdateErrorTitle\"),\r\n                description: a(\"ProfileUpdateErrorDescription\"),\r\n            });\r\n            return;\r\n        }\r\n\r\n        // ถ้ารหัสผ่านใหม่และยืนยันตรงกัน\r\n        const userForm = new FormData();\r\n        userForm.append(\"newPassword\", newPassword);\r\n        userForm.append(\"token\", token)\r\n\r\n        try {\r\n            const response = await fetchData(\r\n                \"put\",\r\n                \"/reset-password\",\r\n                true,\r\n                userForm\r\n            );\r\n            if (response.status === 200) {\r\n                setNewPassError(null);\r\n                setConfirmPasswordError(null);\r\n\r\n                toast({\r\n                    variant: \"success\",\r\n                    title: a(\"PasswordResetCompletedTitle\"),\r\n                    description: a(\"PasswordResetCompletedDescription\"),\r\n                });\r\n                router.push(`/${locale}/login`);\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(\"Error updating password:\", error);\r\n            toast({\r\n                variant: \"error\",\r\n                title: a(\"ProfileUpdateErrorTitle\"),\r\n                description: a(\"ProfileUpdateErrorDescription\"),\r\n            });\r\n        }\r\n    };\r\n\r\n    const changeLanguage = (locale: string) => {\r\n        if (mounted) {\r\n            const urlParams = new URLSearchParams(window.location.search);\r\n            const token = urlParams.get('token');\r\n\r\n            let newPath = `/${locale}/login/forgot-password`;\r\n            if (token) {\r\n                newPath += `?token=${token}`;\r\n            }\r\n\r\n            router.replace(newPath);\r\n            router.refresh();\r\n        }\r\n    };\r\n\r\n    const verifyToken = async (token: string) => {\r\n        try {\r\n            const response = await fetchData(\"get\", `/verify-token?token=${token}`, true);\r\n\r\n            if (response.status === \"200\" || response.status === 200) {\r\n                setIsValidToken(true);\r\n            } else {\r\n                setIsValidToken(false);\r\n                toast({\r\n                    variant: \"error\",\r\n                    title: (a(\"InvalidTokenTitle\")),\r\n                    description: (a(\"InvalidTokenDescription\"))\r\n                });\r\n                router.push(`/${locale}/login`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error verifying token:', error);\r\n            setIsValidToken(false);\r\n            router.push(`/${locale}/login`);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const tokenFromURL = searchParams.get('token');\r\n        if (tokenFromURL) {\r\n            setToken(tokenFromURL);\r\n            verifyToken(tokenFromURL);\r\n        } else {\r\n            router.push(`/${locale}/login`);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        changeLanguage(locale)\r\n        setMounted(true)\r\n    }, [])\r\n\r\n    if (!mounted) {\r\n        return <Loading />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-screen justify-center items-center w-full\">\r\n            {/* header */}\r\n            <div className=\" flex flex-col w-full justify-center items-center p-4\">\r\n                <div className=\"flex flex-row w-full\">\r\n                    <div onClick={() => (router.push(`/${locale}/login`))}>\r\n                        <Image\r\n                            className=\"flex items-center\"\r\n                            src={resolvedTheme === 'dark' ? darkLogo : lightLogo}\r\n                            alt=\"Logo\"\r\n                            width={250}\r\n                            height={250}\r\n                            priority\r\n                        />\r\n                    </div>\r\n                    <div className=\"flex w-full justify-end gap-4\">\r\n                        <ModeToggle />\r\n\r\n                        <DropdownMenu>\r\n                            <DropdownMenuTrigger>\r\n                                <Button variant='ghost' className=\"w-[45px] h-[45px] text-input\">\r\n                                    <span className=\"material-symbols-outlined\">language</span>\r\n                                </Button>\r\n                            </DropdownMenuTrigger>\r\n                            <DropdownMenuContent align=\"end\" className='p-0'>\r\n                                <DropdownMenuItem onClick={() => changeLanguage('en')}>\r\n                                    {t('English')}\r\n                                </DropdownMenuItem>\r\n                                <DropdownMenuItem onClick={() => changeLanguage('th')}>\r\n                                    {t('Thai')}\r\n                                </DropdownMenuItem>\r\n                            </DropdownMenuContent>\r\n                        </DropdownMenu>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* second block */}\r\n            <div className=\"flex flex-col justify-center items-center gap-4 flex-grow w-full h-full\">\r\n                <Image\r\n                    src={loginCover3}\r\n                    alt=\"First Image\"\r\n                    width={100}\r\n                    height={100}\r\n                    className=\"rounded-md object-cover w-[250px] h-[250px]\"\r\n                    unoptimized\r\n                />\r\n                <div className=\"text-2xl font-bold\">\r\n                    <p>{t(\"ResetPassword\")}</p>\r\n                </div>\r\n                <div className=\"flex flex-col gap-4 lg:w-[30%] sm:w-[45%]\">\r\n                    <div className=\"flex flex-col gap-1 w-full\">\r\n                        <p>{t(\"NewPassword\")}</p>\r\n                        <Textfield\r\n                            name=\"newPassword\"\r\n                            className=\"text-xl font-normal bg-secondary\"\r\n                            type=\"password\"\r\n                            showIcon={true}\r\n                            iconName=\"key\"\r\n                            placeholder=\"\"\r\n                            onChange={handleInputNewPassword}\r\n                        />\r\n                        {newPassError && (\r\n                            <p className=\"text-sm font-light text-destructive italic mt-1\">\r\n                                {newPassError}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                    <div className=\"flex flex-col gap-1 w-full\">\r\n                        <p>{t(\"ConfirmPassword\")}</p>\r\n                        <Textfield\r\n                            name=\"confirmNewPassword\"\r\n                            className=\"text-xl font-normal bg-secondary\"\r\n                            type=\"password\"\r\n                            showIcon={true}\r\n                            iconName=\"key\"\r\n                            placeholder=\"\"\r\n                            onChange={handleInputConfirmPassword}\r\n                        />\r\n                        {confirmPasswordError && (\r\n                            <p className=\"text-sm font-light text-destructive italic mt-1\">\r\n                                {confirmPasswordError}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                    <Button className='w-full' variant=\"default\" size=\"lg\" onClick={() => handleOpenAlert()}>{t(\"Reset\")}</Button>\r\n                </div>\r\n            </div>\r\n\r\n            {isAlertOpen && (\r\n                <AlertCustom\r\n                    title={a(\"ResetPasswordConfirmTitle\")}\r\n                    description={a(\"ResetPasswordConfirmDescription\")}\r\n                    primaryButtonText={t(\"Confirm\")}\r\n                    primaryIcon=\"check\"\r\n                    secondaryButtonText={t(\"Cancel\")}\r\n                    backResult={(backResult) => {\r\n                        if (backResult) {\r\n                            handleUpdateUserPassword()\r\n                        }\r\n                        handleCloseAlert()\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\login\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^_/u.","line":55,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *  หน้า Login ใช้สำหรับเข้าสู่ระบบ โดยจะมีช่องกรอก username, password และ checkbox สำหรับการจำรหัสผ่าน\r\n * Input: \r\n * - ไม่มี\r\n * Output:\r\n * - หน้า Login ที่มีช่องกรอก username, password และ checkbox สำหรับการจำรหัสผ่าน\r\n * - แสดง Alert หากเกิดข้อผิดพลาดในการเข้าสู่ระบบ\r\n * - แสดง Alert หากเข้าสู่ระบบสำเร็จ\r\n **/\r\n\r\n'use client'\r\nimport { useTransition, useEffect, useState } from 'react';\r\nimport lightLogo from \"@/public/assets/img/system_logo_light.png\"\r\nimport darkLogo from \"@/public/assets/img/system_logo_dark.png\"\r\nimport loginCover1 from \"@/public/assets/img/login_cover_1.png\"\r\nimport loginCover2 from \"@/public/assets/img/login_cover_2.png\"\r\nimport loginCover3 from \"@/public/assets/img/login_cover_3.png\"\r\nimport Image from 'next/image'\r\nimport LanguageSelect from '@/components/language-select';\r\nimport ModeToggle from '@/components/mode-toggle';\r\nimport Textfield from '@/components/textfield';\r\nimport { Button, buttonVariants } from '@/components/ui/button';\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { z } from \"zod\"\r\nimport { zodResolver } from \"@hookform/resolvers/zod\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport {\r\n    AlertDialog,\r\n    AlertDialogAction,\r\n    AlertDialogCancel,\r\n    AlertDialogContent,\r\n    AlertDialogDescription,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogTitle,\r\n} from \"@/components/ui/alert-dialog\";\r\n\r\nimport {\r\n    Form,\r\n    FormControl,\r\n    FormField,\r\n    FormItem,\r\n    FormMessage,\r\n} from \"@/components/ui/form\"\r\n\r\nimport { fetchData, login } from '@/lib/utils';\r\nimport { Carousel, CarouselContent, CarouselItem } from '@/components/ui/carousel';\r\nimport EmblaAutoplay from 'embla-carousel-autoplay'\r\nimport { useTheme } from 'next-themes';\r\nimport { LoginSchema } from '@/app/type';\r\nimport { toast } from '@/hooks/use-toast';\r\nimport { useRouter } from 'next/navigation';\r\nimport { Input } from '@/components/ui/input';\r\nimport { AlertCustom } from '@/components/alert-custom';\r\n\r\nexport default function LoginPage() {\r\n    const { resolvedTheme } = useTheme()\r\n    const [mounted, setMounted] = useState(false)\r\n    const t = useTranslations('General')\r\n    const a = useTranslations(\"Alert\");\r\n    const [isPending, startTransition] = useTransition()\r\n    const autoplayOptions = EmblaAutoplay({ delay: 3000, stopOnInteraction: false });\r\n    const router = useRouter();\r\n    const locale = useLocale()\r\n    const [email, setEmail] = useState<string>(null)\r\n    const [isAlertOpen, setIsAlertOpen] = useState(false)\r\n    const [isConfirmAlertOpen, setIsConfirmAlertOpen] = useState(false)\r\n    const [emailError, setEmailError] = useState<string | null>(null);\r\n\r\n    const form = useForm<z.infer<typeof LoginSchema>>({\r\n        resolver: zodResolver(LoginSchema),\r\n        defaultValues: {\r\n            username: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n    })\r\n\r\n    const handleInputEmail = (\r\n        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n    ) => {\r\n        const { value } = e.target;\r\n        setEmail(value)\r\n    };\r\n\r\n    const handleOpenAlert = () => setIsAlertOpen(true);\r\n    const handleCloseAlert = () => {\r\n        setIsAlertOpen(false)\r\n        setEmailError(null)\r\n        setEmail(null)\r\n    };\r\n    const handleOpenConfirmAlert = () => setIsConfirmAlertOpen(true)\r\n    const handleCloseConfirmAlert = () => setIsConfirmAlertOpen(false)\r\n\r\n    useEffect(() => {\r\n        setMounted(true)\r\n    }, [])\r\n\r\n    function onSubmit(values: z.infer<typeof LoginSchema>) {\r\n        startTransition(async () => {\r\n            const result = await login(values)\r\n            if (result.accessToken && result.refreshToken) {\r\n                toast({\r\n                    variant: \"success\",\r\n                    title: a(\"LoginSuccessTitle\"),\r\n                    description: a(\"LoginSuccessDescription\"),\r\n                });\r\n                router.push(`/${locale}`);\r\n            } else if (result.error === \"Too many login attempts, please try again later\") {\r\n                toast({\r\n                    variant: \"error\",\r\n                    title: a(\"LoginTooManyTitle\"),\r\n                    description: a(\"LoginTooManyDescription\"),\r\n                });\r\n            } else {\r\n\r\n                // แสดง Toast แจ้ง Error\r\n                toast({\r\n                    variant: \"error\",\r\n                    title: a(\"LoginErrorTitle\"),\r\n                    description: a(\"LoginErrorDescription\"),\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    const sendForgotPasswordEmail = async (email: string) => {\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n        if (!emailRegex.test(email)) {\r\n            setEmailError(a(\"InvalidEmailInlineValidate\"))\r\n            toast({\r\n                variant: \"error\",\r\n                title: (a(\"InvalidEmailTitle\")),\r\n                description: (a(\"InvalidEmailDescription\")),\r\n            });\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetchData(\"post\", `/send-email-reset-password`, true, { email });\r\n            toast({\r\n                variant: \"success\",\r\n                title: (a(\"ResetLinkCompletedTitle\")),\r\n                description: (a(\"ResetLinkCompletedDescription\")),\r\n            });\r\n            setEmailError(null)\r\n            setEmail(null)\r\n            handleCloseAlert()\r\n            return response\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    if (!mounted) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <section className=\"bg-card flex lg:grid lg:grid-cols-2 h-screen p-2\">\r\n            {/* แสดงรูปภาพเฉพาะจอที่มีขนาด sm ขึ้นไป */}\r\n            <div className=\"bg-background hidden lg:inline w-full p-4 rounded-md\">\r\n                <Image\r\n                    className=\"flex items-center \"\r\n                    src={resolvedTheme === 'dark' ? darkLogo : lightLogo}\r\n                    alt=\"Logo\"\r\n                    width={250}\r\n                    height={250}\r\n                    priority\r\n                />\r\n                <div className=\"flex justify-center items-center h-full\">\r\n                    <Carousel plugins={[autoplayOptions]} opts={{ loop: true }}>\r\n                        <CarouselContent>\r\n                            <CarouselItem>\r\n                                <Image\r\n                                    className=\"flex items-center\"\r\n                                    src={loginCover1}\r\n                                    alt=\"Cover\"\r\n                                    width={1000}\r\n                                    height={1000}\r\n                                    priority\r\n                                />\r\n                            </CarouselItem>\r\n                            <CarouselItem>\r\n                                <Image\r\n                                    className=\"flex items-center\"\r\n                                    src={loginCover2}\r\n                                    alt=\"Cover\"\r\n                                    width={1000}\r\n                                    height={1000}\r\n                                    priority\r\n                                />\r\n                            </CarouselItem>\r\n                            <CarouselItem>\r\n                                <Image\r\n                                    className=\"flex items-center\"\r\n                                    src={loginCover3}\r\n                                    alt=\"Cover\"\r\n                                    width={1000}\r\n                                    height={1000}\r\n                                    priority\r\n                                />\r\n                            </CarouselItem>\r\n                        </CarouselContent>\r\n                    </Carousel>\r\n                </div>\r\n            </div>\r\n\r\n            {/* ช่องกรอก username, password ตรงกลางหน้าจอ */}\r\n            <div className=\"flex flex-col w-full justify-center items-center p-4\">\r\n                <div className='flex w-full'>\r\n                    <div className='lg:hidden'>\r\n                        <Image\r\n                            className=\"absolute\"\r\n                            src={resolvedTheme === 'dark' ? darkLogo : lightLogo}\r\n                            alt=\"Logo\"\r\n                            width={250}\r\n                            height={250}\r\n                            priority\r\n                        />\r\n                    </div>\r\n                    <div className='flex w-full justify-end gap-4'>\r\n                        <ModeToggle />\r\n                        <LanguageSelect />\r\n                    </div>\r\n                </div>\r\n                <div className='gap-2 flex flex-col justify-center items-center w-full lg:w-[450px] h-full'>\r\n                    <div className='flex flex-col gap-4 w-[440px]'>\r\n                        <div className='flex flex-col gap-1 items-start'>\r\n                            <h1 className='text-[40px] font-semibold'>{t('Login')}</h1>\r\n                            <p className='text-base'>{t('EnterCredentials')}</p>\r\n                        </div>\r\n                        <Form {...form}>\r\n                            <form onSubmit={form.handleSubmit(onSubmit)} className='w-full'>\r\n                                <FormField\r\n                                    control={form.control}\r\n                                    name=\"username\"\r\n                                    render={({ field }) => (\r\n                                        <FormItem className='mt-2'>\r\n                                            <div className='flex flex-col gap-1 items-start'>\r\n                                                <label className='text-sm font-semibold text-muted-foreground'>{t('Username')}</label>\r\n                                                <FormControl>\r\n                                                    <Textfield className='bg-secondary' showIcon={true} iconName='person' placeholder='johnDoe' {...field} />\r\n                                                </FormControl>\r\n                                                <FormMessage />\r\n                                            </div>\r\n                                        </FormItem>\r\n                                    )}\r\n                                />\r\n                                <FormField\r\n                                    control={form.control}\r\n                                    name=\"password\"\r\n                                    render={({ field }) => (\r\n                                        <FormItem className='mt-6'>\r\n                                            <div className='flex flex-col gap-1 items-start'>\r\n                                                <label className='text-sm font-semibold text-muted-foreground'>{t('Password')}</label>\r\n                                                <FormControl>\r\n                                                    <Textfield className='bg-secondary' type='password' showIcon={true} iconName='lock' placeholder='verySecure' {...field} />\r\n                                                </FormControl>\r\n                                                <FormMessage />\r\n                                            </div>\r\n                                        </FormItem>\r\n                                    )}\r\n                                />\r\n                                <div className='flex flex-col gap-6 mt-6 items-center'>\r\n                                    <div className=\"flex justify-between items-center w-full\">\r\n                                        <FormField\r\n                                            control={form.control}\r\n                                            name=\"rememberMe\"\r\n                                            render={({ field }) => (\r\n                                                <FormItem>\r\n                                                    <div className=\"w-full h-full flex gap-2 items-center\">\r\n                                                        <FormControl>\r\n                                                            <Checkbox id=\"terms1\" checked={field.value} onCheckedChange={field.onChange} />\r\n                                                        </FormControl>\r\n                                                        <label\r\n                                                            htmlFor=\"terms1\"\r\n                                                            className=\"text-sm font-medium text-muted-foreground leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 hover:cursor-pointer\"\r\n                                                        >\r\n                                                            {t('RememberMe')}\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </FormItem>\r\n                                            )}\r\n                                        />\r\n                                        <Button type=\"button\" className='text-sm font-medium' variant='link' onClick={() => handleOpenAlert()}>{t('ForgotPassword')}</Button>\r\n                                    </div>\r\n                                    <Button className='w-full' size=\"lg\" disabled={isPending}>\r\n                                        {t('Login')}\r\n                                        <span className=\"material-symbols-outlined\">\r\n                                            login\r\n                                        </span>\r\n                                    </Button>\r\n                                </div>\r\n                            </form>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <AlertDialog open={isAlertOpen}>\r\n                <AlertDialogContent className=\"sm:w-[90%] xl:w-[60%] h-fit px-6 py-4\">\r\n                    <AlertDialogHeader>\r\n                        <div className=\"flex flex-col justify-center items-center gap-4\">\r\n                            <AlertDialogTitle className=\"flex flex-col justify-center items-center text-2xl font-bold text-card-foreground\">\r\n                                <Image\r\n                                    src={loginCover3} // ใช้ path จาก state\r\n                                    alt=\"First Image\"\r\n                                    width={100}\r\n                                    height={100}\r\n                                    className=\"rounded-md object-fit cursor-pointer w-[250px] h-[250px]\"\r\n                                    unoptimized\r\n                                />\r\n                                <p>{a(\"ForgotPasswordTitle\")}</p>\r\n                            </AlertDialogTitle>\r\n                            <AlertDialogDescription className=\"text-base text-input\">\r\n                                <p>{a(\"ForgotPasswordDescription\")}</p>\r\n                            </AlertDialogDescription>\r\n                        </div>\r\n                    </AlertDialogHeader>\r\n\r\n                    <div className=\"flex flex-col\">\r\n                        <Textfield\r\n                            name=\"confirmNewPassword\"\r\n                            className=\"text-base bg-secondary\"\r\n                            type=\"email\"\r\n                            showIcon={true}\r\n                            iconName=\"mail\"\r\n                            placeholder=\"supervisor@gmail.com\"\r\n                            onChange={handleInputEmail}\r\n                        />\r\n\r\n                        {emailError && (\r\n                            <p className=\"text-sm font-light text-destructive italic mt-1\">\r\n                                {emailError}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n\r\n                    <AlertDialogFooter>\r\n                        <div className=\"flex items-end justify-end gap-2\">\r\n                            <AlertDialogCancel onClick={() => {\r\n                                handleCloseAlert()\r\n                            }}>\r\n                                {t('Cancel')}\r\n                            </AlertDialogCancel>\r\n                            <AlertDialogAction\r\n                                className={buttonVariants({ variant: 'primary', size: 'lg' })}\r\n                                onClick={() => handleOpenConfirmAlert()}\r\n                            >\r\n                                <span className=\"material-symbols-outlined text-card w-[22px] h-[22px] items-center\">\r\n                                    send\r\n                                </span>\r\n                                {t('Send')}\r\n                            </AlertDialogAction>\r\n                        </div>\r\n                    </AlertDialogFooter>\r\n                </AlertDialogContent>\r\n            </AlertDialog>\r\n\r\n            {isConfirmAlertOpen && (\r\n                <AlertCustom\r\n                    title={a(\"ForgotPasswordConfirmTitle\")}\r\n                    description={a(\"ForgotPasswordConfirmDescription\")}\r\n                    primaryButtonText={t(\"Confirm\")}\r\n                    primaryIcon=\"check\"\r\n                    secondaryButtonText={t(\"Cancel\")}\r\n                    backResult={(backResult) => {\r\n                        if (backResult) {\r\n                            sendForgotPasswordEmail(email)\r\n                        }\r\n                        handleCloseConfirmAlert()\r\n                    }}\r\n                />\r\n            )}\r\n\r\n        </section>\r\n    );\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol-defect\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol-defect\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol\\[id]\\detail\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isHovered' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":63,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFunction' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":317,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":317,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *  หน้าที่แสดงรายการตรวจ Patrol ทั้งหมดของ Patrol ที่เลือก\r\n *\r\n * Input:\r\n * - ไม่มี\r\n * Output:\r\n * - หน้าที่แสดงรายการตรวจ Patrol ทั้งหมดของ Patrol ที่เลือก\r\n * - แสดง Progress Bar และ ปุ่ม \"Finish\" หรือ \"Start\" ขึ้นอยู่กับสถานะของ Patrol\r\n * - แสดงระยะเวลาที่ใช้ในการตรวจสอบของ Patrol\r\n * - แสดง Alert สำหรับการยืนยันการเริ่มหรือสิ้นสุด Patrol\r\n **/\r\n\r\n\"use client\";\r\nimport { IDefect, IPatrolChecklist, patrolStatus } from \"@/app/type\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport PatrolChecklist from \"@/components/patrol-checklist\";\r\nimport PatrolTimer from \"@/components/patrol-timer\";\r\nimport TabMenu from \"@/components/tab-menu\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { usePatrol } from \"@/context/patrol-context\";\r\nimport { exportData, getInitials, getPatrolStatusVariant } from \"@/lib/utils\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport { useParams, useRouter } from \"next/navigation\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport {\r\n  HoverCard,\r\n  HoverCardContent,\r\n  HoverCardTrigger,\r\n} from \"@/components/ui/hover-card\";\r\nimport { CardFooter } from \"@/components/ui/card\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogTrigger,\r\n  AlertDialogContent,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogDescription,\r\n  AlertDialogCancel,\r\n  AlertDialogAction,\r\n  AlertDialogFooter,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { UserTooltip } from \"@/components/user-tooltip\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\n\r\nexport default function Page() {\r\n  const {\r\n    patrol,\r\n    patrolResults,\r\n    user,\r\n    lock,\r\n    isAlertOpen,\r\n    canFinish,\r\n    countDefects,\r\n    countFails,\r\n    countItems,\r\n    patrolUser,\r\n    isHovered,\r\n    formatDate,\r\n    formatId,\r\n    formatTimeDate,\r\n    formatZone,\r\n    handleMouseEnter,\r\n    handleMouseLeave,\r\n    itemCounts,\r\n    toggleLock,\r\n    calculateProgress,\r\n    handleResult,\r\n    fetchRealtimeData,\r\n    handleStartPatrol,\r\n    handleFinishPatrol,\r\n    handleOpenDialog,\r\n    handleCloseDialog,\r\n  } = usePatrol();\r\n  const locale = useLocale();\r\n  const params = useParams();\r\n  const id = params.id;\r\n  const router = useRouter();\r\n  const a = useTranslations(\"Alert\");\r\n  const t = useTranslations(\"General\");\r\n  const s = useTranslations(\"Status\");\r\n  const [open, setOpen] = useState(false);\r\n  const openType = useRef<\"hover\" | \"click\" | null>(null);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const triggerContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  itemCounts(patrol, patrolResults);\r\n  const inspectors = patrolUser;\r\n  const handleClick = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    // เคลียร์ timeout ของ hover ทันทีเมื่อมีการคลิก\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = null;\r\n    }\r\n    openType.current = \"click\";\r\n    setOpen(true); // เปิด Popover โดยตรง\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    openType.current = null;\r\n  };\r\n\r\n  const TooltipContent = () => {\r\n    return (\r\n      <div >\r\n        <div className=\"flex items-center justify-center gap-1\">\r\n          <span className=\"material-symbols-outlined\">person_search</span>\r\n          <p className=\"text-lg font-semibold\">{t(\"InspectorList\")}</p>\r\n        </div>\r\n        {inspectors.map((inspector, idx) => (\r\n          <div\r\n            key={idx}\r\n            className=\"flex items-center w-full py-2 gap-1 border-b-2 border-secondary\"\r\n          >\r\n            <UserTooltip user={inspector}>\r\n              <Avatar className=\"custom-shadow ms-[-10px] me-2.5\">\r\n                <AvatarImage\r\n                  src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector?.profile?.image?.path}`}\r\n                />\r\n                <AvatarFallback id={inspector.id.toString()}>\r\n                  {getInitials(inspector.profile.name)}\r\n                </AvatarFallback>\r\n              </Avatar>\r\n            </UserTooltip>\r\n            <p className=\"text-lg truncate\">{inspector.profile.name}</p>\r\n          </div>\r\n        ))}\r\n        <div className=\"flex items-center justify-between w-full text-muted-foreground\">\r\n          <p className=\"text-lg font-semibold\">{t(\"Total\")}</p>\r\n          <p className=\"text-lg font-semibold\">{inspectors.length}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4 overflow-hidden\">\r\n      {/* TabList และ Title */}\r\n      <div className=\"flex flex-col gap-4 bg-background\">\r\n        <div className=\"flex sm:flex-col lg:flex-row lg:items-center justify-between sm:items-start\">\r\n          <div className=\"flex items-center p-0 justify-center text-center gap-2\">\r\n            <AlertDialog>\r\n              <AlertDialogTrigger asChild>\r\n                <Button variant=\"ghost\" className=\"flex hover:bg-secondary p-2\">\r\n                  <span className=\"material-symbols-outlined text-card-foreground w-[22px] h-[22px]\">\r\n                    error\r\n                  </span>\r\n                </Button>\r\n              </AlertDialogTrigger>\r\n              <AlertDialogContent className=\"w-[400px] h-fit px-6 py-4 \">\r\n                <AlertDialogHeader className=\"flex flex-col gap-2\">\r\n                  <div className=\"flex flex-col gap-1\">\r\n                    <p className=\"text-lg font-semibold text-muted-foreground\">\r\n                      {formatDate(patrol.date)}\r\n                    </p>\r\n                    <AlertDialogTitle>\r\n                      <p className=\"text-2xl font-semibold\">\r\n                        {patrol.preset.title}\r\n                      </p>\r\n                    </AlertDialogTitle>\r\n                  </div>\r\n\r\n                  <AlertDialogDescription className=\"flex flex-col gap-2\">\r\n                    <div className=\"flex flex-row gap-1\">\r\n                      <span className=\"material-symbols-outlined\">\r\n                        description\r\n                      </span>\r\n                      <p className=\"text-muted-foreground text-xl font-semibold\">\r\n                        {formatId(patrol.id)}\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className=\"flex flex-row gap-1\">\r\n                      {patrol.status === \"completed\" && (\r\n                        <span className=\"material-symbols-outlined\">\r\n                          event_available\r\n                        </span>\r\n                      )}\r\n\r\n                      {patrol.status === \"completed\" ? (\r\n                        <div className=\"text-muted-foreground font-extrabold text-lg\">\r\n                          <p className=\"text-xl font-semibold text-muted-foreground\">\r\n                            {formatDate(patrol.endTime) +\r\n                              \" \" +\r\n                              formatTimeDate(patrol.startTime) +\r\n                              \" - \" +\r\n                              formatTimeDate(patrol.endTime)}\r\n                          </p>\r\n                        </div>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </div>\r\n\r\n                    <div className=\"flex flex-row gap-1 items-start\">\r\n                      <span className=\"material-symbols-outlined text-2xl text-muted-foreground p-0\">\r\n                        location_on\r\n                      </span>\r\n                      <p className=\"flex items-center text-base text-muted-foreground\">\r\n                        {formatZone(patrol) || \"No zones available\"}\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className=\"flex flex-row gap-1 \">\r\n                      <span className=\"material-symbols-outlined text-2xl text-muted-foreground \">\r\n                        data_info_alert\r\n                      </span>\r\n                      <p className=\"gap-1 text-base text-muted-foreground \">\r\n                        {patrol.preset.description}\r\n                      </p>\r\n                    </div>\r\n                  </AlertDialogDescription>\r\n                </AlertDialogHeader>\r\n                <AlertDialogFooter>\r\n                  <AlertDialogCancel>Close</AlertDialogCancel>\r\n                </AlertDialogFooter>\r\n              </AlertDialogContent>\r\n            </AlertDialog>\r\n\r\n            <div className=\"flex flex-col h-full justify-start w-full\">\r\n              <p className=\"text-2xl font-bold mb-1 text-start\">{patrol.preset.title}</p>\r\n              <div className=\"w-[300px]\">\r\n                <Progress value={calculateProgress()} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex flex-row sm:w-full sm:justify-between lg:w-fit items-center gap-2\">\r\n            {patrol && (\r\n              <PatrolTimer\r\n                launchDate={patrol.startTime}\r\n                patrolStatus={patrol.status}\r\n                patrolDuration={patrol.duration}\r\n              />\r\n            )}\r\n\r\n            <BadgeCustom\r\n              iconName={getPatrolStatusVariant(patrol.status).iconName}\r\n              showIcon={true}\r\n              showTime={false}\r\n              variant={getPatrolStatusVariant(patrol.status).variant}\r\n            >\r\n              {s(patrol.status)}\r\n            </BadgeCustom>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex w-full justify-between items-center\">\r\n          <TabMenu id={id.toString()} />\r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              variant={\"secondary\"}\r\n              onClick={() => router.push(`/${locale}`)}\r\n            >\r\n              {t(\"Back\")}\r\n            </Button>\r\n            {(() => {\r\n              let iconName: string;\r\n              let text: string;\r\n              let variant:\r\n                | \"link\"\r\n                | \"default\"\r\n                | \"secondary\"\r\n                | \"destructive\"\r\n                | \"success\"\r\n                | \"fail\"\r\n                | \"outline\"\r\n                | \"ghost\"\r\n                | \"primary\"\r\n                | null\r\n                | undefined;\r\n              let disabled: boolean;\r\n              let handleFunction: any;\r\n              switch (patrol.status as patrolStatus) {\r\n                case \"completed\":\r\n                  variant = \"outline\";\r\n                  iconName = \"ios_share\";\r\n                  text = \"Export\";\r\n                  disabled = false;\r\n                  handleFunction = () => { };\r\n                  break;\r\n                case \"on_going\":\r\n                  variant = \"primary\";\r\n                  iconName = \"Check\";\r\n                  text = \"Finish\";\r\n                  disabled = false;\r\n                  handleFunction = () => {\r\n                    handleFinishPatrol();\r\n                  };\r\n                  break;\r\n                case \"scheduled\":\r\n                  variant = \"primary\";\r\n                  iconName = \"cached\";\r\n                  text = \"Start\";\r\n                  disabled = false;\r\n                  handleFunction = () => {\r\n                    handleStartPatrol();\r\n                  };\r\n                  break;\r\n                case \"pending\":\r\n                  variant = \"primary\";\r\n                  iconName = \"cached\";\r\n                  text = \"Start\";\r\n                  disabled = true;\r\n                  handleFunction = () => { };\r\n                  break;\r\n                default:\r\n                  variant = \"primary\";\r\n                  iconName = \"cached\";\r\n                  text = \"Start\";\r\n                  disabled = true;\r\n                  handleFunction = () => { };\r\n                  break;\r\n              }\r\n              return (\r\n                <div>\r\n                  {patrol.status === \"completed\" && isAlertOpen ? (\r\n                    <AlertDialog open={isAlertOpen}>\r\n                      <AlertDialogTrigger asChild>\r\n                        <Button\r\n                          variant={variant}\r\n                          onClick={handleOpenDialog}\r\n                          disabled={disabled}\r\n                          className=\"flex flex-row items-center gap-2\"\r\n                        >\r\n                          <span className=\"material-symbols-outlined \">\r\n                            {iconName}\r\n                          </span>\r\n                          {t(text)}\r\n                        </Button>\r\n                      </AlertDialogTrigger>\r\n\r\n                      <AlertDialogContent className=\"w-[400px] h-fit px-6 py-4 \">\r\n                        <AlertDialogHeader className=\"flex flex-col gap-2\">\r\n                          <div className=\"flex flex-col gap-1\">\r\n                            <p className=\"text-lg font-semibold text-muted-foreground\">\r\n                              {formatDate(patrol.date)}\r\n                            </p>\r\n                            <AlertDialogTitle>\r\n                              <p className=\"text-2xl font-semibold\">\r\n                                {patrol.preset.title}\r\n                              </p>\r\n                            </AlertDialogTitle>\r\n                          </div>\r\n\r\n                          <AlertDialogDescription className=\"flex flex-col gap-2\">\r\n                            <div className=\"flex flex-row gap-1\">\r\n                              <span className=\"material-symbols-outlined\">\r\n                                description\r\n                              </span>\r\n                              <p className=\"text-muted-foreground text-xl font-semibold\">\r\n                                {formatId(patrol.id)}\r\n                              </p>\r\n                            </div>\r\n\r\n                            <Popover\r\n                              open={open}\r\n                              onOpenChange={(isOpen) => {\r\n                                if (!isOpen) handleClose()\r\n                              }}\r\n                            >\r\n                              <HoverCard\r\n                                open={open && openType.current === 'hover'}\r\n                                onOpenChange={(isHoverOpen) => {\r\n                                  if (!isHoverOpen && openType.current === 'hover') handleClose();\r\n                                }}\r\n                              >\r\n                                <div\r\n                                  ref={triggerContainerRef}\r\n                                  onMouseEnter={handleMouseEnter}\r\n                                  onMouseLeave={handleMouseLeave}\r\n                                >\r\n                                  <HoverCardTrigger asChild>\r\n                                    <PopoverTrigger asChild>\r\n                                      <div className=\"cursor-pointer\" onClick={handleClick}>\r\n                                        <div className=\"flex text-muted-foreground items-center\">\r\n                                          <span className=\"material-symbols-outlined me-1\">\r\n                                            person_search\r\n                                          </span>\r\n                                          {inspectors.length > 0 && (\r\n                                            <div className=\"flex items-center me-1 truncate max-w-[190px]\">\r\n                                              <p className=\"text-xl me-2.5 truncate\">\r\n                                                {inspectors[0].profile.name}\r\n                                              </p>\r\n                                            </div>\r\n                                          )}\r\n                                          {inspectors.map((inspector, idx) => {\r\n                                            return (\r\n                                              <Avatar key={idx} className=\"custom-shadow ms-[-10px]\">\r\n                                                <AvatarImage\r\n                                                  src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector?.profile?.image?.path}`}\r\n                                                />\r\n                                                <AvatarFallback id={inspector.id.toString()}>\r\n                                                  {getInitials(inspector.profile.name)}\r\n                                                </AvatarFallback>\r\n                                              </Avatar>\r\n                                            );\r\n                                          })}\r\n\r\n                                          {inspectors.length > 5 && (\r\n                                            <Avatar className=\"custom-shadow flex items-center justify-center ms-[-10px]\">\r\n                                              <AvatarImage src=\"\" />\r\n                                              <span className=\"absolute text-card-foreground text-base font-semibold\">\r\n                                                +{inspectors.length - 5}\r\n                                              </span>\r\n                                              <AvatarFallback id={\"0\"}></AvatarFallback>\r\n                                            </Avatar>\r\n                                          )}\r\n                                        </div>\r\n                                      </div>\r\n                                    </PopoverTrigger>\r\n                                  </HoverCardTrigger>\r\n\r\n                                  <HoverCardContent\r\n                                    className=\"w-[300px] px-6 py-4\"\r\n                                    zIndex={0}\r\n                                    side=\"bottom\"\r\n                                    align=\"start\"\r\n                                    onClick={(e) => e.stopPropagation()}\r\n                                  >\r\n                                    <TooltipContent />\r\n                                  </HoverCardContent>\r\n                                  <PopoverContent\r\n                                    className=\"w-[300px] z-[100] px-6 py-4\"\r\n                                    side=\"bottom\"\r\n                                    align=\"start\"\r\n                                    onInteractOutside={(e) => {\r\n                                      const target = e.target as HTMLElement;\r\n                                      const isUserTooltipContent = target?.closest?.('[data-radix-tooltip-content]');\r\n                                      const isUserTooltipTrigger = target?.closest?.('.user-tooltip');\r\n\r\n                                      if (isUserTooltipContent || isUserTooltipTrigger) {\r\n                                        e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                  >\r\n                                    <TooltipContent />\r\n                                  </PopoverContent>\r\n                                </div>\r\n                              </HoverCard>\r\n                            </Popover>\r\n\r\n                            <CardFooter className=\"p-0 gap-0\">\r\n                              <div className=\"flex gap-2 items-center w-full\">\r\n                                <div className=\"flex gap-1 text-primary items-center\">\r\n                                  <span className=\"material-symbols-outlined\">\r\n                                    checklist\r\n                                  </span>\r\n                                  <p className=\"text-xl font-semibold\">\r\n                                    {countItems}\r\n                                  </p>\r\n                                </div>\r\n                                <div className=\"flex gap-1 text-orange items-center\">\r\n                                  <span className=\"material-symbols-outlined\">\r\n                                    close\r\n                                  </span>\r\n                                  <p className=\"text-xl font-semibold\">\r\n                                    {countFails}\r\n                                  </p>\r\n                                </div>\r\n                                <div className=\"flex gap-1 text-destructive items-center\">\r\n                                  <span className=\"material-symbols-outlined\">\r\n                                    error\r\n                                  </span>\r\n                                  <p className=\"text-xl font-semibold\">\r\n                                    {countDefects}\r\n                                  </p>\r\n                                </div>\r\n                              </div>\r\n                            </CardFooter>\r\n                          </AlertDialogDescription>\r\n                        </AlertDialogHeader>\r\n                        <AlertDialogFooter>\r\n                          <AlertDialogCancel\r\n                            onClick={() => handleCloseDialog()}\r\n                          >\r\n                            Cancel\r\n                          </AlertDialogCancel>\r\n                          <AlertDialogAction\r\n                            className=\"bg-primary text-primary-foreground shadow hover:bg-primary/90 h-10 rounded-md px-4 text-lg font-bold\"\r\n                            onClick={() => {\r\n                              exportData(patrol, patrolResults);\r\n                              handleCloseDialog();\r\n                              toast({\r\n                                variant: \"success\",\r\n                                title: a(\"ExportReportPatrolTitle\"),\r\n                                description: a(\"ExportReportPatrolDescription\"),\r\n                              });\r\n                            }}\r\n                          >\r\n                            <span className=\"material-symbols-outlined text-2xl me-2\">\r\n                              ios_share\r\n                            </span>\r\n                            Export\r\n                          </AlertDialogAction>\r\n                        </AlertDialogFooter>\r\n                      </AlertDialogContent>\r\n                    </AlertDialog>\r\n                  ) : patrol.status === \"on_going\" ? (\r\n                    canFinish ? (\r\n                      <Button\r\n                        variant={variant}\r\n                        onClick={handleOpenDialog}\r\n                        disabled={disabled}\r\n                      >\r\n                        <span className=\"material-symbols-outlined\">\r\n                          {iconName}\r\n                        </span>\r\n                        {t(text)}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        variant={lock ? \"secondary\" : variant}\r\n                        disabled={disabled}\r\n                        onClick={toggleLock}\r\n                      >\r\n                        <span className=\"material-symbols-outlined\">\r\n                          {lock ? \"lock_open\" : \"lock\"}\r\n                        </span>\r\n                        {lock ? t(\"Unlock\") : t(\"Lock\")}\r\n                      </Button>\r\n                    )\r\n                  ) : (\r\n                    <Button\r\n                      variant={variant}\r\n                      onClick={() => handleOpenDialog()}\r\n                      disabled={disabled}\r\n                      className=\"flex flex-row items-center gap-2\"\r\n                    >\r\n                      <span className=\"material-symbols-outlined\">\r\n                        {iconName}\r\n                      </span>\r\n                      {t(text)}\r\n                    </Button>\r\n                  )}\r\n                  {patrol.status === \"scheduled\" && isAlertOpen ? (\r\n                    <AlertCustom\r\n                      title={a(\"PatrolStartConfirmTitle\")}\r\n                      description={a(\"PatrolStartConfirmDescription\")}\r\n                      primaryButtonText={t(\"Confirm\")}\r\n                      primaryIcon=\"check\"\r\n                      secondaryButtonText={t(\"Cancel\")}\r\n                      backResult={(result) => {\r\n                        if (result) {\r\n                          handleStartPatrol();\r\n                        }\r\n                        handleCloseDialog();\r\n                      }}\r\n                    />\r\n                  ) : patrol.status === \"on_going\" && isAlertOpen ? (\r\n                    <AlertCustom\r\n                      title={a(\"PatrolFinishConfirmTitle\")}\r\n                      description={a(\"PatrolFinishConfirmDescription\")}\r\n                      primaryButtonText={t(\"Confirm\")}\r\n                      primaryIcon=\"check\"\r\n                      secondaryButtonText={t(\"Cancel\")}\r\n                      backResult={(result) => {\r\n                        if (result) {\r\n                          handleFinishPatrol();\r\n                        }\r\n                        handleCloseDialog();\r\n                      }}\r\n                    />\r\n                  ) : null}\r\n                </div>\r\n              );\r\n            })()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ScrollArea className=\"h-full w-full rounded-md flex-1 [&>[data-radix-scroll-area-viewport]]:max-h-[calc(100vh-224px)]\">\r\n        {\" \"}\r\n        {patrol.patrolChecklists.map((pc: IPatrolChecklist) => (\r\n          <div className=\"rounded-md mb-4\">\r\n            {user?.profile.name === pc.inspector.profile.name ? (\r\n              <PatrolChecklist\r\n                handleResult={handleResult}\r\n                patrolStatus={patrol.status}\r\n                patrolChecklist={pc}\r\n                disabled={patrol.status === \"on_going\" && !lock ? false : true}\r\n                patrolResults={patrolResults}\r\n                response={(defect: IDefect) => {\r\n                  fetchRealtimeData(defect, \"create\");\r\n                }}\r\n              />\r\n            ) : (\r\n              <div></div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </ScrollArea>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol\\[id]\\layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'usePatrol' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { PatrolProvider, usePatrol } from '@/context/patrol-context';\r\n\r\nexport default function PatrolLayout({\r\n    children,\r\n}: Readonly<{\r\n    children: React.ReactNode;\r\n}>) {\r\n\r\n    return (\r\n        <PatrolProvider>\r\n            <div className=\"flex flex-col gap-4 px-6 py-4\">\r\n                {children}\r\n            </div>\r\n        </PatrolProvider>\r\n    );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol\\[id]\\report\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Loading' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mounted' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":59,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isHovered' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":67,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleFunction' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":318,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":318,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *  หน้าที่แสดงรายการ Defect ทั้งหมดของ Patrol ที่เลือก\r\n *\r\n * Input:\r\n * - ไม่มี\r\n * Output:\r\n * - หน้าที่แสดงรายการ Defect ทั้งหมดของ Patrol ที่เลือก\r\n * - แสดงชื่อ Patrol และ Progress ของ Patrol\r\n * - แสดงปุ่ม Start หรือ Finish ของ Patrol ตามสถานะของ Patrol\r\n * - สามารถตรวจสอบ Defect และแก้ไข Defect ได้\r\n **/\r\n\r\n\"use client\";\r\nimport { IDefect, patrolStatus } from \"@/app/type\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport Loading from \"@/components/loading\";\r\nimport PatrolTimer from \"@/components/patrol-timer\";\r\nimport ReportDefect from \"@/components/report-defect\";\r\nimport TabMenu from \"@/components/tab-menu\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { usePatrol } from \"@/context/patrol-context\";\r\nimport { exportData, getInitials, getPatrolStatusVariant } from \"@/lib/utils\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport { useParams, useRouter } from \"next/navigation\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { CardFooter } from \"@/components/ui/card\";\r\n\r\nimport React, { useRef, useState } from \"react\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogTrigger,\r\n  AlertDialogContent,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogDescription,\r\n  AlertDialogCancel,\r\n  AlertDialogAction,\r\n  AlertDialogFooter,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport {\r\n  HoverCard,\r\n  HoverCardContent,\r\n  HoverCardTrigger,\r\n} from \"@/components/ui/hover-card\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport NotFound from \"@/components/not-found\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport { UserTooltip } from \"@/components/user-tooltip\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\r\n\r\nexport default function Page() {\r\n  const {\r\n    patrol,\r\n    patrolResults,\r\n    lock,\r\n    mounted,\r\n    defects,\r\n    canFinish,\r\n    countDefects,\r\n    countFails,\r\n    countItems,\r\n    patrolUser,\r\n    isAlertOpen,\r\n    isHovered,\r\n    formatDate,\r\n    formatId,\r\n    formatTimeDate,\r\n    formatZone,\r\n    handleMouseEnter,\r\n    handleMouseLeave,\r\n    handleOpenDialog,\r\n    handleCloseDialog,\r\n    toggleLock,\r\n    calculateProgress,\r\n    handleStartPatrol,\r\n    fetchRealtimeData,\r\n    handleFinishPatrol,\r\n  } = usePatrol();\r\n  const locale = useLocale();\r\n  const params = useParams();\r\n  const id = params.id;\r\n  const router = useRouter();\r\n  const a = useTranslations(\"Alert\");\r\n  const t = useTranslations(\"General\");\r\n  const s = useTranslations(\"Status\");\r\n  const [open, setOpen] = useState(false);\r\n  const openType = useRef<\"hover\" | \"click\" | null>(null);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const triggerContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const inspectors = patrolUser;\r\n  const handleClick = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    // เคลียร์ timeout ของ hover ทันทีเมื่อมีการคลิก\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = null;\r\n    }\r\n    openType.current = \"click\";\r\n    setOpen(true); // เปิด Popover โดยตรง\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    openType.current = null;\r\n  };\r\n\r\n  const TooltipContent = () => {\r\n    return (\r\n      <div >\r\n        <div className=\"flex items-center justify-center gap-1\">\r\n          <span className=\"material-symbols-outlined\">person_search</span>\r\n          <p className=\"text-lg font-semibold\">{t(\"InspectorList\")}</p>\r\n        </div>\r\n        {inspectors.map((inspector, idx) => (\r\n          <div\r\n            key={idx}\r\n            className=\"flex items-center w-full py-2 gap-1 border-b-2 border-secondary\"\r\n          >\r\n            <UserTooltip user={inspector}>\r\n              <Avatar className=\"custom-shadow ms-[-10px] me-2.5\">\r\n                <AvatarImage\r\n                  src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector?.profile?.image?.path}`}\r\n                />\r\n                <AvatarFallback id={inspector.id.toString()}>\r\n                  {getInitials(inspector.profile.name)}\r\n                </AvatarFallback>\r\n              </Avatar>\r\n            </UserTooltip>\r\n            <p className=\"text-lg truncate\">{inspector.profile.name}</p>\r\n          </div>\r\n        ))}\r\n        <div className=\"flex items-center justify-between w-full text-muted-foreground\">\r\n          <p className=\"text-lg font-semibold\">{t(\"Total\")}</p>\r\n          <p className=\"text-lg font-semibold\">{inspectors.length}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4\">\r\n      {/* TabList และ Title */}\r\n      <div className=\"flex flex-col gap-4 bg-background\">\r\n        <div className=\"flex sm:flex-col lg:flex-row lg:items-center justify-between sm:items-start\">\r\n          <div className=\"flex items-center p-0 justify-center text-center gap-2\">\r\n            <AlertDialog>\r\n              <AlertDialogTrigger asChild>\r\n                <Button variant=\"ghost\" className=\"flex hover:bg-secondary p-2\">\r\n                  <span className=\"material-symbols-outlined text-card-foreground w-[22px] h-[22px]\">\r\n                    error\r\n                  </span>\r\n                </Button>\r\n              </AlertDialogTrigger>\r\n              <AlertDialogContent className=\"w-[400px] h-fit px-6 py-4 \">\r\n                <AlertDialogHeader className=\"flex flex-col gap-2\">\r\n                  <div className=\"flex flex-col gap-1\">\r\n                    <p className=\"text-lg font-semibold text-muted-foreground\">\r\n                      {formatDate(patrol.date)}\r\n                    </p>\r\n                    <AlertDialogTitle>\r\n                      <p className=\"text-2xl font-semibold\">\r\n                        {patrol.preset.title}\r\n                      </p>\r\n                    </AlertDialogTitle>\r\n                  </div>\r\n\r\n                  <AlertDialogDescription className=\"flex flex-col gap-2\">\r\n                    <div className=\"flex flex-row gap-1\">\r\n                      <span className=\"material-symbols-outlined\">\r\n                        description\r\n                      </span>\r\n                      <p className=\"text-muted-foreground text-xl font-semibold\">\r\n                        {formatId(patrol.id)}\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className=\"flex flex-row gap-1\">\r\n                      {patrol.status === \"completed\" && (\r\n                        <span className=\"material-symbols-outlined\">\r\n                          event_available\r\n                        </span>\r\n                      )}\r\n\r\n                      {patrol.status === \"completed\" ? (\r\n                        <div className=\"text-muted-foreground font-extrabold text-lg\">\r\n                          <p className=\"text-xl font-semibold text-muted-foreground\">\r\n                            {formatDate(patrol.endTime) +\r\n                              \" \" +\r\n                              formatTimeDate(patrol.startTime) +\r\n                              \" - \" +\r\n                              formatTimeDate(patrol.endTime)}\r\n                          </p>\r\n                        </div>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </div>\r\n\r\n                    <div className=\"flex flex-row gap-1 items-start\">\r\n                      <span className=\"material-symbols-outlined text-2xl text-muted-foreground p-0\">\r\n                        location_on\r\n                      </span>\r\n                      <p className=\"flex items-center text-base text-muted-foreground\">\r\n                        {formatZone(patrol) || \"No zones available\"}\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className=\"flex flex-row gap-1 \">\r\n                      <span className=\"material-symbols-outlined text-2xl text-muted-foreground \">\r\n                        data_info_alert\r\n                      </span>\r\n                      <p className=\"gap-1 text-base text-muted-foreground \">\r\n                        {patrol.preset.description}\r\n                      </p>\r\n                    </div>\r\n                  </AlertDialogDescription>\r\n                </AlertDialogHeader>\r\n                <AlertDialogFooter>\r\n                  <AlertDialogCancel>Close</AlertDialogCancel>\r\n                </AlertDialogFooter>\r\n              </AlertDialogContent>\r\n            </AlertDialog>\r\n\r\n            <div className=\"flex flex-col h-full justify-start w-full\">\r\n              <p className=\"text-2xl font-bold mb-1 text-start\">{patrol.preset.title}</p>\r\n              <div className=\"w-[300px]\">\r\n                <Progress value={calculateProgress()} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex flex-row sm:w-full sm:justify-between lg:w-fit items-center gap-2\">\r\n            {patrol && (\r\n              <PatrolTimer\r\n                launchDate={patrol.startTime}\r\n                patrolStatus={patrol.status}\r\n                patrolDuration={patrol.duration}\r\n              />\r\n            )}\r\n\r\n            <BadgeCustom\r\n              iconName={getPatrolStatusVariant(patrol.status).iconName}\r\n              showIcon={true}\r\n              showTime={false}\r\n              variant={getPatrolStatusVariant(patrol.status).variant}\r\n            >\r\n              {s(patrol.status)}\r\n            </BadgeCustom>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex w-full justify-between items-center\">\r\n          <TabMenu id={id.toString()} />\r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              variant={\"secondary\"}\r\n              onClick={() => router.push(`/${locale}`)}\r\n            >\r\n              {t(\"Back\")}\r\n            </Button>\r\n            {(() => {\r\n              let iconName: string;\r\n              let text: string;\r\n              let variant:\r\n                | \"link\"\r\n                | \"default\"\r\n                | \"secondary\"\r\n                | \"destructive\"\r\n                | \"success\"\r\n                | \"fail\"\r\n                | \"outline\"\r\n                | \"ghost\"\r\n                | \"primary\"\r\n                | null\r\n                | undefined;\r\n              let disabled: boolean;\r\n              let handleFunction: any;\r\n              switch (patrol.status as patrolStatus) {\r\n                case \"completed\":\r\n                  variant = \"outline\";\r\n                  iconName = \"ios_share\";\r\n                  text = \"Export\";\r\n                  disabled = false;\r\n                  handleFunction = () => { };\r\n                  break;\r\n                case \"on_going\":\r\n                  variant = \"primary\";\r\n                  iconName = \"Check\";\r\n                  text = \"Finish\";\r\n                  disabled = false;\r\n                  handleFunction = () => {\r\n                    handleFinishPatrol();\r\n                  };\r\n                  break;\r\n                case \"scheduled\":\r\n                  variant = \"primary\";\r\n                  iconName = \"cached\";\r\n                  text = \"Start\";\r\n                  disabled = false;\r\n                  handleFunction = () => {\r\n                    handleStartPatrol();\r\n                  };\r\n                  break;\r\n                case \"pending\":\r\n                  variant = \"primary\";\r\n                  iconName = \"cached\";\r\n                  text = \"Start\";\r\n                  disabled = true;\r\n                  handleFunction = () => { };\r\n                  break;\r\n                default:\r\n                  variant = \"primary\";\r\n                  iconName = \"cached\";\r\n                  text = \"Start\";\r\n                  disabled = true;\r\n                  handleFunction = () => { };\r\n                  break;\r\n              }\r\n              return (\r\n                <div>\r\n                  {patrol.status === \"completed\" && isAlertOpen ? (\r\n                    <AlertDialog open={isAlertOpen}>\r\n                      <AlertDialogTrigger asChild>\r\n                        <Button\r\n                          variant={variant}\r\n                          onClick={handleOpenDialog}\r\n                          disabled={disabled}\r\n                          className=\"flex flex-row items-center gap-2\"\r\n                        >\r\n                          <span className=\"material-symbols-outlined \">\r\n                            {iconName}\r\n                          </span>\r\n                          {t(text)}\r\n                        </Button>\r\n                      </AlertDialogTrigger>\r\n\r\n                      <AlertDialogContent className=\"w-[400px] h-fit px-6 py-4 \">\r\n                        <AlertDialogHeader className=\"flex flex-col gap-2\">\r\n                          <div className=\"flex flex-col gap-1\">\r\n                            <p className=\"text-lg font-semibold text-muted-foreground\">\r\n                              {formatDate(patrol.date)}\r\n                            </p>\r\n                            <AlertDialogTitle>\r\n                              <p className=\"text-2xl font-semibold\">\r\n                                {patrol.preset.title}\r\n                              </p>\r\n                            </AlertDialogTitle>\r\n                          </div>\r\n\r\n                          <AlertDialogDescription className=\"flex flex-col gap-2\">\r\n                            <div className=\"flex flex-row gap-1\">\r\n                              <span className=\"material-symbols-outlined\">\r\n                                description\r\n                              </span>\r\n                              <p className=\"text-muted-foreground text-xl font-semibold\">\r\n                                {formatId(patrol.id)}\r\n                              </p>\r\n                            </div>\r\n\r\n                            <Popover\r\n                              open={open}\r\n                              onOpenChange={(isOpen) => {\r\n                                if (!isOpen) handleClose()\r\n                              }}\r\n                            >\r\n                              <HoverCard\r\n                                open={open && openType.current === 'hover'}\r\n                                onOpenChange={(isHoverOpen) => {\r\n                                  if (!isHoverOpen && openType.current === 'hover') handleClose();\r\n                                }}\r\n                              >\r\n                                <div\r\n                                  ref={triggerContainerRef}\r\n                                  onMouseEnter={handleMouseEnter}\r\n                                  onMouseLeave={handleMouseLeave}\r\n                                >\r\n                                  <HoverCardTrigger asChild>\r\n                                    <PopoverTrigger asChild>\r\n                                      <div className=\"cursor-pointer\" onClick={handleClick}>\r\n                                        <div className=\"flex text-muted-foreground items-center\">\r\n                                          <span className=\"material-symbols-outlined me-1\">\r\n                                            person_search\r\n                                          </span>\r\n                                          {inspectors.length > 0 && (\r\n                                            <div className=\"flex items-center me-1 truncate max-w-[190px]\">\r\n                                              <p className=\"text-xl me-2.5 truncate\">\r\n                                                {inspectors[0].profile.name}\r\n                                              </p>\r\n                                            </div>\r\n                                          )}\r\n                                          {inspectors.map((inspector, idx) => {\r\n                                            return (\r\n                                              <Avatar key={idx} className=\"custom-shadow ms-[-10px]\">\r\n                                                <AvatarImage\r\n                                                  src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector?.profile?.image?.path}`}\r\n                                                />\r\n                                                <AvatarFallback id={inspector.id.toString()}>\r\n                                                  {getInitials(inspector.profile.name)}\r\n                                                </AvatarFallback>\r\n                                              </Avatar>\r\n                                            );\r\n                                          })}\r\n\r\n                                          {inspectors.length > 5 && (\r\n                                            <Avatar className=\"custom-shadow flex items-center justify-center ms-[-10px]\">\r\n                                              <AvatarImage src=\"\" />\r\n                                              <span className=\"absolute text-card-foreground text-base font-semibold\">\r\n                                                +{inspectors.length - 5}\r\n                                              </span>\r\n                                              <AvatarFallback id={\"0\"}></AvatarFallback>\r\n                                            </Avatar>\r\n                                          )}\r\n                                        </div>\r\n                                      </div>\r\n                                    </PopoverTrigger>\r\n                                  </HoverCardTrigger>\r\n\r\n                                  <HoverCardContent\r\n                                    className=\"w-[300px] px-6 py-4\"\r\n                                    zIndex={0}\r\n                                    side=\"bottom\"\r\n                                    align=\"start\"\r\n                                    onClick={(e) => e.stopPropagation()}\r\n                                  >\r\n                                    <TooltipContent />\r\n                                  </HoverCardContent>\r\n                                  <PopoverContent\r\n                                    className=\"w-[300px] z-[100] px-6 py-4\"\r\n                                    side=\"bottom\"\r\n                                    align=\"start\"\r\n                                    onInteractOutside={(e) => {\r\n                                      const target = e.target as HTMLElement;\r\n                                      const isUserTooltipContent = target?.closest?.('[data-radix-tooltip-content]');\r\n                                      const isUserTooltipTrigger = target?.closest?.('.user-tooltip');\r\n\r\n                                      if (isUserTooltipContent || isUserTooltipTrigger) {\r\n                                        e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                  >\r\n                                    <TooltipContent />\r\n                                  </PopoverContent>\r\n                                </div>\r\n                              </HoverCard>\r\n                            </Popover>\r\n\r\n                            <CardFooter className=\"p-0 gap-0\">\r\n                              <div className=\"flex gap-2 items-center w-full\">\r\n                                <div className=\"flex gap-1 text-primary items-center\">\r\n                                  <span className=\"material-symbols-outlined\">\r\n                                    checklist\r\n                                  </span>\r\n                                  <p className=\"text-xl font-semibold\">\r\n                                    {countItems}\r\n                                  </p>\r\n                                </div>\r\n                                <div className=\"flex gap-1 text-orange items-center\">\r\n                                  <span className=\"material-symbols-outlined\">\r\n                                    close\r\n                                  </span>\r\n                                  <p className=\"text-xl font-semibold\">\r\n                                    {countFails}\r\n                                  </p>\r\n                                </div>\r\n                                <div className=\"flex gap-1 text-destructive items-center\">\r\n                                  <span className=\"material-symbols-outlined\">\r\n                                    error\r\n                                  </span>\r\n                                  <p className=\"text-xl font-semibold\">\r\n                                    {countDefects}\r\n                                  </p>\r\n                                </div>\r\n                              </div>\r\n                            </CardFooter>\r\n                          </AlertDialogDescription>\r\n                        </AlertDialogHeader>\r\n                        <AlertDialogFooter>\r\n                          <AlertDialogCancel\r\n                            onClick={() => handleCloseDialog()}\r\n                          >\r\n                            Cancel\r\n                          </AlertDialogCancel>\r\n                          <AlertDialogAction\r\n                            className=\"bg-primary text-primary-foreground shadow hover:bg-primary/90 h-10 rounded-md px-4 text-lg font-bold\"\r\n                            onClick={() => {\r\n                              exportData(patrol, patrolResults);\r\n                              handleCloseDialog();\r\n                              toast({\r\n                                variant: \"success\",\r\n                                title: a(\"ExportReportPatrolTitle\"),\r\n                                description: a(\"ExportReportPatrolDescription\"),\r\n                              });\r\n                            }}\r\n                          >\r\n                            <span className=\"material-symbols-outlined text-2xl me-2\">\r\n                              ios_share\r\n                            </span>\r\n                            Export\r\n                          </AlertDialogAction>\r\n                        </AlertDialogFooter>\r\n                      </AlertDialogContent>\r\n                    </AlertDialog>\r\n                  ) : patrol.status === \"on_going\" ? (\r\n                    canFinish ? (\r\n                      <Button\r\n                        variant={variant}\r\n                        onClick={handleOpenDialog}\r\n                        disabled={disabled}\r\n                      >\r\n                        <span className=\"material-symbols-outlined\">\r\n                          {iconName}\r\n                        </span>\r\n                        {t(text)}\r\n                      </Button>\r\n                    ) : (\r\n                      <Button\r\n                        variant={lock ? \"secondary\" : variant}\r\n                        disabled={disabled}\r\n                        onClick={toggleLock}\r\n                      >\r\n                        <span className=\"material-symbols-outlined\">\r\n                          {lock ? \"lock_open\" : \"lock\"}\r\n                        </span>\r\n                        {lock ? t(\"Unlock\") : t(\"Lock\")}\r\n                      </Button>\r\n                    )\r\n                  ) : (\r\n                    <Button\r\n                      variant={variant}\r\n                      onClick={() => handleOpenDialog()}\r\n                      disabled={disabled}\r\n                      className=\"flex flex-row items-center gap-2\"\r\n                    >\r\n                      <span className=\"material-symbols-outlined\">\r\n                        {iconName}\r\n                      </span>\r\n                      {t(text)}\r\n                    </Button>\r\n                  )}\r\n                  {patrol.status === \"scheduled\" && isAlertOpen ? (\r\n                    <AlertCustom\r\n                      title={a(\"PatrolStartConfirmTitle\")}\r\n                      description={a(\"PatrolStartConfirmDescription\")}\r\n                      primaryButtonText={t(\"Confirm\")}\r\n                      primaryIcon=\"check\"\r\n                      secondaryButtonText={t(\"Cancel\")}\r\n                      backResult={(result) => {\r\n                        if (result) {\r\n                          handleStartPatrol();\r\n                        }\r\n                        handleCloseDialog();\r\n                      }}\r\n                    />\r\n                  ) : patrol.status === \"on_going\" && isAlertOpen ? (\r\n                    <AlertCustom\r\n                      title={a(\"PatrolFinishConfirmTitle\")}\r\n                      description={a(\"PatrolFinishConfirmDescription\")}\r\n                      primaryButtonText={t(\"Confirm\")}\r\n                      primaryIcon=\"check\"\r\n                      secondaryButtonText={t(\"Cancel\")}\r\n                      backResult={(result) => {\r\n                        if (result) {\r\n                          handleFinishPatrol();\r\n                        }\r\n                        handleCloseDialog();\r\n                      }}\r\n                    />\r\n                  ) : null}\r\n                </div>\r\n              );\r\n            })()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ScrollArea className=\"h-full w-full rounded-md flex-1 [&>[data-radix-scroll-area-viewport]]:max-h-[calc(100vh-220px)]\">\r\n        {defects.length === 0 ? (\r\n          <NotFound\r\n            icon=\"campaign\"\r\n            title=\"NoDefectsPatrol\"\r\n            description=\"NoDefectsPatrolDescription\"\r\n          />\r\n        ) : (\r\n          defects\r\n            .slice() // สร้างสำเนาเพื่อไม่แก้ไข array ต้นฉบับ\r\n            .reverse() // กลับลำดับจากตัวสุดท้ายไปตัวแรก\r\n            .map((defect: IDefect) => {\r\n              return (\r\n                <div className=\"mb-4\" key={defect.id}>\r\n                  <ReportDefect\r\n                    defect={defect}\r\n                    page={\"patrol-view-report\"}\r\n                    response={(defect: IDefect) => {\r\n                      fetchRealtimeData(defect, \"edit\");\r\n                    }}\r\n                  />\r\n                </div>\r\n              );\r\n            })\r\n        )}\r\n      </ScrollArea>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\patrol\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":82,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used. Allowed unused vars must match /^_/u.","line":83,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used. Allowed unused vars must match /^_/u.","line":84,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":85,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'response' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":184,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":184,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":485,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":485,"endColumn":47}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DayPickerDateRange' is defined but never used. Allowed unused vars must match /^_/u.","line":76,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":52,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *  หน้าที่แสดงรายการ Patrol ทั้งหมด และสามารถสร้าง Patrol ใหม่ได้\r\n *  โดยสามารถค้นหา เลือกเรียงลำดับ และกรองข้อมูล Patrol ได้\r\n *\r\n * Input:\r\n * - ไม่มี\r\n * Output:\r\n * - หน้า Patrol ที่แสดงรายการ Patrol ทั้งหมด และสามารถสร้าง Patrol ใหม่ได้\r\n * - สามารถค้นหา เลือกเรียงลำดับ และกรองข้อมูล Patrol ได้\r\n * - สามารถเลือก Preset และวันที่สำหรับ Patrol ใหม่\r\n * - สามารถเลือก Inspector ในแต่ละ Checklist ของ Preset ที่เลือกได้\r\n * - สามารถสร้าง Patrol ใหม่ได้\r\n * - สามารถลบ Patrol ที่สร้างได้\r\n * - แสดง Alert ในกรณีที่ต้องการสร้าง Patrol ใหม่\r\n * - แสดง Alert ในกรณีที่ต้องการลบ Patrol\r\n * - แสดง Alert ในกรณีที่สร้าง Patrol ใหม่เสร็จสิ้น\r\n * - แสดง Alert ในกรณีที่ลบ Patrol สำเร็จ\r\n * - แสดง Alert ในกรณีที่เกิดข้อผิดพลาดในการสร้าง Patrol\r\n * - แสดง Alert ในกรณีที่เกิดข้อผิดพลาดในการลบ Patrol\r\n **/\r\n\r\n\"use client\";\r\n\r\nimport { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { CreatePatrolCard, PatrolCard } from \"@/components/patrol-card\";\r\nimport Textfield from \"@/components/textfield\";\r\nimport { Button, buttonVariants } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuLabel,\r\n  DropdownMenuRadioGroup,\r\n  DropdownMenuRadioItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport { fetchData } from \"@/lib/utils\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { ChecklistDropdown } from \"@/components/checklist-dropdown\";\r\nimport { DatePicker, DatePickerWithRange } from \"@/components/date-picker\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectGroup,\r\n  SelectItem,\r\n  SelectLabel,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport {\r\n  IPatrol,\r\n  IPatrolChecklist,\r\n  patrolStatus,\r\n  IPreset,\r\n  IPresetChecklist,\r\n  IPatrolResult,\r\n} from \"@/app/type\";\r\nimport { IUser, IFilterPatrol } from \"@/app/type\";\r\nimport { sortData } from \"@/lib/utils\";\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport { DateRange, DateRange as DayPickerDateRange } from \"react-day-picker\";\r\nimport Loading from \"@/components/loading\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport NotFound from \"@/components/not-found\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\";\r\nimport { ZoneTooltip } from \"@/components/zone-tooltip\";\r\nimport { TextTooltip } from \"@/components/text-tooltip\";\r\nimport { useSocket } from \"@/components/socket-provider\";\r\n\r\nexport default function Page() {\r\n  const a = useTranslations(\"Alert\");\r\n  const t = useTranslations(\"General\");\r\n  const z = useTranslations(\"Zone\");\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [socketData, setSocketData] = useState<IPatrolResult[]>([]);\r\n  const [allPatrols, setAllPatrols] = useState<IPatrol[]>([]);\r\n  const [allPresets, setAllPresets] = useState<IPreset[]>();\r\n  const [secondDialog, setSecondDialog] = useState(false);\r\n  const { socket, isConnected } = useSocket();\r\n\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [pendingAction, setPendingAction] = useState<(() => void) | null>(null);\r\n\r\n  const [selectedPreset, setSelectedPreset] = useState<IPreset>();\r\n  const [selectedDate, setSelectedDate] = useState<string>();\r\n  const [patrolChecklist, setPatrolChecklist] = useState<IPatrolChecklist[]>(\r\n    []\r\n  );\r\n\r\n  const [isSortOpen, setIsSortOpen] = useState(false);\r\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n  const [dateError, setDateError] = useState<string | null>(null);\r\n  const [user, setUser] = useState<IUser | null>(null);\r\n\r\n  const isNextButtonDisabled = !selectedPreset;\r\n\r\n  const handleOpenDialog = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleDialogResult = (result: boolean) => {\r\n    setIsDialogOpen(false);\r\n    if (result && pendingAction) {\r\n      pendingAction(); // Execute the pending action\r\n      setPendingAction(null); // Clear the pending action\r\n    }\r\n  };\r\n\r\n  const handleCreatePatrol = () => {\r\n    setPendingAction(() => () => createPatrol());\r\n    handleOpenDialog();\r\n  };\r\n\r\n  const createPatrol = async () => {\r\n    if (!selectedDate) {\r\n      setDateError(\"PatrolUnselectDate\");\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"PatrolMissingDateTitle\"),\r\n        description: a(\"PatrolMissingDateDescription\"),\r\n      });\r\n      return;\r\n    } else {\r\n      setDateError(null);\r\n    }\r\n\r\n    // ตรวจสอบว่าวันที่เลือกน้อยกว่าวันปัจจุบันหรือไม่\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    const selected = new Date(selectedDate);\r\n    selected.setHours(0, 0, 0, 0);\r\n\r\n    if (selected < today) {\r\n      setDateError(\"PatrolInvalidDate\");\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"PatrolCreateInvalidDateTitle\"),\r\n        description: a(\"PatrolCreateInvalidDateDescription\"),\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (\r\n      patrolChecklist.length !== selectedPreset.presetChecklists.length ||\r\n      !patrolChecklist.every((item) => item.userId !== null)\r\n    ) {\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"PatrolCreateErrorMissingInspectorTitle\"),\r\n        description: a(\"PatrolCreateErrorMissingInspectorDescription\"),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const data = {\r\n      date: selectedDate,\r\n      presetId: selectedPreset.id,\r\n      checklists: patrolChecklist,\r\n    };\r\n\r\n    try {\r\n      const response = await fetchData(\"post\", \"/patrol\", true, data);\r\n      setSecondDialog(false);\r\n      toast({\r\n        variant: \"success\",\r\n        title: a(\"PatrolCreateTitle\"),\r\n        description: a(\"PatrolCreateDescription\"),\r\n      });\r\n      setPatrolChecklist([]);\r\n      setSelectedDate(null);\r\n      setSelectedPreset(null);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleRemoveSuccess = (id: number) => {\r\n    setAllPatrols((prevPatrols) =>\r\n      prevPatrols.filter((patrol) => patrol.id !== id)\r\n    );\r\n    toast({\r\n      variant: \"success\",\r\n      title: a(\"PatrolRemoveSuccessTitle\"),\r\n      description: a(\"PatrolRemoveSuccessDescription\"),\r\n    });\r\n  };\r\n\r\n  const handleSelectUser = (checklistId: number, userId: number) => {\r\n    setPatrolChecklist((prev: IPatrolChecklist[]) => {\r\n      const existingIndex = prev.findIndex(\r\n        (item) => item.checklistId === checklistId\r\n      );\r\n\r\n      if (existingIndex !== -1) {\r\n        // If the checklist already exists, update the inspectorId\r\n        const updatedChecklist = [...prev];\r\n        updatedChecklist[existingIndex].userId = userId;\r\n        return updatedChecklist;\r\n      } else {\r\n        // Add new checklist\r\n        return [...prev, { checklistId, userId }];\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleSortChange = (type: string, value: string) => {\r\n    setSort((prevSort) => ({\r\n      ...prevSort,\r\n      [type]: value,\r\n    }));\r\n  };\r\n\r\n  const initialFilter = {\r\n    presetTitle: \"All\",\r\n    patrolStatuses: [\"pending\", \"on_going\", \"scheduled\"],\r\n    dateRange: { start: undefined, end: undefined },\r\n  };\r\n\r\n  const getStoredFilter = () => {\r\n    if (typeof window !== \"undefined\") {\r\n      const storedFilter = localStorage.getItem(\"filter\");\r\n      if (storedFilter) {\r\n        return JSON.parse(storedFilter);\r\n      }\r\n    }\r\n    return initialFilter;\r\n  };\r\n\r\n  const [filter, setFilter] = useState<IFilterPatrol | null>(getStoredFilter());\r\n\r\n  const [sort, setSort] = useState<{ by: string; order: string }>({\r\n    by: \"Doc No.\",\r\n    order: \"Ascending\",\r\n  });\r\n\r\n  const toggleStatusFilter = (status: string, checked: boolean) => {\r\n    if (checked) {\r\n      setFilter((prev) => {\r\n        if (prev) {\r\n          return {\r\n            ...prev,\r\n            patrolStatuses: [...prev.patrolStatuses, status],\r\n          };\r\n        } else {\r\n          return {\r\n            presetTitle: \"All\",\r\n            patrolStatuses: [],\r\n            dateRange: { start: undefined, end: undefined },\r\n          };\r\n        }\r\n      });\r\n    } else {\r\n      setFilter((prev) => {\r\n        if (prev) {\r\n          return {\r\n            ...prev,\r\n            patrolStatuses: prev.patrolStatuses.filter((s) => s !== status),\r\n          };\r\n        }\r\n        return prev;\r\n      });\r\n    }\r\n  };\r\n\r\n  const applyFilter = () => {\r\n    getPatrolData();\r\n  };\r\n\r\n  const resetFilter = () => {\r\n    setFilter(initialFilter);\r\n  };\r\n\r\n  const handleDateSelect = (dateRange: DateRange) => {\r\n    const startDate = dateRange.from ?? null;\r\n    const endDate = dateRange.to\r\n      ? new Date(new Date(dateRange.to).setHours(23, 59, 59, 999))\r\n      : null;\r\n    setFilter({\r\n      presetTitle: filter?.presetTitle || null,\r\n      patrolStatuses: filter?.patrolStatuses || [],\r\n      dateRange: {\r\n        start: startDate || undefined,\r\n        end: endDate || undefined,\r\n      },\r\n    });\r\n  };\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const handleSearch = (event: any) => {\r\n    setSearchTerm(event.target.value);\r\n  };\r\n\r\n  const buildQueryString = (\r\n    filter: IFilterPatrol | null,\r\n    searchTerm: string\r\n  ) => {\r\n    const params: Record<string, string | undefined> = {};\r\n\r\n    // เพิ่ม search term ถ้ามี\r\n    if (searchTerm) params.search = searchTerm;\r\n\r\n    // เพิ่ม preset filter ถ้าไม่ใช่ \"All\"\r\n    if (filter?.presetTitle && filter.presetTitle !== \"All\") {\r\n      params.preset = filter.presetTitle;\r\n    }\r\n\r\n    // เพิ่ม status filter\r\n    if (filter?.patrolStatuses?.length) {\r\n      params.status = filter.patrolStatuses.join(\",\");\r\n    }\r\n\r\n    // เพิ่ม startDate\r\n    if (filter?.dateRange?.start) {\r\n      params.startDate = filter?.dateRange.start.toISOString();\r\n    }\r\n\r\n    // เพิ่ม endDate\r\n    if (filter?.dateRange?.end) {\r\n      params.endDate = filter?.dateRange?.end.toISOString();\r\n    }\r\n\r\n    return new URLSearchParams(params).toString();\r\n  };\r\n\r\n  const getUserData = async () => {\r\n    try {\r\n      const userfetch = await fetchData(\"get\", \"/user?profile=true&image=true\", true);\r\n      setUser(userfetch);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch profile data:\", error);\r\n    }\r\n  };\r\n\r\n  const getPatrolData = async () => {\r\n    try {\r\n      const queryString = buildQueryString(filter, searchTerm);\r\n      const patrols = await fetchData(\"get\", `/patrols?${queryString}`, true);\r\n      setAllPatrols(patrols);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch patrol data:\", error);\r\n    }\r\n  };\r\n\r\n  const getPresetData = async () => {\r\n    try {\r\n      const preset = await fetchData(\"get\", \"/presets?latest=true\", true);\r\n      setAllPresets(preset);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch patrol data:\", error);\r\n    }\r\n  };\r\n\r\n  const mergedPatrols = useMemo(() => {\r\n    if (!socketData || socketData.length === 0) {\r\n      return allPatrols;\r\n    }\r\n\r\n    return allPatrols.map((patrol) => {\r\n      if (!patrol.results || patrol.results.length === 0) {\r\n        return patrol;\r\n      }\r\n\r\n      const updatedResults = patrol.results\r\n        .map((existingResult) => {\r\n          const matchingSocketResult = socketData.find((result) => result.id === existingResult.id);\r\n          return matchingSocketResult ? { ...existingResult, ...matchingSocketResult } : existingResult;\r\n        })\r\n        .filter((result) => result.id); // กรองเฉพาะที่มี id เท่านั้น\r\n\r\n      return { ...patrol, results: [...updatedResults] };\r\n    });\r\n  }, [allPatrols, socketData]);\r\n\r\n  // ใช้ useEffect เพื่อตั้งค่า allPatrols ถ้า mergedPatrols เปลี่ยนแปลง\r\n  useEffect(() => {\r\n    if (JSON.stringify(allPatrols) !== JSON.stringify(mergedPatrols)) {\r\n      setAllPatrols([...mergedPatrols]);\r\n    }\r\n  }, [mergedPatrols]);\r\n\r\n  const joinedRoomsRef = useRef(new Set());\r\n\r\n  useEffect(() => {\r\n    getUserData();\r\n    getPatrolData();\r\n    getPresetData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const initializeSocketListeners = () => {\r\n      if (user?.id) {\r\n        socket.emit('join_room', user.id);\r\n      }\r\n\r\n      // ฟังก์ชันรับข้อมูลเริ่มต้นจาก socket\r\n      const handleInitialData = (initialResults: IPatrolResult[]) => {\r\n        if (initialResults.length <= 0) {\r\n          return;\r\n        }\r\n        // ตั้งค่า socketData ให้เป็นข้อมูลที่รับมาจาก socket\r\n        setSocketData(prevData => {\r\n          // อัปเดตข้อมูลที่ตรงกันหรือลงข้อมูลใหม่\r\n          const updatedResults = initialResults.map((incomingResult) => {\r\n            // เช็คว่า incomingResult.id มีอยู่ใน prevData หรือไม่\r\n            const existingIndex = prevData.findIndex(result => result.id === incomingResult.id);\r\n\r\n            if (existingIndex !== -1) {\r\n              // ถ้ามี id ตรงกัน, อัปเดตข้อมูลใน existing result\r\n              return {\r\n                ...prevData[existingIndex],  // ข้อมูลเดิม\r\n                ...incomingResult,            // ข้อมูลใหม่ที่มาจาก initialResults\r\n              };\r\n            }\r\n\r\n            // ถ้าไม่มี id ตรงกัน, ให้เพิ่มข้อมูลใหม่\r\n            return incomingResult;\r\n          });\r\n\r\n          // เช็คผลลัพธ์ใหม่ที่ไม่มีใน prevData\r\n          const newResults = initialResults.filter(result =>\r\n            !prevData.some(existingResult => existingResult.id === result.id)\r\n          );\r\n\r\n          // รวมข้อมูลเดิมที่อัปเดตและผลลัพธ์ใหม่\r\n          return [...updatedResults, ...newResults];\r\n        });\r\n      };\r\n\r\n      // ฟังก์ชันที่ใช้ในการอัปเดตข้อมูลผลลัพธ์\r\n      const handleResultUpdate = (incomingResult: IPatrolResult) => {\r\n        setSocketData(prevData => {\r\n          // เช็คว่า incomingResult.id มีอยู่ใน prevData หรือไม่\r\n          const updatedResults = prevData.map(existingResult => {\r\n            if (existingResult.id === incomingResult.id) {\r\n              return {\r\n                ...existingResult,   // ข้อมูลเดิม\r\n                ...incomingResult,   // ข้อมูลใหม่ที่มาจาก incomingResult\r\n              };\r\n            }\r\n            return existingResult;\r\n          });\r\n\r\n          // ถ้าไม่มีผลลัพธ์จาก incomingResult ใน prevData, ให้เพิ่มเข้าไป\r\n          if (!prevData.some(existingResult => existingResult.id === incomingResult.id)) {\r\n            return [...updatedResults, incomingResult];\r\n          }\r\n\r\n          return updatedResults;\r\n        });\r\n      };\r\n\r\n      // อัปเดตสถานะเมื่อ patrol เริ่ม\r\n      const handlePatrolStarted = async (data: { patrolId: string; patrolData: IPatrol }) => {\r\n        if (!joinedRoomsRef.current.has(data.patrolId)) {\r\n          socket.emit(\"join_patrol\", data.patrolId);\r\n          joinedRoomsRef.current.add(data.patrolId);\r\n        }\r\n        await getPatrolData();\r\n      };\r\n\r\n      // อัปเดตสถานะเมื่อ patrol จบ\r\n      const handlePatrolFinished = async (data: { patrolId: string; patrolData: IPatrol }) => {\r\n        await getPatrolData();\r\n      };\r\n\r\n      // อัปเดตข้อมูลเมื่อมี Patrol ใหม่\r\n      const handleNewPatrol = async (newPatrol) => {\r\n        if (!joinedRoomsRef.current.has(newPatrol.id)) {\r\n          socket.emit(\"join_patrol\", newPatrol.id);\r\n          joinedRoomsRef.current.add(newPatrol.id);\r\n        }\r\n        await getPatrolData();\r\n      };\r\n\r\n      // อัปเดตข้อมูลเมื่อ Patrol ถูกลบ \r\n      const handlePatrolDeleted = (patrolId) => {\r\n        setAllPatrols((prevPatrols) => prevPatrols.filter((patrol) => patrol.id !== patrolId));\r\n        if (!joinedRoomsRef.current.has(patrolId)) {\r\n          socket.emit(\"join_patrol\", patrolId);\r\n          joinedRoomsRef.current.add(patrolId);\r\n        }\r\n      };\r\n\r\n      socket.on(\"initial_patrol_data\", handleInitialData);\r\n      socket.on(\"patrol_result_update\", handleResultUpdate);\r\n      socket.on(\"patrol_started\", handlePatrolStarted);\r\n      socket.on(\"patrol_finished\", handlePatrolFinished);\r\n      socket.on(\"patrol_created\", handleNewPatrol);\r\n      socket.on(\"patrol_deleted\", handlePatrolDeleted);\r\n      setLoading(false);\r\n      return () => {\r\n        socket.off(\"initial_patrol_data\", handleInitialData);\r\n        socket.off(\"patrol_result_update\", handleResultUpdate);\r\n        socket.off(\"patrol_started\", handlePatrolStarted);\r\n        socket.off(\"patrol_finished\", handlePatrolFinished);\r\n        socket.off(\"patrol_created\", handleNewPatrol);\r\n        socket.off(\"patrol_deleted\", handlePatrolDeleted);\r\n      };\r\n    };\r\n\r\n    initializeSocketListeners();\r\n  }, [socket, isConnected, user?.id]);\r\n\r\n  useEffect(() => {\r\n    allPatrols.forEach((patrol) => {\r\n      if (!joinedRoomsRef.current.has(patrol.id) && patrol.status === 'on_going' || patrol.status === 'scheduled') {\r\n        socket.emit(\"join_patrol\", patrol.id);\r\n        joinedRoomsRef.current.add(patrol.id);\r\n      }\r\n    });\r\n  }, [allPatrols])\r\n\r\n  useEffect(() => {\r\n    getPatrolData();\r\n  }, [searchTerm]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"filter\", JSON.stringify(filter));\r\n  }, [filter]);\r\n\r\n  useEffect(() => {\r\n    const sortedData = sortData(allPatrols, sort);\r\n    if (JSON.stringify(sortedData) !== JSON.stringify(allPatrols)) {\r\n      setAllPatrols(sortedData);\r\n    }\r\n  }, [sort, allPatrols]);\r\n\r\n  useEffect(() => {\r\n    if (selectedDate !== null || selectedDate !== undefined) {\r\n      setDateError(null);\r\n    }\r\n  }, [selectedDate]);\r\n  if (loading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col px-6 py-4 gap-4\">\r\n      <div className=\"flex items-center gap-2\">\r\n        <Textfield\r\n          iconName=\"search\"\r\n          showIcon={true}\r\n          placeholder={t(\"Search\")}\r\n          onChange={handleSearch}\r\n        />\r\n\r\n        <DropdownMenu onOpenChange={(open) => setIsSortOpen(open)}>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium \r\n    ${isSortOpen ? \"border border-destructive\" : \"border-none\"}`}\r\n          >\r\n            <span className=\"material-symbols-outlined\">swap_vert</span>\r\n            <div className=\"text-lg\">{t(\"Sort\")}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align=\"end\" className=\"p-2 gap-2\">\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n              {t(\"SortBy\")}\r\n            </DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sort.by}\r\n              onValueChange={(value) => handleSortChange(\"by\", value)}\r\n            >\r\n              <DropdownMenuRadioItem\r\n                value=\"Doc No.\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"DocNo\")}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem\r\n                value=\"Date\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Date\")}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n\r\n            <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n              {t(\"Order\")}\r\n            </DropdownMenuLabel>\r\n            <DropdownMenuRadioGroup\r\n              value={sort.order}\r\n              onValueChange={(value) => handleSortChange(\"order\", value)}\r\n            >\r\n              <DropdownMenuRadioItem\r\n                value=\"Ascending\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Ascending\")}\r\n              </DropdownMenuRadioItem>\r\n              <DropdownMenuRadioItem\r\n                value=\"Descending\"\r\n                className=\"text-base\"\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                {t(\"Descending\")}\r\n              </DropdownMenuRadioItem>\r\n            </DropdownMenuRadioGroup>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n\r\n        <DropdownMenu onOpenChange={(open) => setIsFilterOpen(open)}>\r\n          <DropdownMenuTrigger\r\n            className={`custom-shadow px-[10px] bg-card w-auto h-[40px] gap-[10px] inline-flex items-center justify-center rounded-md text-sm font-medium \r\n    ${isFilterOpen ? \"border border-destructive\" : \"border-none\"}`}\r\n          >\r\n            <span className=\"material-symbols-outlined\">page_info</span>\r\n            <div className=\"text-lg\">{t(\"Filter\")}</div>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent\r\n            className=\"flex flex-col justify-center gap-2 p-2 z-50\"\r\n            align=\"end\"\r\n          >\r\n            <div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                {t(\"Date\")}\r\n              </DropdownMenuLabel>\r\n              <DatePickerWithRange\r\n                startDate={filter?.dateRange.start}\r\n                endDate={filter?.dateRange.end}\r\n                onSelect={handleDateSelect}\r\n                className=\"my-date-picker\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                {t(\"Status\")}\r\n              </DropdownMenuLabel>\r\n              <DropdownMenuCheckboxItem\r\n                checked={filter?.patrolStatuses.includes(\"pending\")}\r\n                onCheckedChange={(checked) =>\r\n                  toggleStatusFilter(\"pending\", checked)\r\n                }\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                <BadgeCustom\r\n                  width=\"w-full\"\r\n                  variant=\"blue\"\r\n                  showIcon={true}\r\n                  iconName=\"hourglass_top\"\r\n                  children=\"Pending\"\r\n                />\r\n              </DropdownMenuCheckboxItem>\r\n              <DropdownMenuCheckboxItem\r\n                checked={filter?.patrolStatuses.includes(\"scheduled\")}\r\n                onCheckedChange={(checked) =>\r\n                  toggleStatusFilter(\"scheduled\", checked)\r\n                }\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                <BadgeCustom\r\n                  width=\"w-full\"\r\n                  variant=\"yellow\"\r\n                  showIcon={true}\r\n                  iconName=\"event_available\"\r\n                  children=\"Scheduled\"\r\n                />\r\n              </DropdownMenuCheckboxItem>\r\n              <DropdownMenuCheckboxItem\r\n                checked={filter?.patrolStatuses.includes(\"on_going\")}\r\n                onCheckedChange={(checked) =>\r\n                  toggleStatusFilter(\"on_going\", checked)\r\n                }\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                <BadgeCustom\r\n                  width=\"w-full\"\r\n                  variant=\"purple\"\r\n                  showIcon={true}\r\n                  iconName=\"cached\"\r\n                  children=\"On Going\"\r\n                />\r\n              </DropdownMenuCheckboxItem>\r\n              <DropdownMenuCheckboxItem\r\n                checked={filter?.patrolStatuses.includes(\"completed\")}\r\n                onCheckedChange={(checked) =>\r\n                  toggleStatusFilter(\"completed\", checked)\r\n                }\r\n                onSelect={(e) => e.preventDefault()}\r\n              >\r\n                <BadgeCustom\r\n                  width=\"w-full\"\r\n                  variant=\"green\"\r\n                  showIcon={true}\r\n                  iconName=\"check\"\r\n                  children=\"Complete\"\r\n                />\r\n              </DropdownMenuCheckboxItem>\r\n            </div>\r\n            <div>\r\n              <DropdownMenuLabel className=\"p-0 text-sm font-semibold text-muted-foreground\">\r\n                {t(\"Preset\")}\r\n              </DropdownMenuLabel>\r\n              <Select\r\n                value={filter?.presetTitle || \"All\"}\r\n                onValueChange={(value) =>\r\n                  setFilter({\r\n                    presetTitle: value,\r\n                    patrolStatuses: filter?.patrolStatuses || [],\r\n                    dateRange: {\r\n                      start: filter?.dateRange.start,\r\n                      end: filter?.dateRange.end,\r\n                    },\r\n                  })\r\n                }\r\n              >\r\n                <SelectTrigger className=\"\">\r\n                  <SelectValue\r\n                    placeholder={\r\n                      filter?.presetTitle === \"All\"\r\n                        ? t(\"All\")\r\n                        : filter?.presetTitle\r\n                    }\r\n                  />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectGroup>\r\n                    <SelectLabel>{t(\"Preset\")}</SelectLabel>\r\n                    <SelectItem value=\"All\">{t(\"All\")}</SelectItem>\r\n                    {allPresets &&\r\n                      allPresets.map((preset) => (\r\n                        <SelectItem value={preset.title} key={preset.id}>\r\n                          {preset.title}\r\n                        </SelectItem>\r\n                      ))}\r\n                  </SelectGroup>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div className=\"flex w-full justify-end mt-4 gap-2\">\r\n              <Button size=\"sm\" variant=\"secondary\" onClick={resetFilter}>\r\n                {t(\"Reset\")}\r\n              </Button>\r\n              <Button variant=\"primary\" size=\"sm\" onClick={applyFilter}>\r\n                {t(\"Apply\")}\r\n              </Button>\r\n            </div>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </div>\r\n      <ScrollArea className=\"h-full w-full rounded-md flex-1 [&>[data-radix-scroll-area-viewport]]:max-h-[calc(100vh-160px)]\">\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4\">\r\n          {/* Create Patrol Card with AlertDialog */}\r\n          <AlertDialog>\r\n            <AlertDialogTrigger className=\"w-full\">\r\n              <CreatePatrolCard />\r\n            </AlertDialogTrigger>\r\n            <AlertDialogContent className=\"sm:w-[90%] xl:w-[60%] h-[670px] px-6 py-4\">\r\n              <AlertDialogHeader className=\"flex\">\r\n                <div className=\"flex flex-col gap-1\">\r\n                  <AlertDialogTitle className=\"text-2xl font-bold text-card-foreground\">\r\n                    {t(\"PatrolPreset\")}\r\n                  </AlertDialogTitle>\r\n                  <AlertDialogDescription className=\"text-base text-input\">\r\n                    {t(\"PleaseSelectAPresetForThePatrol\")}\r\n                  </AlertDialogDescription>\r\n                </div>\r\n                <div className=\"flex items-center justify-center pt-2\">\r\n                  <ScrollArea className=\"h-[500px] w-full rounded-md border-none pr-4 overflow-y-auto\">\r\n                    <div className=\"grid sm:grid-cols-1 xl:grid-cols-2 gap-4\">\r\n                      {(() => {\r\n                        const availablePresets = allPresets\r\n                          ? allPresets.filter((preset) => !preset.disabled)\r\n                          : [];\r\n                        return availablePresets.length > 0 ? (\r\n                          availablePresets.map((preset, index) => (\r\n                            <Button\r\n                              key={index}\r\n                              variant={\"outline\"}\r\n                              className={`custom-shadow bg-secondary grid grid-cols-1 sm:grid-cols-1 h-60 ${selectedPreset === preset\r\n                                ? \"border-destructive\"\r\n                                : \"border-transparent\"\r\n                                } flex flex-col py-4 px-6 gap-4 justify-start items-start`}\r\n                              onClick={() => setSelectedPreset(preset)}\r\n                            >\r\n                              {/* Title */}\r\n                              <p className=\"font-bold text-2xl text-card-foreground\">\r\n                                {preset.title}\r\n                              </p>\r\n                              {/* Zone */}\r\n\r\n                              <ZoneTooltip zonesName={preset.zones}>\r\n                                <div className=\"flex flex-row justify-start items-center w-auto gap-1 lg:max-w-[400px] sm:max-w-[620px] truncate\">\r\n                                  {/* Positioned Icon */}\r\n                                  <span className=\"material-symbols-outlined text-2xl text-muted-foreground\">\r\n                                    location_on\r\n                                  </span>\r\n                                  <p className=\"text-muted-foreground min-w-0 text-start truncate overflow-hidden text-base font-semibold whitespace-nowrap text-ellipsis\">\r\n                                    {preset.zones\r\n                                      .map((zone) => z(zone))\r\n                                      .join(\", \")}\r\n                                  </p>\r\n                                </div>\r\n                              </ZoneTooltip>\r\n                              {/* Description */}\r\n                              <div className=\"flex flex-row w-full h-full gap-1\">\r\n                                {/* Positioned Icon */}\r\n                                <span className=\"material-symbols-outlined text-2xl text-muted-foreground\">\r\n                                  data_info_alert\r\n                                </span>\r\n                                {/* Positioned Textarea */}\r\n                                <div className=\"w-full h-full \">\r\n                                  <TextTooltip object={preset.description}>\r\n                                    <Textarea\r\n                                      disabled\r\n                                      className=\"p-0 pointer-events-none border-none shadow-none overflow-hidden text-left resize-none  max-h-full h-20 w-full text-base font-normal line-clamp-3\"\r\n                                      value={preset.description}\r\n                                    />\r\n                                  </TextTooltip>\r\n                                </div>\r\n\r\n                              </div>\r\n                            </Button>\r\n                          ))\r\n                        ) : (\r\n                          <div className=\"col-span-full min-h-[261px]\">\r\n                            <NotFound\r\n                              icon=\"deployed_code\"\r\n                              title=\"NoPresetsFound\"\r\n                              description=\"NoPresetsDescription\"\r\n                            />\r\n                          </div>\r\n                        );\r\n                      })()}\r\n                    </div>\r\n                  </ScrollArea>\r\n                </div>\r\n              </AlertDialogHeader>\r\n              <AlertDialogFooter>\r\n                <div className=\"flex items-end justify-end gap-2\">\r\n                  <AlertDialogCancel>{t(\"Cancel\")}</AlertDialogCancel>\r\n                  <AlertDialogAction\r\n                    className={buttonVariants({\r\n                      variant: \"primary\",\r\n                      size: \"lg\",\r\n                    })}\r\n                    onClick={() => setSecondDialog(true)}\r\n                    disabled={isNextButtonDisabled}\r\n                  >\r\n                    {t(\"Next\")}\r\n                    <span className=\"material-symbols-outlined text-2xl\">\r\n                      chevron_right\r\n                    </span>\r\n                  </AlertDialogAction>\r\n                </div>\r\n              </AlertDialogFooter>\r\n            </AlertDialogContent>\r\n          </AlertDialog>\r\n\r\n          {/* Second AlertDialog */}\r\n          <AlertDialog open={secondDialog}>\r\n            <AlertDialogContent className=\"sm:w-[90%] xl:w-[60%] h-fit px-6 py-4\">\r\n              <AlertDialogHeader>\r\n                <div className=\"flex flex-col gap-1\">\r\n                  <AlertDialogTitle className=\"text-2xl font-bold text-card-foreground\">\r\n                    {t(\"PatrolPreset\")}\r\n                  </AlertDialogTitle>\r\n                  <AlertDialogDescription className=\"text-base text-input\">\r\n                    {t(\"PleaseSelectAPresetForThePatrol\")}\r\n                  </AlertDialogDescription>\r\n                </div>\r\n                <div className=\"flex flex-col gap-1 pt-2\">\r\n                  <p className=\"text-sm font-semibold text-muted-foreground\">\r\n                    {\" \"}\r\n                    {t(\"Date\")}\r\n                  </p>\r\n                  <DatePicker\r\n                    handleSelectedTime={(time: string) => setSelectedDate(time)}\r\n                  />\r\n                  {dateError && (\r\n                    <p className=\"text-sm font-light italic text-destructive mt-1\">\r\n                      {a(dateError)}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              </AlertDialogHeader>\r\n              <div className=\"flex flex-col gap-1\">\r\n                <p className=\"text-sm font-semibold text-muted-foreground\">\r\n                  {t(\"Checklist\")}\r\n                </p>\r\n                <div className=\"grid grid-cols-1\">\r\n                  <ScrollArea className=\"pr-2 h-96 w-full rounded-md overflow-visible overflow-y-clip\">\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-1 md:grid-cols-1 xl:grid-cols-1 gap-4\">\r\n                      {selectedPreset?.presetChecklists.flatMap(\r\n                        (presetChecklist: IPresetChecklist) => (\r\n                          <ChecklistDropdown\r\n                            key={presetChecklist.checklist.id}\r\n                            checklist={presetChecklist.checklist}\r\n                            handleselectUser={(selectedUser: IUser) => {\r\n                              handleSelectUser(\r\n                                presetChecklist.checklist.id,\r\n                                selectedUser.id\r\n                              );\r\n                            }}\r\n                          />\r\n                        )\r\n                      )}\r\n                    </div>\r\n                  </ScrollArea>\r\n                </div>\r\n              </div>\r\n\r\n              <AlertDialogFooter>\r\n                <div className=\"flex items-end justify-end gap-2\">\r\n                  <AlertDialogCancel\r\n                    onClick={() => {\r\n                      setSecondDialog(false);\r\n                      setDateError(null);\r\n                    }}\r\n                  >\r\n                    {t(\"Cancel\")}\r\n                  </AlertDialogCancel>\r\n                  <AlertDialogAction\r\n                    className={`${buttonVariants({\r\n                      variant: \"primary\",\r\n                      size: \"lg\",\r\n                    })} gap-2`}\r\n                    onClick={handleCreatePatrol}\r\n                  >\r\n                    <span className=\"material-symbols-outlined text-2xl\">\r\n                      note_add\r\n                    </span>\r\n                    {t(\"NewPatrol\")}\r\n                  </AlertDialogAction>\r\n                </div>\r\n              </AlertDialogFooter>\r\n            </AlertDialogContent>\r\n          </AlertDialog>\r\n\r\n          {isDialogOpen && (\r\n            <AlertCustom\r\n              title={a(\"PatrolCreateConfirmTitle\")}\r\n              description={a(\"PatrolCreateConfirmDescription\")}\r\n              primaryButtonText={t(\"Confirm\")}\r\n              primaryIcon=\"check\"\r\n              secondaryButtonText={t(\"Cancel\")}\r\n              backResult={handleDialogResult}\r\n            ></AlertCustom>\r\n          )}\r\n\r\n          {(() => {\r\n            // กรอง preset ที่ไม่ได้ disabled\r\n            const availablePatrols = allPatrols\r\n              ? allPatrols.filter((patrol) => !patrol.disabled)\r\n              : [];\r\n\r\n            return availablePatrols.length > 0 ? (\r\n              availablePatrols.map((patrol) => (\r\n                <PatrolCard\r\n                  key={patrol.id}\r\n                  status={patrol.status as patrolStatus}\r\n                  date={patrol.date}\r\n                  preset={patrol.preset}\r\n                  itemCounts={patrol.itemCounts}\r\n                  id={patrol.id}\r\n                  results={[...(patrol.results ?? [])]}\r\n                  inspectors={patrol.inspectors}\r\n                  onRemoveSuccess={handleRemoveSuccess}\r\n                />\r\n              ))\r\n            ) : (\r\n              <div className=\"col-span-full min-h-[261px]\">\r\n                <NotFound\r\n                  icon=\"task\"\r\n                  title=\"NoPatrolsAvailable\"\r\n                  description=\"NoPatrolsDescription\"\r\n                />\r\n              </div>\r\n            );\r\n          })()}\r\n        </div>\r\n      </ScrollArea>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\profile\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\profile\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":360,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":360,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *   หน้า Profile ใช้สำหรับแสดงข้อมูลของผู้ใช้ และสามารถแก้ไขข้อมูลส่วนตัวได้\r\n *\r\n * Input:\r\n * - ไม่มี\r\n * Output:\r\n * - หน้า Profile ที่แสดงข้อมูลของผู้ใช้ และสามารถแก้ไขข้อมูลส่วนตัวได้\r\n * - แสดงข้อมูลของผู้ใช้ และสามารถแก้ไขข้อมูลของผู้ใช้ได้\r\n **/\r\n\r\n\"use client\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\nimport { Button, buttonVariants } from \"@/components/ui/button\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { IUser } from \"@/app/type\";\r\nimport { fetchData, getInitials } from \"@/lib/utils\";\r\nimport Loading from \"@/components/loading\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogTrigger,\r\n  AlertDialogContent,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogDescription,\r\n  AlertDialogCancel,\r\n  AlertDialogAction,\r\n  AlertDialogFooter,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport Map from \"@/components/map\";\r\nimport Textfield from \"@/components/textfield\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\n\r\ninterface IFormProfile {\r\n  name?: string;\r\n  email?: string;\r\n  age?: number;\r\n  tel?: string;\r\n  address?: string;\r\n  image?: string;\r\n  username?: string;\r\n  password?: string;\r\n  currentPassword?: string;\r\n  newPassword?: string;\r\n  confirmPassword?: string;\r\n}\r\n\r\nexport default function page() {\r\n  const [nameError, setNameError] = useState<string | null>(null);\r\n  const [emailError, setEmailError] = useState<string | null>(null);\r\n  const [ageError, setAgeError] = useState<string | null>(null);\r\n  const [telError, setTelError] = useState<string | null>(null);\r\n  const [addressError, setAddressError] = useState<string | null>(null);\r\n  const [currentPassError, setCurrentPassError] = useState<string | null>(null);\r\n  const [newPassError, setNewPassError] = useState<string | null>(null);\r\n  const [confirmPassError, setConfirmPassError] = useState<string | null>(null);\r\n  const [isProfileDialogOpen, setIsProfileDialogOpen] = useState(false);\r\n  const [isPasswordDialogOpen, setIsPasswordDialogOpen] = useState(false);\r\n  const [isProfileImageDialogOpen, setIsProfileImageDialogOpen] =\r\n    useState(false);\r\n  const [mounted, setMounted] = useState(false);\r\n  const [pendingAction, setPendingAction] = useState<(() => void) | null>(null);\r\n  const [imageProfile, setImageProfile] = useState<File | null>(null);\r\n  const [userData, setUserData] = useState<IUser>(null);\r\n  const [formData, setFormData] = useState<IFormProfile>();\r\n  const router = useRouter();\r\n  const locale = useLocale();\r\n\r\n  useEffect(() => {\r\n    getUserData();\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  const z = useTranslations(\"Zone\");\r\n  const a = useTranslations(\"Alert\");\r\n  const t = useTranslations(\"General\");\r\n\r\n  const getUserData = async () => {\r\n    try {\r\n      const data = await fetchData(\r\n        \"get\",\r\n        \"/user?profile=true&image=true&password=true\",\r\n        true\r\n      );\r\n      setUserData(data);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch user data: \", error);\r\n    }\r\n  };\r\n\r\n  if (!mounted || !userData) {\r\n    return <Loading />;\r\n  }\r\n\r\n  const handleOpenDialog = (dialogType: String) => {\r\n    if (dialogType === \"SaveProfileDialog\") {\r\n      setIsProfileDialogOpen(true);\r\n    } else if (dialogType === \"SaveProfileImageDialog\") {\r\n      setIsProfileImageDialogOpen(true);\r\n    } else if (dialogType === \"SavePasswordDialog\") {\r\n      setIsPasswordDialogOpen(true);\r\n    }\r\n  };\r\n\r\n  const handleDialogResult = (result: boolean) => {\r\n    setIsProfileDialogOpen(false);\r\n    setIsProfileImageDialogOpen(false);\r\n    setIsPasswordDialogOpen(false);\r\n    if (result && pendingAction) {\r\n      pendingAction(); // Execute the pending action\r\n      setPendingAction(null); // Clear the pending action\r\n    }\r\n  };\r\n\r\n  const handleSaveProfile = () => {\r\n    setPendingAction(() => () => handleUpdateUserData());\r\n    handleOpenDialog(\"SaveProfileDialog\");\r\n  };\r\n\r\n  const handleChangePassword = () => {\r\n    setPendingAction(() => () => handleUpdateUserPassword());\r\n    handleOpenDialog(\"SavePasswordDialog\");\r\n  };\r\n\r\n  const handleSaveProfileImage = () => {\r\n    setPendingAction(() => () => handleUpdateImageProfile());\r\n    handleOpenDialog(\"SaveProfileImageDialog\");\r\n    setImageProfile(null);\r\n  };\r\n\r\n  const handleInputChange = (\r\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => {\r\n      const updatedFormData = { ...prev };\r\n      updatedFormData[name] = value;\r\n      return updatedFormData;\r\n    });\r\n  };\r\n\r\n  const handleUpdateUserData = async () => {\r\n    let update = false;\r\n    let showErrorToast = false;\r\n    setCurrentPassError(null);\r\n    setNewPassError(null);\r\n    setConfirmPassError(null);\r\n    setNameError(null);\r\n    setEmailError(null);\r\n    setAgeError(null);\r\n    setTelError(null);\r\n    setAddressError(null);\r\n\r\n    const userForm = new FormData();\r\n\r\n    // name\r\n    if (formData?.name === null || formData?.name === \"\") {\r\n      setNameError(a(\"ProfileNameRequire\"));\r\n      showErrorToast = true;\r\n    } else if (formData?.name && formData?.name !== userData.profile.name) {\r\n      userForm.append(\"name\", formData.name);\r\n      update = true;\r\n    }\r\n\r\n    //  email\r\n    if (formData?.email === null || formData?.email === \"\") {\r\n      setEmailError(a(\"ProfileEmailRequire\"));\r\n      showErrorToast = true;\r\n    } else if (formData?.email && formData?.email !== userData.email) {\r\n      if (\r\n        formData?.email &&\r\n        formData.email.trim() &&\r\n        /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(formData.email)\r\n      ) {\r\n        userForm.append(\"email\", formData.email);\r\n        update = true;\r\n      } else {\r\n        setEmailError(a(\"ProfileEmailInvalid\"));\r\n        showErrorToast = true;\r\n      }\r\n    }\r\n\r\n    //  age\r\n    if (formData?.age !== undefined && formData?.age.toString() === \"\") {\r\n      setAgeError(a(\"ProfileAgeRequire\"));\r\n      showErrorToast = true;\r\n    } else if (\r\n      formData?.age &&\r\n      formData?.age.toString() !== userData.profile?.age?.toString()\r\n    ) {\r\n      if (\r\n        formData?.age &&\r\n        !isNaN(Number(formData.age)) &&\r\n        Number(formData.age) <= 120 &&\r\n        Number(formData.age) > 0\r\n      ) {\r\n        userForm.append(\"age\", formData.age.toString());\r\n        update = true;\r\n      } else {\r\n        setAgeError(a(\"ProfileAgeInvalid\"));\r\n        showErrorToast = true;\r\n      }\r\n    }\r\n\r\n    //  tel\r\n    if (formData?.tel === null || formData?.tel === \"\") {\r\n      setTelError(a(\"ProfileTelRequire\"));\r\n      showErrorToast = true;\r\n    } else if (formData?.tel && formData?.tel !== userData.profile.tel) {\r\n      if (formData?.tel?.trim() && /^[0-9]{10}$/.test(formData.tel.trim())) {\r\n        userForm.append(\"tel\", formData.tel);\r\n        update = true;\r\n      } else {\r\n        setTelError(a(\"ProfileTelInvalid\"));\r\n        showErrorToast = true;\r\n      }\r\n    }\r\n\r\n    //  address\r\n    if (formData?.address === null || formData?.address === \"\") {\r\n      setAddressError(a(\"ProfileAddressRequire\"));\r\n      showErrorToast = true;\r\n    } else if (\r\n      formData?.address &&\r\n      formData?.address !== userData.profile.address\r\n    ) {\r\n      userForm.append(\"address\", formData.address);\r\n      update = true;\r\n    }\r\n\r\n    if (showErrorToast) {\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"ProfileUpdateErrorTitle\"),\r\n        description: a(\"ProfileUpdateErrorDescription\"),\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (update) {\r\n      try {\r\n        const response = await fetchData(\r\n          \"put\",\r\n          `/user/${userData.profile.userId}`,\r\n          true,\r\n          userForm\r\n        );\r\n        if (response) {\r\n          setUserData(response);\r\n          toast({\r\n            variant: \"success\",\r\n            title: a(\"ProfileUpdateSuccessTitle\"),\r\n            description: a(\"ProfileUpdateSuccessDescription\"),\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error updating profile:\", error);\r\n        toast({\r\n          variant: \"error\",\r\n          title: a(\"ProfileUpdateErrorTitle\"),\r\n          description: a(\"ProfileUpdateErrorDescription\"),\r\n        });\r\n      }\r\n    } else {\r\n      toast({\r\n        variant: \"default\",\r\n        title: a(\"ProfileNoChangeTitle\"),\r\n        description: a(\"ProfileNoChangeDescription\"),\r\n      });\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleUpdateUserPassword = async () => {\r\n    let showErrorToast = false;\r\n    setCurrentPassError(null);\r\n    setNewPassError(null);\r\n    setConfirmPassError(null);\r\n    setNameError(null);\r\n    setEmailError(null);\r\n    setAgeError(null);\r\n    setTelError(null);\r\n    setAddressError(null);\r\n\r\n    // Check if all fields are filled\r\n    if (!formData?.currentPassword) {\r\n      setCurrentPassError(a(\"ProfileCurrentPassRequire\"));\r\n      showErrorToast = true;\r\n    }\r\n    if (!formData?.newPassword) {\r\n      setNewPassError(a(\"ProfileNewPassRequire\"));\r\n      showErrorToast = true;\r\n    }\r\n    if (!formData?.confirmPassword) {\r\n      setConfirmPassError(a(\"ProfileConfirmPassRequire\"));\r\n      showErrorToast = true;\r\n    }\r\n    if (formData?.newPassword && formData?.confirmPassword) {\r\n      if (formData?.newPassword.length < 8) {\r\n        setNewPassError(\"Password must be at least 8 characters long.\");\r\n      }\r\n      if (formData?.confirmPassword.length < 8) {\r\n        setConfirmPassError(\"Password must be at least 8 characters long.\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    // If there's any error, show toast and stop\r\n    if (showErrorToast) {\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"ProfileUpdateErrorTitle\"),\r\n        description: a(\"ProfileUpdateErrorDescription\"),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const passwordMatch = await bcrypt.compare(\r\n      formData?.currentPassword,\r\n      userData?.password\r\n    );\r\n\r\n    const isPasswordTheSame = await bcrypt.compare(\r\n      formData?.newPassword,\r\n      userData?.password\r\n    );\r\n\r\n    if (formData?.newPassword === formData?.confirmPassword) {\r\n      if (!isPasswordTheSame) {\r\n        if (passwordMatch) {\r\n          const userForm = new FormData();\r\n          userForm.append(\"password\", formData.newPassword);\r\n\r\n          try {\r\n            const response = await fetchData(\r\n              \"put\",\r\n              `/user/${userData.profile.userId}`,\r\n              true,\r\n              userForm\r\n            );\r\n            if (response) {\r\n              setUserData(response);\r\n              toast({\r\n                variant: \"success\",\r\n                title: a(\"ProfileUpdateSuccessTitle\"),\r\n                description: a(\"ProfileUpdateSuccessDescription\"),\r\n              });\r\n              try {\r\n                await fetchData(\"post\", `/logout`, true);\r\n                window.location.reload();\r\n              } catch (error) {}\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error updating password:\", error);\r\n            showErrorToast = true;\r\n          }\r\n          return;\r\n        } else {\r\n          setCurrentPassError(a(\"ProfileCurrentPassInvalid\"));\r\n          toast({\r\n            variant: \"error\",\r\n            title: a(\"ProfileUpdateErrorTitle\"),\r\n            description: a(\"ProfileUpdateErrorDescription\"),\r\n          });\r\n          return;\r\n        }\r\n      } else {\r\n        toast({\r\n          variant: \"default\",\r\n          title: a(\"ProfileNoChangeTitle\"),\r\n          description: a(\"ProfileNoChangeDescription\"),\r\n        });\r\n      }\r\n    } else {\r\n      setConfirmPassError(a(\"ProfileConfirmPassInvalid\"));\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"ProfileUpdateErrorTitle\"),\r\n        description: a(\"ProfileUpdateErrorDescription\"),\r\n      });\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleUpdateImageProfile = async () => {\r\n    const imageForm = new FormData();\r\n    imageForm.append(\"imageProfile\", imageProfile);\r\n    try {\r\n      if (imageProfile) {\r\n        await fetchData(\"put\", \"/profile\", true, imageForm, true);\r\n      }\r\n      toast({\r\n        variant: \"success\",\r\n        title: a(\"ProfileImageUpdateSuccessTitle\"),\r\n        description: a(\"ProfileImageUpdateSuccessDescription\"),\r\n      });\r\n      getUserData();\r\n    } catch (error) {\r\n      console.error(\"Error updating image profile:\", error);\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"ProfileImageUpdateErrorTitle\"),\r\n        description: a(\"ProfileImageUpdateErrorDescription\"),\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    document.getElementById(\"file-input\")?.click();\r\n  };\r\n\r\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files && event.target.files.length > 0) {\r\n      setImageProfile(event.target.files[0]); // Store the new image file in state\r\n    } else {\r\n      setImageProfile(null); // Reset the image if no file is selected\r\n    }\r\n  };\r\n\r\n  const handCancelImageProfile = () => {\r\n    setImageProfile(null); // Reset the image if no file is selected\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col py-4 px-6 gap-4\">\r\n      <div className=\"text-2xl font-bold\">{t(\"ViewProfile\")}</div>\r\n\r\n      {/* first block */}\r\n      <div className=\"flex justify-between px-6 py-4 bg-card rounded-md custom-shadow\">\r\n        <div className=\"flex flex-row\">\r\n          {userData.profile ? (\r\n              <Avatar className=\"h-32 w-32 mr-6\">\r\n                <AvatarImage\r\n                  src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${userData.profile.image?.path}`}\r\n                />\r\n                <AvatarFallback id={userData.id?.toString()}>\r\n                  <p className=\"text-4xl\">\r\n                    {getInitials(userData.profile.name)}\r\n                  </p>\r\n                </AvatarFallback>\r\n              </Avatar>\r\n          ) : (\r\n            <Skeleton className=\"h-12 w-12 rounded-full\" />\r\n          )}\r\n\r\n          <div className=\"flex flex-col justify-center items-start\">\r\n            <div className=\"text-2xl font-bold py-4\">\r\n              {t(\"WelcomeBack\")}, {userData.profile.name}\r\n            </div>\r\n\r\n            <AlertDialog>\r\n              <AlertDialogTrigger>\r\n                <Button\r\n                  className=\"custom-shadow\"\r\n                  variant=\"outline\"\r\n                  size=\"default\"\r\n                >\r\n                  {t(\"UploadNewPhoto\")}\r\n                </Button>\r\n              </AlertDialogTrigger>\r\n\r\n              <AlertDialogContent className=\"flex flex-col px-6 py-4 w-[400px] h-fit\">\r\n                <AlertDialogHeader>\r\n                  <AlertDialogTitle className=\"text-2xl font-semibold\">\r\n                    {t(\"ProfileImage\")}\r\n                  </AlertDialogTitle>\r\n                  <AlertDialogDescription className=\"flex items-start justify-start text-base text-input\">\r\n                    {t(\"ProfileImageDescription\")}\r\n                  </AlertDialogDescription>\r\n                </AlertDialogHeader>\r\n\r\n                <div className=\"flex gap-2\">\r\n                  <div>\r\n                    <input\r\n                      name=\"image\"\r\n                      id=\"file-input\"\r\n                      placeholder={null}\r\n                      type=\"file\"\r\n                      className=\"hidden\"\r\n                      onChange={handleFileChange}\r\n                    />\r\n                    <Button\r\n                      className=\"flex justify-center items-center h-[40px] w-[40px]\"\r\n                      variant=\"primary\"\r\n                      onClick={handleButtonClick}\r\n                    >\r\n                      <span className=\"material-symbols-outlined text-2xl\">\r\n                        upload\r\n                      </span>\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex justify-center items-center mb-2\">\r\n                  {imageProfile ? (\r\n                    <Avatar className=\"h-80 w-80\">\r\n                      <AvatarImage src={URL.createObjectURL(imageProfile)} />\r\n                      <AvatarFallback id={userData.id.toString()}>\r\n                        <p className=\"text-6xl\">\r\n                          {getInitials(userData.profile.name)}\r\n                        </p>\r\n                      </AvatarFallback>\r\n                    </Avatar>\r\n                  ) : (\r\n                    <Avatar className=\"h-80 w-80\">\r\n                      <AvatarImage\r\n                        src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${userData.profile.image?.path}`}\r\n                      />\r\n                      <AvatarFallback id={userData.id.toString()}>\r\n                        <p className=\"text-6xl\">\r\n                          {getInitials(userData.profile.name)}\r\n                        </p>\r\n                      </AvatarFallback>\r\n                    </Avatar>\r\n                  )}\r\n                </div>\r\n\r\n                <AlertDialogFooter>\r\n                  <div className=\"flex items-end justify-end gap-2\">\r\n                    <AlertDialogCancel onClick={handCancelImageProfile}>\r\n                      {t(\"Cancel\")}\r\n                    </AlertDialogCancel>\r\n                    <AlertDialogAction\r\n                      className={`bg-primary hover:bg-primary/70 \r\n                ${!imageProfile ? \"opacity-50 cursor-not-allowed\" : \"\"}`}\r\n                      onClick={handleSaveProfileImage}\r\n                      disabled={!imageProfile ? true : false}\r\n                    >\r\n                      <span className=\"material-symbols-outlined text-2xl\">\r\n                        save\r\n                      </span>\r\n                      {t(\"Save\")}\r\n                    </AlertDialogAction>\r\n                  </div>\r\n                </AlertDialogFooter>\r\n              </AlertDialogContent>\r\n            </AlertDialog>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex flex-col items-end justify-between\">\r\n          <BadgeCustom\r\n            variant={\r\n              userData.role === \"supervisor\"\r\n                ? \"yellow\"\r\n                : userData.role === \"inspector\"\r\n                ? \"red\"\r\n                : \"blue\"\r\n            }\r\n            showIcon={true}\r\n            shape=\"square\"\r\n            iconName={\r\n              userData.role === \"supervisor\"\r\n                ? \"engineering\"\r\n                : userData.role === \"inspector\"\r\n                ? \"person_search\"\r\n                : \"manage_accounts\"\r\n            }\r\n          >\r\n            {t(userData.role)}\r\n          </BadgeCustom>\r\n\r\n          {userData.zone ? (\r\n            <AlertDialog>\r\n              <AlertDialogTrigger className=\"flex justify-center items-center min-w-72 px-6 py-4 bg-secondary gap-2 rounded-md\">\r\n                <div className=\"flex flex-row items-center gap-1 text-muted-foreground\">\r\n                  <span className=\"material-symbols-outlined text-[22px] pr-1\">\r\n                    location_on\r\n                  </span>\r\n                  <p className=\"text-base font-semibold\">{t(\"ZoneText\")}</p>\r\n                </div>\r\n                <p>{z(userData.zone.name)}</p>\r\n              </AlertDialogTrigger>\r\n\r\n              <AlertDialogContent className=\"w-full sm:w-[50%] md:w-[70%] lg:w-[100%] max-w-[1200px] rounded-md px-6 py-4\">\r\n                <div className=\"flex flex-col gap-1\">\r\n                  <div className=\"text-muted-foreground flex items-center gap-1\">\r\n                    <span className=\"material-symbols-outlined\">\r\n                      location_on\r\n                    </span>\r\n                    <p>{t(\"Zone\")}</p>\r\n                  </div>\r\n                  <div className=\" flex justify-center bg-secondary rounded-md py-4\">\r\n                    <Map\r\n                      disable={true}\r\n                      initialSelectedZones={[userData.zone.id]}\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <AlertDialogFooter>\r\n                  <AlertDialogAction\r\n                    className={buttonVariants({\r\n                      variant: \"secondary\",\r\n                      size: \"lg\",\r\n                    })}\r\n                  >\r\n                    {t(\"Close\")}\r\n                  </AlertDialogAction>\r\n                </AlertDialogFooter>\r\n              </AlertDialogContent>\r\n            </AlertDialog>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n\r\n      <Tabs defaultValue=\"profile\" className=\"w-full\">\r\n        <TabsContent className=\"w-full\" value=\"profile\">\r\n          <div className=\"flex flex-col bg-card w-full py-4 px-6 rounded-md custom-shadow\">\r\n            <div className=\"flex flex-col gap-4\">\r\n              <TabsList className=\"flex gap-1 bg-secondary w-[233px] h-10\">\r\n                <TabsTrigger value=\"profile\" className=\"flex gap-2 w-[98px]\">\r\n                  <span className=\"material-symbols-outlined\">\r\n                    account_circle\r\n                  </span>\r\n                  <div className=\" font-bold\">Profile</div>\r\n                </TabsTrigger>\r\n                <TabsTrigger value=\"password\" className=\"flex gap-2 w-[119px]\">\r\n                  <span className=\"material-symbols-outlined\">lock</span>\r\n                  <div className=\" font-bold\">Password</div>\r\n                </TabsTrigger>\r\n              </TabsList>\r\n              <div className=\"flex flex-row justify-between\">\r\n                {/* edit profile */}\r\n                <div className=\"flex flex-col w-full\">\r\n                  <div className=\"flex flex-col gap-2 mb-4\">\r\n                    <div className=\"text-2xl font-bold \">\r\n                      {t(\"EditProfile\")}\r\n                    </div>\r\n                    <div>{t(\"EditProfileDescription\")}</div>\r\n                  </div>\r\n\r\n                  <div className=\"w-[415px] mb-4\">\r\n                    <p className=\"text-base font-semibold text-muted-foreground mb-1\">\r\n                      {t(\"Name\")}\r\n                    </p>\r\n                    <Input\r\n                      defaultValue={\r\n                        userData.profile.name ? userData.profile.name : \"-\"\r\n                      }\r\n                      name=\"name\"\r\n                      onChange={handleInputChange}\r\n                      placeholder={\r\n                        userData.profile.name ? userData.profile.name : \"-\"\r\n                      }\r\n                      className=\"text-xl font-normal bg-secondary\"\r\n                    ></Input>\r\n                    {nameError && (\r\n                      <p className=\"ttext-sm font-light text-destructive italic mt-1\">\r\n                        {nameError}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"w-[415px] mb-4\">\r\n                    <p className=\"text-base font-semibold text-muted-foreground mb-1\">\r\n                      {t(\"Email\")}\r\n                    </p>\r\n                    <Input\r\n                      defaultValue={userData.email ? userData.email : \"-\"}\r\n                      name=\"email\"\r\n                      onChange={handleInputChange}\r\n                      placeholder={userData.email ? userData.email : \"-\"}\r\n                      className=\"text-xl font-normal bg-secondary\"\r\n                    ></Input>\r\n                    {emailError && (\r\n                      <p className=\"text-sm font-light text-destructive italic mt-1\">\r\n                        {emailError}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"w-[415px] mb-4\">\r\n                    <p className=\"text-base font-semibold text-muted-foreground mb-1\">\r\n                      {t(\"Age\")}\r\n                    </p>\r\n                    <Input\r\n                      defaultValue={\r\n                        userData.profile.age ? userData.profile.age : \"-\"\r\n                      }\r\n                      name=\"age\"\r\n                      onChange={handleInputChange}\r\n                      placeholder={\r\n                        String(userData.profile.age)\r\n                          ? String(userData.profile.age)\r\n                          : \"-\"\r\n                      }\r\n                      className=\"text-xl font-normal bg-secondary\"\r\n                    ></Input>\r\n                    {ageError && (\r\n                      <p className=\"ttext-sm font-light text-destructive italic mt-1\">\r\n                        {ageError}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"w-[415px] mb-4\">\r\n                    <p className=\"text-base font-semibold text-muted-foreground mb-1\">\r\n                      {t(\"Tel\")}\r\n                    </p>\r\n                    <Input\r\n                      defaultValue={\r\n                        userData.profile.tel ? userData.profile.tel : \"-\"\r\n                      }\r\n                      name=\"tel\"\r\n                      onChange={handleInputChange}\r\n                      placeholder={\r\n                        userData.profile.tel ? userData.profile.tel : \"-\"\r\n                      }\r\n                      className=\"text-xl font-normal bg-secondary\"\r\n                    ></Input>\r\n                    {telError && (\r\n                      <p className=\"ttext-sm font-light text-destructive italic mt-1\">\r\n                        {telError}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"w-[415px] mb-4\">\r\n                    <p className=\"text-base font-semibold text-muted-foreground mb-1\">\r\n                      {t(\"Address\")}\r\n                    </p>\r\n                    <Textarea\r\n                      defaultValue={\r\n                        userData.profile.address\r\n                          ? userData.profile.address\r\n                          : \"-\"\r\n                      }\r\n                      name=\"address\"\r\n                      onChange={handleInputChange}\r\n                      placeholder={\r\n                        userData.profile.address\r\n                          ? userData.profile.address\r\n                          : \"-\"\r\n                      }\r\n                      className=\"text-xl font-normal bg-secondary custom-shadow h-56\"\r\n                    ></Textarea>\r\n                    {addressError && (\r\n                      <p className=\"ttext-sm font-light text-destructive italic mt-1\">\r\n                        {addressError}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* Button Back And Save    */}\r\n            <div className=\"flex justify-end items-end gap-2\">\r\n              <Button\r\n                variant=\"secondary\"\r\n                size=\"lg\"\r\n                onClick={() => router.push(`/${locale}/`)}\r\n              >\r\n                {t(\"Back\")}\r\n              </Button>\r\n              <Button variant=\"primary\" size=\"lg\" onClick={handleSaveProfile}>\r\n                <span className=\"material-symbols-outlined text-2xl\">save</span>\r\n                {t(\"Save\")}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </TabsContent>\r\n        <TabsContent className=\"w-full\" value=\"password\">\r\n          <div className=\"flex  flex-col bg-card py-4 px-6 rounded-md custom-shadow\">\r\n            <div className=\"flex flex-col gap-4\">\r\n              <TabsList className=\"flex gap-1 bg-secondary w-[233px] h-10\">\r\n                <TabsTrigger value=\"profile\" className=\"flex gap-2 w-[98px]\">\r\n                  <span className=\"material-symbols-outlined\">\r\n                    account_circle\r\n                  </span>\r\n                  <div className=\" font-bold\">Profile</div>\r\n                </TabsTrigger>\r\n                <TabsTrigger value=\"password\" className=\"flex gap-2 w-[119px]\">\r\n                  <span className=\"material-symbols-outlined\">lock</span>\r\n                  <div className=\" font-bold\">Password</div>\r\n                </TabsTrigger>\r\n              </TabsList>\r\n              <div className=\"flex flex-row justify-between\">\r\n                {/* manage account */}\r\n                <div className=\"flex flex-col w-full\">\r\n                  <div className=\"flex flex-col gap-2 mb-4\">\r\n                    <div className=\"text-2xl font-bold \">\r\n                      {t(\"ManageAccount\")}\r\n                    </div>\r\n                    <div>{t(\"EditPasswordDescription\")}</div>\r\n                  </div>\r\n\r\n                  <div className=\"w-[415px] mb-4\">\r\n                    <p className=\"text-base font-semibold text-muted-foreground mb-1\">\r\n                      {t(\"Username\")}\r\n                    </p>\r\n                    <Input\r\n                      name=\"username\"\r\n                      onChange={handleInputChange}\r\n                      placeholder={userData.username ? userData.username : \"-\"}\r\n                      className=\"text-xl font-normal bg-secondary\"\r\n                      readOnly\r\n                    ></Input>\r\n                  </div>\r\n\r\n                  <div className=\"flex flex-col w-[415px] mb-4 gap-1\">\r\n                    <p className=\"flex gap-1 text-base font-semibold text-muted-foreground\">\r\n                      {t(\"CurrentPassword\")}\r\n                      <p className=\"text-destructive\">*</p>\r\n                    </p>\r\n                    <Textfield\r\n                      name=\"currentPassword\"\r\n                      className=\"text-xl font-normal bg-secondary\"\r\n                      type=\"password\"\r\n                      showIcon={true}\r\n                      iconName=\"lock\"\r\n                      placeholder=\"\"\r\n                      onChange={handleInputChange}\r\n                    />\r\n                    {currentPassError && (\r\n                      <p className=\"text-sm font-light text-destructive italic mt-1\">\r\n                        {currentPassError}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"flex flex-col w-[415px] mb-4 gap-1\">\r\n                    <p className=\"flex gap-1 text-base font-semibold text-muted-foreground\">\r\n                      {t(\"NewPassword\")}\r\n                      <p className=\"text-destructive\">*</p>\r\n                    </p>\r\n                    <Textfield\r\n                      name=\"newPassword\"\r\n                      className=\"text-xl font-normal bg-secondary\"\r\n                      type=\"password\"\r\n                      showIcon={true}\r\n                      iconName=\"key\"\r\n                      placeholder=\"\"\r\n                      onChange={handleInputChange}\r\n                    />\r\n                    {newPassError && (\r\n                      <p className=\"text-sm font-light text-destructive italic mt-1\">\r\n                        {newPassError}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"flex flex-col w-[415px] mb-4 gap-1\">\r\n                    <p className=\"flex gap-1 text-base font-semibold text-muted-foreground\">\r\n                      {t(\"ConfirmPassword\")}\r\n                      <p className=\"text-destructive\">*</p>\r\n                    </p>\r\n                    <Textfield\r\n                      name=\"confirmPassword\"\r\n                      className=\"text-xl font-normal bg-secondary\"\r\n                      type=\"password\"\r\n                      showIcon={true}\r\n                      iconName=\"check_circle\"\r\n                      placeholder=\"\"\r\n                      onChange={handleInputChange}\r\n                    />\r\n                    {confirmPassError && (\r\n                      <p className=\"text-sm font-light text-destructive italic mt-1\">\r\n                        {confirmPassError}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* Button Back And Save    */}\r\n            <div className=\"flex justify-end items-end gap-2\">\r\n              <Button\r\n                variant=\"secondary\"\r\n                size=\"lg\"\r\n                onClick={() => router.push(`/${locale}/`)}\r\n              >\r\n                {t(\"Back\")}\r\n              </Button>\r\n              <Button\r\n                variant=\"primary\"\r\n                size=\"lg\"\r\n                onClick={handleChangePassword}\r\n              >\r\n                <span className=\"material-symbols-outlined text-2xl\">save</span>\r\n                {t(\"Save\")}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      {isProfileDialogOpen && (\r\n        <AlertCustom\r\n          title={a(\"ProfileUpdateConfirmTitle\")}\r\n          description={a(\"ProfileUpdateConfirmDescription\")}\r\n          primaryButtonText={t(\"Confirm\")}\r\n          primaryIcon=\"check\"\r\n          secondaryButtonText={t(\"Cancel\")}\r\n          backResult={handleDialogResult}\r\n        ></AlertCustom>\r\n      )}\r\n      {isPasswordDialogOpen && (\r\n        <AlertCustom\r\n          title={a(\"ConfirmPasswordChange\")}\r\n          description={a(\"ConfirmPasswordChangeDescription\")}\r\n          primaryButtonText={t(\"Confirm\")}\r\n          primaryIcon=\"check\"\r\n          secondaryButtonText={t(\"Cancel\")}\r\n          backResult={handleDialogResult}\r\n        ></AlertCustom>\r\n      )}\r\n      {isProfileImageDialogOpen && (\r\n        <AlertCustom\r\n          title={a(\"ProfileImageUpdateConfirmTitle\")}\r\n          description={a(\"ProfileImageUpdateConfirmDescription\")}\r\n          primaryButtonText={t(\"Confirm\")}\r\n          primaryIcon=\"check\"\r\n          secondaryButtonText={t(\"Cancel\")}\r\n          backResult={handleDialogResult}\r\n        ></AlertCustom>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\[locale]\\refresh\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":20,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { fetchData } from \"@/lib/utils\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport Loading from \"@/components/loading\";\r\nimport { useLocale } from \"next-intl\";\r\n\r\nexport default function RefreshPage() {\r\n    const router = useRouter();\r\n    const locale = useLocale()\r\n    useEffect(() => {\r\n        async function refresh() {\r\n            try {\r\n                const result = await fetchData(\"post\",'/refresh-token',true)\r\n                if (result.status !== 200) {\r\n                    router.push(`/${locale}/login`);\r\n                }\r\n                router.push(`/`);\r\n            } catch (error) {\r\n                router.push(`/${locale}/login`);\r\n            }\r\n\r\n        }\r\n\r\n        refresh();\r\n    }, []);\r\n\r\n    return <Loading />;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\app\\type.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'timeStamp' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useTranslations' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from \"zod\"\r\nimport { timeStamp } from 'console';\r\nimport { useTranslations } from \"next-intl\";\r\nimport { badgeVariants } from \"@/components/badge-custom\";\r\n\r\nexport type patrolStatus = \"pending\" | \"scheduled\" | \"on_going\" | \"completed\"\r\nexport type role = \"admin\" | \"inspector\" | \"supervisor\"\r\nexport type defectStatus = \"reported\" | \"completed\" | \"pending_inspection\" | \"in_progress\" | \"resolved\";\r\nexport type itemType = \"safety\" | \"environment\" | 'maintenance';\r\nexport type notificationType = \"information\" | \"request\" | 'system';\r\n\r\nexport interface IUser {\r\n    id: number;\r\n    username?: string;\r\n    email?: string;\r\n    password?: any;\r\n    role: role;\r\n    department?: string | null;\r\n    createdAt?: string;\r\n    active?: boolean;\r\n    resetToken?: string;\r\n\r\n    presets?: IPreset[];\r\n    checklists?: IChecklist[]\r\n    comments?: IComment[]\r\n    profile: IProfile;\r\n    notifications?: INotification[]\r\n    defects?: IDefect[]\r\n    zone?: IZone;\r\n    patrolChecklists?: IPatrolChecklist[]\r\n    images?: IImage[]\r\n}\r\n\r\nexport interface IDefect {\r\n    title: string;\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    type: itemType;\r\n    status: defectStatus;\r\n    startTime: string;\r\n    endTime: string;\r\n    userId?: number;\r\n    supervisorId?: number;\r\n    patrolResultId?: number;\r\n    timeStamp: Date;\r\n\r\n    user?: IUser;\r\n    zone?: IZone;\r\n    supervisor?: IUser;\r\n    patrolResult: IPatrolResult;\r\n    images: IDefectImage[];\r\n}\r\n\r\nexport interface INotification {\r\n    id: number\r\n    message: string\r\n    read: boolean,\r\n    timestamp: string\r\n    type: notificationType\r\n    url?: string\r\n    userId: number\r\n\r\n    user?: IUser\r\n}\r\n\r\nexport interface IProfile {\r\n    id: number;\r\n    name: string;\r\n    age?: number;\r\n    tel?: string;\r\n    address?: string;\r\n    userId: number\r\n    imageId: number | null\r\n\r\n    image?: IImage | null;\r\n    user?: IUser;\r\n}\r\n\r\n\r\nexport interface IPatrol {\r\n    id: number;\r\n    date: string;\r\n    startTime: string | null;\r\n    endTime: string | null;\r\n    duration: string | null;\r\n    status: patrolStatus;\r\n    presetId: number;\r\n\r\n    patrolChecklists: IPatrolChecklist[];\r\n    preset: IPreset;\r\n    results: IPatrolResult[];\r\n    itemCounts: number;\r\n    inspectors?: IUser[]\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface IPatrolChecklist {\r\n    id?: number;\r\n    patrolId?: number;\r\n    checklistId: number;\r\n    userId: number;\r\n\r\n    patrol?: IPatrol;\r\n    checklist?: IChecklist;\r\n    inspector?: IUser;\r\n}\r\n\r\nexport interface IPreset {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n    version: number;\r\n    latest: boolean;\r\n    updatedAt: string;\r\n    updatedBy: number;\r\n\r\n    user?: IUser;\r\n    presetChecklists?: IPresetChecklist[];\r\n    patrols?: IPatrol[];\r\n    zones?: IZone[];\r\n    versionCount?: number;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport interface IPresetChecklist {\r\n    presetId: number;\r\n    checklistId: number;\r\n\r\n    checklist: IChecklist;\r\n    preset: IPreset;\r\n}\r\n\r\nexport interface IChecklist {\r\n    id: number;\r\n    title: string;\r\n    version: number;\r\n    latest: boolean;\r\n    updatedAt: string;\r\n    updatedBy: number;\r\n\r\n    patrols?: IPatrolChecklist[];\r\n    user: IUser;\r\n    presetChecklists?: IPresetChecklist[];\r\n    items: IItem[];\r\n}\r\n\r\nexport interface IPatrolResult {\r\n    inspectorId: number\r\n    id: number;\r\n    status: boolean;\r\n    itemId: number;\r\n    zoneId: number;\r\n    patrolId?: number;\r\n    supervisorId?: number;\r\n\r\n    comments?: IComment[];\r\n    defects?: IDefect[]\r\n    itemZone?: IItemZone;\r\n    patrol?: IPatrol;\r\n    supervisor?: IUser;\r\n}\r\n\r\nexport interface IItem {\r\n    id: number;\r\n    name: string;\r\n    type: itemType;\r\n    checklistId: number;\r\n\r\n    itemZones: IItemZone[];\r\n    checklist?: IChecklist\r\n}\r\n\r\nexport interface IZone {\r\n    id: number;\r\n    name: string;\r\n    locationId?: number;\r\n    userId?: number;\r\n    pathData?: string;\r\n    text?: {\r\n        x: number;\r\n        y: number;\r\n        fontSize: number;\r\n        rotation: number;\r\n    } | null\r\n    supervisor?: IUser;\r\n    defects?: number;\r\n    dashboard?: {\r\n        defectReported: IDashboardCard;\r\n        defectCompleted: IDashboardCard;\r\n        defectPending: IDashboardCard;\r\n        chartData: IZoneChartDataItem[];\r\n        defectTrend: number;\r\n        defects?: IDefect[];\r\n    }\r\n}\r\n\r\ninterface IZoneChartDataItem {\r\n    month: string;\r\n    defect: number;\r\n}\r\n\r\nexport interface IItemZone {\r\n    itemId: number;\r\n    zoneId: number;\r\n\r\n    results?: IPatrolResult;\r\n    item: IItem;\r\n    zone: IZone;\r\n}\r\n\r\nexport interface ILocation {\r\n    id: number\r\n    name: string\r\n\r\n    zones: IZone[]\r\n}\r\n\r\nexport interface IComment {\r\n    id: number;\r\n    message: string;\r\n    timestamp: string;\r\n    status: boolean;\r\n    userId: number;\r\n    supervisorId: number;\r\n    patrolResultId: number;\r\n\r\n    user: IUser;\r\n    supervisor: IUser;\r\n    patrolResult: IPatrolResult;\r\n}\r\n\r\n\r\nexport interface IImage {\r\n    id: number;\r\n    path: string;\r\n    timestamp?: string;\r\n    updateBy?: number;\r\n\r\n    user?: IUser;\r\n    profiles: IProfile[];\r\n    defects: IDefectImage[];\r\n}\r\n\r\nexport interface IDefectImage {\r\n    defectId?: number\r\n    imageId?: number\r\n    image: IImage\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// filter \r\n\r\nexport interface IFilterPatrol {\r\n    presetTitle: string | null;\r\n    patrolStatuses: string[];\r\n    dateRange: { start: Date | undefined; end: Date | undefined };\r\n}\r\n\r\nexport interface IFilterDefect {\r\n    defectStatus: string | null;\r\n    defectTypes: string[];\r\n    dateRange: { start: Date | undefined; end: Date | undefined };\r\n}\r\nexport interface IFilterComment {\r\n    commentStatus: string | null;\r\n    dateRange: { start: Date | undefined; end: Date | undefined };\r\n}\r\n\r\n\r\nexport const LoginSchema = z.object({\r\n    username: z.string().min(1, { message: \"LoginUsernameRequire\" }),\r\n    password: z.string().min(1, { message: \"LoginPasswordRequire\" }),\r\n    rememberMe: z.boolean().optional()\r\n})\r\n\r\nexport interface IToast {\r\n    variant: \"default\" | \"error\" | \"success\";\r\n    title: string;\r\n    description: string;\r\n}\r\n\r\n\r\nexport interface IHeatmapZone {\r\n    id: number;\r\n    name: string;\r\n    defects: number;\r\n}\r\n\r\nexport interface IHeatMap {\r\n    data: IHeatmapZone[];\r\n}\r\n\r\nexport interface IDefectCategory {\r\n    chartData: IDefectCategoryItem[];\r\n    trend: number;\r\n}\r\nexport interface IDefectCategoryItem {\r\n    type: string;\r\n    amounts: number;\r\n    fill: string;\r\n}\r\n\r\nexport interface ICommonDefectItem {\r\n    name: string;\r\n    amounts: number;\r\n    fill: string;\r\n}\r\nexport interface IPatrolCompletionRate {\r\n    chartData: IPatrolCompletionRateItem[];\r\n    trend: number;\r\n    percent: number;\r\n}\r\nexport interface IPatrolCompletionRateItem {\r\n    noDefect: number;\r\n    withDefect: number;\r\n}\r\nexport interface IDashboardCard {\r\n    title: string;\r\n    value: number;\r\n    trend?: number;\r\n    icon: string;\r\n    variant: keyof typeof badgeVariants;\r\n    positive?: boolean;\r\n}\r\n\r\nexport interface IPatrolDuration {\r\n    duration: number;\r\n}\r\n\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\admin-sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\alert-custom.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\alert-defect.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'defectStatus' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used. Allowed unused vars must match /^_/u.","line":33,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AspectRatio' is defined but never used. Allowed unused vars must match /^_/u.","line":46,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deleteExistingImages' is defined but never used. Allowed unused args must match /^_/u.","line":299,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":299,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *   คอมโพเนนต์ AlertDefect ใช้สำหรับแสดง Alert ที่เกี่ยวกับการรายงาน, แก้ไข หรือ แจ้งปัญหาได้โดยมีการแสดงรายละเอียดของปัญหาและสามารถแนบไฟล์รูปภาพได้\r\n * Input:\r\n * - defect: ข้อมูลของปัญหา\r\n * - item: ข้อมูลของรายการ\r\n * - type: ประเภทของ Alert ที่ต้องการแสดง\r\n * - patrolResults: ข้อมูลของผลการตรวจสอบ\r\n * - result: ข้อมูลของผลการตรวจสอบ\r\n * - response: ฟังก์ชันที่รับค่า IDefect จากการสร้างหรือแก้ไขปัญหา\r\n * Output:\r\n * - JSX ของ AlertDefect ที่มีหัวข้อ, คำอธิบาย, 2 ปุ่ม Action และสามารถแนบไฟล์รูปภาพได้\r\n **/\r\n\r\n\"use client\";\r\n\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { defectStatus, IDefect } from \"@/app/type\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogTrigger,\r\n  AlertDialogContent,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogDescription,\r\n  AlertDialogCancel,\r\n  AlertDialogAction,\r\n  AlertDialogFooter,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { IItem, IItemZone, IPatrolResult } from \"@/app/type\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { fetchData, getInitials } from \"@/lib/utils\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"./ui/tooltip\";\r\nimport { Skeleton } from \"./ui/skeleton\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\";\r\nimport { UserTooltip } from \"./user-tooltip\";\r\ninterface IAlertDefect {\r\n  userId?: number;\r\n  defect?: IDefect;\r\n  item?: IItem;\r\n  type: \"edit\" | \"report\" | \"resolve\" | \"edit-resolve\";\r\n  patrolResults?: IPatrolResult[];\r\n  result?: {\r\n    id: number;\r\n    inspectorId: number;\r\n    itemId: number;\r\n    zoneId: number;\r\n    status: boolean;\r\n    supervisorId?: number;\r\n  };\r\n  response: (defect: IDefect) => void;\r\n}\r\n\r\nexport default function AlertDefect({\r\n  userId,\r\n  defect,\r\n  item,\r\n  type,\r\n  patrolResults,\r\n  result,\r\n  response,\r\n}: IAlertDefect) {\r\n  const disabled = false;\r\n  const a = useTranslations(\"Alert\");\r\n  const t = useTranslations(\"General\");\r\n  const z = useTranslations(\"Zone\");\r\n\r\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\r\n  const [defectDescription, setDefectDescription] = useState<string>(\"\");\r\n\r\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n  const [isAlertDefectOpen, setAlertDefectOpen] = useState(true);\r\n\r\n  const [detailError, setDetailError] = useState<string | null>(null);\r\n  const [fileError, setFileError] = useState<string | null>(null);\r\n\r\n  const closeAlertDefect = () => {\r\n    setAlertDefectOpen(false);\r\n  };\r\n\r\n  const openAlertDefect = () => {\r\n    setAlertDefectOpen(true);\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setIsAlertOpen(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setIsAlertOpen(false);\r\n  };\r\n\r\n  const handleDefectDescription = (\r\n    event: React.ChangeEvent<HTMLTextAreaElement>\r\n  ) => {\r\n    const { value } = event.target;\r\n    setDefectDescription(value);\r\n  };\r\n\r\n  // ตรวจสอบว่าไฟล์ทั้งหมดเป็นไฟล์รูปภาพ\r\n  const validImageTypes = [\"image/jpeg\", \"image/png\", \"image/jpg\", \"image/gif\"];\r\n\r\n  const handleCreateDefect = async (\r\n    name: string,\r\n    description: string,\r\n    type: string,\r\n    userId: number,\r\n    patrolResultId: number | null,\r\n    supervisorId: number,\r\n    files: File[]\r\n  ) => {\r\n    setDetailError(null);\r\n    setFileError(null);\r\n    if (!description || !files || files?.length === 0) {\r\n      setDetailError(!description ? a(\"ReportDefectErrorMissingDetail\") : null);\r\n      setFileError(\r\n        !files || files?.length === 0\r\n          ? a(\"ReportDefectErrorMissingImage\")\r\n          : null\r\n      );\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"ReportDefectMissingField\"),\r\n        description:\r\n          (!description && !files) || files?.length === 0\r\n            ? a(\"ReportDefectMissingDetailAndImage\")\r\n            : !description\r\n            ? a(\"ReportDefectMissingDetail\")\r\n            : a(\"ReportDefectMissingImage\"),\r\n      });\r\n      return;\r\n    }\r\n    const invalidFiles = files.filter(\r\n      (file) => !validImageTypes.includes(file.type)\r\n    );\r\n\r\n    if (invalidFiles.length > 0) {\r\n      setFileError(a(\"ReportDefectErrorInvalidImageMessage\"));\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"ReportDefectErrorInvalidImage\"),\r\n        description: a(\"ReportDefectErrorInvalidImageMessage\"),\r\n      });\r\n      return;\r\n    }\r\n    const defectData = {\r\n      name,\r\n      description,\r\n      type,\r\n      defectUserId: userId?.toString(),\r\n      patrolResultId: patrolResultId.toString(),\r\n      supervisorId: supervisorId.toString(),\r\n    };\r\n\r\n    try {\r\n      const createDefect = await fetchData(\r\n        \"post\",\r\n        \"/defect\",\r\n        true,\r\n        defectData,\r\n        false\r\n      );\r\n      const id = createDefect.id;\r\n\r\n      // ส่งไฟล์ใน request แยก\r\n      const formData = new FormData();\r\n      formData.append(\"status\", \"reported\");\r\n      files.forEach((file) => formData.append(\"imageFiles\", file));\r\n\r\n      const defectImage = await fetchData(\r\n        \"put\",\r\n        `/defect/${id}/upload`,\r\n        true,\r\n        formData,\r\n        true // เป็น FormData\r\n      );\r\n      if (defectImage) {\r\n        toast({\r\n          variant: \"success\",\r\n          title: a(\"ReportDefectTitle\"),\r\n          description: a(\"ReportDefectDescription\"),\r\n        });\r\n        closeAlertDefect();\r\n      }\r\n\r\n      createDefect.images = defectImage.images;\r\n      createDefect.images = defectImage.images;\r\n      response(createDefect);\r\n      setDetailError(null);\r\n      setFileError(null);\r\n      setSelectedFiles(null);\r\n      setDefectDescription(null);\r\n    } catch (error) {\r\n      console.error(\"Error creating defect:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEditDefect = async (\r\n    id: number,\r\n    name: string,\r\n    description: string,\r\n    type: string,\r\n    userId: number,\r\n    patrolResultId: number | null,\r\n    supervisorId: number,\r\n    files: File[]\r\n  ) => {\r\n    setDetailError(null);\r\n    setFileError(null);\r\n    if (!description || !files || files?.length === 0) {\r\n      setDetailError(!description ? a(\"ReportDefectErrorMissingDetail\") : null);\r\n      setFileError(\r\n        !files || files?.length === 0\r\n          ? a(\"ReportDefectErrorMissingImage\")\r\n          : null\r\n      );\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"ReportDefectMissingField\"),\r\n        description:\r\n          (!description && !files) || files?.length === 0\r\n            ? a(\"ReportDefectMissingDetailAndImage\")\r\n            : !description\r\n            ? a(\"ReportDefectMissingDetail\")\r\n            : a(\"ReportDefectMissingImage\"),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const invalidFiles = files.filter(\r\n      (file) => !validImageTypes.includes(file.type)\r\n    );\r\n\r\n    if (invalidFiles.length > 0) {\r\n      setFileError(a(\"ReportDefectErrorInvalidImageMessage\"));\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"ReportDefectErrorInvalidImage\"),\r\n        description: a(\"ReportDefectErrorInvalidImageMessage\"),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n\r\n    formData.append(\"name\", name);\r\n    formData.append(\"description\", description);\r\n    formData.append(\"type\", type);\r\n    formData.append(\"status\", \"reported\");\r\n    formData.append(\"defectUserId\", userId.toString());\r\n    formData.append(\"supervisorId\", supervisorId.toString());\r\n    formData.append(\"deleteExistingImages\", \"true\");\r\n\r\n    files?.forEach((file) => {\r\n      formData.append(\"imageFiles\", file);\r\n    });\r\n    try {\r\n      const updateDefect = await fetchData(\r\n        \"put\",\r\n        `/defect/${id}`,\r\n        true,\r\n        formData,\r\n        true\r\n      );\r\n\r\n      if (updateDefect) {\r\n        toast({\r\n          variant: \"success\",\r\n          title: a(\"EditReportDefectTitle\"),\r\n          description: a(\"EditReportDefectDescription\"),\r\n        });\r\n        closeAlertDefect();\r\n      }\r\n      setDetailError(null);\r\n      setFileError(null);\r\n      setSelectedFiles(null);\r\n      setDefectDescription(null);\r\n      response(updateDefect);\r\n    } catch (error) {\r\n      console.error(\"Error edit defect:\", error);\r\n    }\r\n  };\r\n\r\n  const handleResolveDefect = async (\r\n    id: number,\r\n    files: File[],\r\n    type: string,\r\n    deleteExistingImages: boolean\r\n  ) => {\r\n    setDetailError(null);\r\n    setFileError(null);\r\n    if (!files || files?.length === 0) {\r\n      setFileError(\r\n        !files || files?.length === 0\r\n          ? a(\"ReportDefectErrorMissingImage\")\r\n          : null\r\n      );\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"ReportDefectMissingField\"),\r\n        description: a(\"ReportDefectMissingImage\"),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const invalidFiles = files.filter(\r\n      (file) => !validImageTypes.includes(file.type)\r\n    );\r\n\r\n    if (invalidFiles.length > 0) {\r\n      setFileError(a(\"ReportDefectErrorInvalidImageMessage\"));\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"ReportDefectErrorInvalidImage\"),\r\n        description: a(\"ReportDefectErrorInvalidImageMessage\"),\r\n      });\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n\r\n    formData.append(\"status\", \"resolved\");\r\n    formData.append(\"defectUserId\", defect.userId.toString());\r\n    formData.append(\"supervisorId\", defect.supervisor.id.toString());\r\n    formData.append(\"deleteExistingImages\", \"true\");\r\n    files?.forEach((file) => {\r\n      formData.append(\"imageFiles\", file);\r\n    });\r\n\r\n    try {\r\n      const resolveDefect = await fetchData(\r\n        \"put\",\r\n        `/defect/${id}`,\r\n        true,\r\n        formData,\r\n        true\r\n      );\r\n      if (resolveDefect) {\r\n        if (type === \"resolve\") {\r\n          toast({\r\n            variant: \"success\",\r\n            title: a(\"DefectResolveTitle\"),\r\n            description: a(\"DefectResolveDescription\"),\r\n          });\r\n        }\r\n        if (type === \"edit\") {\r\n          toast({\r\n            variant: \"success\",\r\n            title: a(\"EditDefectResolveTitle\"),\r\n            description: a(\"EditDefectResolveDescription\"),\r\n          });\r\n        }\r\n        closeAlertDefect();\r\n      }\r\n      setDetailError(null);\r\n      setFileError(null);\r\n      setSelectedFiles(null);\r\n      response(resolveDefect);\r\n    } catch (error) {\r\n      console.error(\"Error resolve defect:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSendClick = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    handleOpenDialog();\r\n  };\r\n\r\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files) {\r\n      setSelectedFiles([\r\n        ...(selectedFiles ?? []),\r\n        ...Array.from(event.target.files),\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const handleRemoveFile = (index: number) => {\r\n    setSelectedFiles((prevFiles) => prevFiles.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n    const files = event.dataTransfer.files;\r\n    if (files && files.length > 0) {\r\n      setSelectedFiles([...selectedFiles, ...Array.from(files)]);\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    document.getElementById(\"file-input\")?.click();\r\n  };\r\n\r\n  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  if (!patrolResults && type === \"report\") {\r\n    return <Skeleton />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <AlertDialog>\r\n        <AlertDialogTrigger disabled={disabled}>\r\n          <Button\r\n            variant={\r\n              type === \"resolve\" || type === \"edit-resolve\"\r\n                ? \"primary\"\r\n                : type === \"edit\"\r\n                ? \"primary\"\r\n                : \"outline\"\r\n            }\r\n            size={\"lg\"}\r\n            onClick={() => openAlertDefect()}\r\n          >\r\n            <span className=\"material-symbols-outlined pr-2 \">\r\n              {type === \"edit\" || type === \"edit-resolve\"\r\n                ? \"edit\"\r\n                : type === \"resolve\"\r\n                ? \"published_with_changes\"\r\n                : \"campaign\"}\r\n            </span>\r\n            {t(\r\n              type === \"edit\" || type === \"edit-resolve\"\r\n                ? \"Edit\"\r\n                : type === \"resolve\"\r\n                ? \"Resolve\"\r\n                : \"Report\"\r\n            )}\r\n          </Button>\r\n        </AlertDialogTrigger>\r\n        {isAlertDefectOpen && (\r\n          <AlertDialogContent className=\"sm:w-[90%] xl:w-[60%]\">\r\n            <AlertDialogHeader>\r\n              <AlertDialogTitle className=\"text-2xl font-semibold\">\r\n                {t(\r\n                  type === \"edit\"\r\n                    ? \"EditDefect\"\r\n                    : type === \"resolve\"\r\n                    ? \"ResolveDefect\"\r\n                    : type === \"edit-resolve\"\r\n                    ? \"EditResolveDefect\"\r\n                    : \"ReportDefect\"\r\n                )}\r\n              </AlertDialogTitle>\r\n              <AlertDialogDescription className=\"flex items-start justify-start text-lg text-input\">\r\n                {t(\r\n                  type === \"edit\"\r\n                    ? \"PleaseProvideDetailsForTheDefect\"\r\n                    : type === \"resolve\"\r\n                    ? \"PleaseProvideResolvedTheDefect\"\r\n                    : type === \"edit-resolve\"\r\n                    ? \"EditResolvedTheDefect\"\r\n                    : \"PleaseProvideDetailsForTheDefect\"\r\n                )}\r\n              </AlertDialogDescription>\r\n              <div className=\"flex flex-col justify-start\">\r\n                <p className=\"font-semibold\">\r\n                  {type === \"report\" ? item.name : defect.name}\r\n                </p>\r\n                <div className=\"flex items-center\">\r\n                  <span className=\"material-symbols-outlined text-2xl me-2\">\r\n                    location_on\r\n                  </span>\r\n                  <p className=\"font-semibold me-2\">{t(\"Zone\")}</p>\r\n                  <p>\r\n                    <p>\r\n                      {type === \"report\"\r\n                        ? item.itemZones.map((itemZone: IItemZone) => {\r\n                            return result.zoneId === itemZone.zone.id\r\n                              ? z(itemZone.zone.name)\r\n                              : null;\r\n                          })\r\n                        : z(defect.patrolResult.itemZone.zone.name)}\r\n                    </p>\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"flex items-center\">\r\n                  <span className=\"material-symbols-outlined text-2xl me-2\">\r\n                    engineering\r\n                  </span>\r\n\r\n                  <p className=\"font-semibold me-2\">{t(\"supervisor\")}</p>\r\n                  {type === \"report\" ? (\r\n                    item.itemZones.map((itemZone: IItemZone) => {\r\n                      if (result.zoneId === itemZone.zone.id) {\r\n                        const patrolResult = patrolResults.find(\r\n                          (patrolResult: IPatrolResult) =>\r\n                            patrolResult.zoneId === itemZone.zone.id\r\n                        );\r\n                        const supervisor = patrolResult?.supervisor;\r\n                        return (\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <UserTooltip user={supervisor}>\r\n                              <Avatar className=\"custom-shadow h-[35px] w-[35px]\">\r\n                                <AvatarImage\r\n                                  src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${supervisor.profile.image?.path}`}\r\n                                />\r\n                                <AvatarFallback id={supervisor.id.toString()}>\r\n                                  {getInitials(supervisor.profile.name)}\r\n                                </AvatarFallback>\r\n                              </Avatar>\r\n                            </UserTooltip>\r\n                            <span className=\"text-card-foreground text-lg truncate\">\r\n                              {supervisor.profile.name}\r\n                            </span>\r\n                          </div>\r\n                        );\r\n                      }\r\n                      return null;\r\n                    })\r\n                  ) : (\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <UserTooltip user={defect.supervisor}>\r\n                        <Avatar className=\"custom-shadow h-[35px] w-[35px]\">\r\n                          <AvatarImage\r\n                            src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${defect.supervisor.profile.image?.path}`}\r\n                          />\r\n                          <AvatarFallback id={defect.supervisor.id.toString()}>\r\n                            {getInitials(defect.supervisor.profile.name)}\r\n                          </AvatarFallback>\r\n                        </Avatar>\r\n                      </UserTooltip>\r\n\r\n                      <span className=\"text-card-foreground text-lg truncate\">\r\n                        {defect.supervisor.profile.name}\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </AlertDialogHeader>\r\n\r\n            {type === \"resolve\" || type === \"edit-resolve\" ? null : (\r\n              <div className=\"flex flex-col gap-1\">\r\n                <div className=\"text-sm font-semibold\">{t(\"Detail\")}</div>\r\n                <Textarea\r\n                  onChange={handleDefectDescription}\r\n                  className=\"h-[100px] bg-secondary border-none\"\r\n                  placeholder={`${t(\"Detail\")}...`}\r\n                />\r\n                {detailError && (\r\n                  <p className=\"text-sm font-light text-destructive italic mt-1\">\r\n                    {detailError}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"flex flex-col gap-1 justify-between w-full\">\r\n              <div className=\"text-sm font-semibold\">{t(\"Image\")}</div>\r\n              <div className=\"grid grid-cols-2 pr-2 gap-4\">\r\n                <div className=\"flex flex-col gap-1 flex-1 rounded-md\">\r\n                  <div\r\n                    className=\"flex h-full w-full rounded-[10px] bg-secondary justify-center items-center\"\r\n                    onDragOver={handleDragOver}\r\n                    onDrop={handleDrop}\r\n                  >\r\n                    <div className=\"flex p-8 flex-col items-center justify-center\">\r\n                      <span className=\"material-symbols-outlined text-[48px] font-normal text-primary\">\r\n                        upload\r\n                      </span>\r\n                      <div className=\"text-center mt-2\">\r\n                        {t(\"Drag&DropFile\")}\r\n                      </div>\r\n                      <div className=\"text-center mt-1\">{t(\"Or\")}</div>\r\n                      <div className=\"mt-2\">\r\n                        <input\r\n                          type=\"file\"\r\n                          id=\"file-input\"\r\n                          style={{ display: \"none\" }}\r\n                          multiple\r\n                          onChange={handleFileChange}\r\n                        />\r\n                        <Button\r\n                          variant={\"outline\"}\r\n                          className=\"custom-shadow\"\r\n                          onClick={handleButtonClick}\r\n                        >\r\n                          <span className=\"material-symbols-outlined mr-1\">\r\n                            browser_updated\r\n                          </span>\r\n                          {t(\"Browse\")}\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <ScrollArea className=\"sm:h-64 overflow-y-auto gap-5 rounded-md flex-1\">\r\n                  <div className=\"flex flex-col gap-2 w-full\">\r\n                    {selectedFiles?.map((file, index) => (\r\n                      <div\r\n                        key={index}\r\n                        className=\" flex flex-row justify-between px-4 py-2 w-full bg-secondary rounded-md\"\r\n                      >\r\n                        <div className=\"flex flex-row gap-3\">\r\n                          <div className=\"flex flex-col justify-center items-center\">\r\n                            <span className=\"material-symbols-outlined text-card-foreground\">\r\n                              image\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"flex items-center gap-2 \">\r\n                            <div className=\"flex flex-col\">\r\n                              <TooltipProvider>\r\n                                <Tooltip>\r\n                                  <TooltipTrigger asChild>\r\n                                    <div className=\" truncate sm:w-56 xl:w-72\">\r\n                                      {file.name}\r\n                                    </div>\r\n                                  </TooltipTrigger>\r\n                                  <TooltipContent className=\"bg-foreground\">\r\n                                    <div className=\" w-full \">{file.name}</div>\r\n                                  </TooltipContent>\r\n                                </Tooltip>\r\n                              </TooltipProvider>\r\n\r\n                              <p className=\"text-sm font-semibold text-muted-foreground\">\r\n                                {(file.size / 1024).toFixed(2)} KB\r\n                              </p>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <Button\r\n                          variant={\"ghost\"}\r\n                          className=\"flex flex-col justify-center items-center w-[40px] h-[40px]\"\r\n                          onClick={() => handleRemoveFile(index)}\r\n                        >\r\n                          <span className=\"material-symbols-outlined text-destructive\">\r\n                            delete\r\n                          </span>\r\n                        </Button>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </ScrollArea>\r\n              </div>\r\n              {fileError && (\r\n                <p className=\"text-sm font-light text-destructive italic mt-1\">\r\n                  {fileError}\r\n                </p>\r\n              )}\r\n            </div>\r\n\r\n            <AlertDialogFooter>\r\n              <div className=\"flex items-end justify-end gap-[10px]\">\r\n                <AlertDialogCancel\r\n                  onClick={() => {\r\n                    setDetailError(null);\r\n                    setFileError(null);\r\n                    setSelectedFiles(null);\r\n                    setDefectDescription(null);\r\n                  }}\r\n                >\r\n                  {t(\"Cancel\")}\r\n                </AlertDialogCancel>\r\n                <AlertDialogAction\r\n                  onClick={(event) => {\r\n                    handleSendClick(event);\r\n                  }}\r\n                  className={\"bg-primary\"}\r\n                >\r\n                  <span className=\"material-symbols-outlined text-2xl me-2\">\r\n                    send\r\n                  </span>\r\n                  {t(\"Send\")}\r\n                </AlertDialogAction>\r\n              </div>\r\n            </AlertDialogFooter>\r\n\r\n            {isAlertOpen && (\r\n              <AlertCustom\r\n                title={\r\n                  type === \"report\"\r\n                    ? a(\"ReportDefectConfirmTitle\")\r\n                    : type === \"edit\"\r\n                    ? a(\"ReportEditConfirmTitle\")\r\n                    : type === \"edit-resolve\"\r\n                    ? a(\"ReportEditResolveConfirmTitle\")\r\n                    : a(\"ReportResolveConfirmTitle\")\r\n                }\r\n                description={\r\n                  type === \"report\"\r\n                    ? a(\"ReportDefectConfirmDescription\")\r\n                    : type === \"edit\"\r\n                    ? a(\"ReportEditConfirmDescription\")\r\n                    : type === \"edit-resolve\"\r\n                    ? a(\"ReportEditResolveConfirmDescription\")\r\n                    : a(\"ReportResolveConfirmDescription\")\r\n                }\r\n                primaryButtonText={t(\"Confirm\")}\r\n                primaryIcon=\"check\"\r\n                secondaryButtonText={t(\"Cancel\")}\r\n                backResult={(backResult) => {\r\n                  if (backResult) {\r\n                    switch (type) {\r\n                      case \"report\":\r\n                        handleCreateDefect(\r\n                          item.name,\r\n                          defectDescription,\r\n                          item.type,\r\n                          result.inspectorId || userId,\r\n                          patrolResults.find(\r\n                            (patrolResult: IPatrolResult) =>\r\n                              result.id === patrolResult.id\r\n                          )?.id || null,\r\n                          patrolResults.find(\r\n                            (patrolResult: IPatrolResult) =>\r\n                              result.zoneId === patrolResult.zoneId\r\n                          )?.supervisor.id || null,\r\n                          selectedFiles\r\n                        );\r\n                        break;\r\n\r\n                      case \"resolve\":\r\n                        handleResolveDefect(\r\n                          defect.id,\r\n                          selectedFiles,\r\n                          \"resolve\",\r\n                          false\r\n                        );\r\n                        break;\r\n\r\n                      case \"edit\":\r\n                        handleEditDefect(\r\n                          defect.id,\r\n                          defect.name,\r\n                          defectDescription,\r\n                          defect.type,\r\n                          defect.userId,\r\n                          defect.patrolResultId,\r\n                          defect.patrolResult.itemZone.zone.supervisor.id,\r\n                          selectedFiles\r\n                        );\r\n                        break;\r\n\r\n                      case \"edit-resolve\":\r\n                        handleResolveDefect(\r\n                          defect.id,\r\n                          selectedFiles,\r\n                          \"edit\",\r\n                          true\r\n                        );\r\n                        break;\r\n\r\n                      default:\r\n                        console.error(\"Invalid type\");\r\n                    }\r\n                  }\r\n                  handleCloseDialog();\r\n                }}\r\n              />\r\n            )}\r\n          </AlertDialogContent>\r\n        )}\r\n      </AlertDialog>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\badge-custom.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\checklist-dropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\dashboard-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\date-picker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\defect.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HoverCard' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HoverCardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":23,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'HoverCardTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *   คอมโพเนนต์ Defect ใช้สำหรับแสดงข้อมูลของ Defect ที่ได้รับจาก API\r\n * Input:\r\n * - defect: ข้อมูลของ Defect ที่ได้รับจาก API\r\n * Output:\r\n * - JSX ของ Defect ที่แสดงข้อมูลของ Defect ที่ได้รับจาก API\r\n **/\r\n\r\nimport React from \"react\";\r\nimport BadgeCustom from \"./badge-custom\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport {\r\n  formatTime,\r\n  getDefectStatusVariant,\r\n  getInitials,\r\n  getItemTypeVariant,\r\n} from \"@/lib/utils\";\r\nimport { IDefect, itemType } from \"@/app/type\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport {\r\n  HoverCard,\r\n  HoverCardContent,\r\n  HoverCardTrigger,\r\n} from \"@/components/ui/hover-card\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { UserTooltip } from \"./user-tooltip\";\r\n\r\nexport default function Defect({ defect }: { defect: IDefect }) {\r\n  const s = useTranslations(\"Status\");\r\n  const t = useTranslations(\"General\");\r\n  const z = useTranslations(\"Zone\");\r\n  const router = useRouter();\r\n  const locale = useLocale();\r\n  const { variant, iconName } = getDefectStatusVariant(defect.status);\r\n  const color = (type: itemType) => {\r\n    switch (type) {\r\n      case \"safety\":\r\n        return \"green\";\r\n      case \"environment\":\r\n        return \"primary\";\r\n      default:\r\n        return \"destructive\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`bg-card p-4 rounded-md custom-shadow border-l-8 border-${color(\r\n        defect.type\r\n      )} cursor-pointer`}\r\n      onClick={() => router.push(`/${locale}/defect/${defect.id}`)}\r\n    >\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center text-black-500 space-x-2\">\r\n          <span className=\"material-symbols-outlined text-muted-foreground cursor-default \">\r\n            schedule\r\n          </span>\r\n          <span className=\"font-semibold text-lg text-muted-foreground\">\r\n            {formatTime(defect.startTime, locale)}\r\n          </span>\r\n        </div>\r\n        <div>\r\n          <BadgeCustom\r\n            iconName={iconName}\r\n            showIcon={true}\r\n            showTime={false}\r\n            variant={variant}\r\n          >\r\n            {s(defect.status)}\r\n          </BadgeCustom>\r\n        </div>\r\n      </div>\r\n      <div className=\"my-2\">\r\n        {(() => {\r\n          const { variant, iconName } = getItemTypeVariant(defect.type);\r\n\r\n          return (\r\n            <BadgeCustom\r\n              showTime={false}\r\n              variant={variant}\r\n              iconName={iconName}\r\n              showIcon={true}\r\n              shape={\"square\"}\r\n            >\r\n              {s(defect.type)}\r\n            </BadgeCustom>\r\n          );\r\n        })()}\r\n      </div>\r\n      <div>\r\n        <span className=\"font-bold text-2xl text-card-foreground\">\r\n          {defect.name}\r\n        </span>\r\n      </div>\r\n\r\n      <div className=\"flex items-center gap-2\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <span className=\"material-symbols-outlined text-muted-foreground\">\r\n            location_on\r\n          </span>\r\n          <span className=\"font-bold text-lg text-muted-foreground ml-2\">\r\n            {t(\"Zone\")}\r\n          </span>\r\n          <span className=\"text-card-foreground text-lg ml-4\">\r\n            {z(defect.patrolResult.itemZone.zone.name)}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex items-center gap-2\">\r\n        <span className=\"material-symbols-outlined text-muted-foreground\">\r\n          person_search\r\n        </span>\r\n        <span className=\"font-bold text-lg text-muted-foreground\">\r\n          {t(\"inspector\")}\r\n        </span>\r\n\r\n            <div className=\"flex items-center ps-2 p-2\">\r\n              <UserTooltip user={defect.user}>\r\n                <Avatar className=\"custom-shadow ms-[-10px] me-2.5\">\r\n                  <AvatarImage\r\n                    src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${defect.user.profile.image?.path}`}\r\n                  />\r\n                  <AvatarFallback id={defect.user.id.toString()}>\r\n                    {getInitials(defect.user.profile.name)}\r\n                  </AvatarFallback>\r\n                </Avatar>\r\n              </UserTooltip>\r\n              <p className=\"text-[20px]\">{defect.user.profile.name}</p>\r\n            </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\donut-graph.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\filter-date.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'field' is defined but never used. Allowed unused args must match /^_/u.","line":77,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":37,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\gauge-graph.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'payload' is defined but never used. Allowed unused args must match /^_/u.","line":107,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport { TrendingDown, TrendingUp } from \"lucide-react\";\r\nimport { Label, PolarRadiusAxis, RadialBar, RadialBarChart } from \"recharts\";\r\n\r\nimport { CardContent } from \"@/components/ui/card\";\r\nimport {\r\n  ChartConfig,\r\n  ChartContainer,\r\n  ChartLegend,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n} from \"@/components/ui/chart\";\r\nimport { IPatrolCompletionRate } from \"@/app/type\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport NotFound from \"@/components/not-found\";\r\n\r\nexport function GaugeGraph({\r\n  chartData,\r\n  percent,\r\n  trend,\r\n}: IPatrolCompletionRate) {\r\n  const d = useTranslations(\"Dashboard\");\r\n  const isPositiveTrend = trend >= 0;\r\n\r\n  const chartConfig = {\r\n    noDefect: {\r\n      label: d(\"NoDefect\"),\r\n      color: \"hsl(var(--green))\",\r\n    },\r\n    withDefect: {\r\n      label: d(\"WithDefect\"),\r\n      color: \"hsl(var(--destructive))\",\r\n    },\r\n  } satisfies ChartConfig;\r\n\r\n  if (!chartData || chartData.length === 0) {\r\n    return (\r\n      <div className=\"flex flex-col items-center justify-center h-64\">\r\n        <NotFound\r\n          icon=\"monitoring\"\r\n          title=\"NoDataAvailable\"\r\n          description=\"NoDataAvailableDescription\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col\">\r\n      <CardContent className=\"flex flex-1 items-center pt-2\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          className=\"mx-auto aspect-video w-full h-[360px]\"\r\n        >\r\n          <RadialBarChart\r\n            data={chartData}\r\n            endAngle={180}\r\n            innerRadius={160}\r\n            outerRadius={240}\r\n          >\r\n            <ChartTooltip\r\n              cursor={false}\r\n              content={<ChartTooltipContent hideLabel />}\r\n            />\r\n            <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\r\n              <Label\r\n                content={({ viewBox }) => {\r\n                  if (viewBox && \"cx\" in viewBox && \"cy\" in viewBox) {\r\n                    return (\r\n                      <text x={viewBox.cx} y={viewBox.cy} textAnchor=\"middle\">\r\n                        <tspan\r\n                          x={viewBox.cx}\r\n                          y={(viewBox.cy || 0) - 36}\r\n                          className=\"fill-card-foreground text-[48px] font-bold hover:cursor-pointer\"\r\n                        >\r\n                          {percent && percent > 0 ? percent.toFixed(2) : 0}%\r\n                        </tspan>\r\n                        <tspan\r\n                          x={viewBox.cx}\r\n                          y={(viewBox.cy || 0) + 8}\r\n                          className=\"text-base fill-muted-foreground\"\r\n                        >\r\n                          {d(\"NoDefect\")}\r\n                        </tspan>\r\n                      </text>\r\n                    );\r\n                  }\r\n                }}\r\n              />\r\n            </PolarRadiusAxis>\r\n            <RadialBar\r\n              dataKey=\"withDefect\"\r\n              stackId=\"a\"\r\n              cornerRadius={5}\r\n              fill=\"var(--color-withDefect)\"\r\n              className=\"stroke-transparent stroke-2 hover:cursor-pointer\"\r\n            />\r\n            <RadialBar\r\n              dataKey=\"noDefect\"\r\n              fill=\"var(--color-noDefect)\"\r\n              stackId=\"a\"\r\n              cornerRadius={5}\r\n              className=\"stroke-transparent stroke-2 hover:cursor-pointer\"\r\n            />\r\n            <ChartLegend\r\n              content={({ payload }) => (\r\n                <div className=\"flex flex-col gap-2 items-center\">\r\n                  <div className=\"flex gap-4 justify-center hover:cursor-pointer\">\r\n                    <div\r\n                      key={`legend-item-1`}\r\n                      className=\"flex items-center gap-1\"\r\n                    >\r\n                      <span\r\n                        className=\"inline-block w-3 h-3 rounded-sm\"\r\n                        style={{ backgroundColor: chartConfig.noDefect.color }}\r\n                      ></span>\r\n                      <span className=\"text-sm\">\r\n                        {chartConfig.noDefect.label}\r\n                      </span>\r\n                    </div>\r\n                    <div\r\n                      key={`legend-item-2`}\r\n                      className=\"flex items-center gap-1\"\r\n                    >\r\n                      <span\r\n                        className=\"inline-block w-3 h-3 rounded-sm\"\r\n                        style={{\r\n                          backgroundColor: chartConfig.withDefect.color,\r\n                        }}\r\n                      ></span>\r\n                      <span className=\"text-sm\">\r\n                        {chartConfig.withDefect.label}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2 text-sm font-semibold leading-none hover:cursor-text\">\r\n                    {d(\"Trending\")}\r\n                    {isPositiveTrend ? d(\"Up\") : d(\"Down\")}\r\n                    <span\r\n                      className={\r\n                        isPositiveTrend ? \"text-green\" : \"text-destructive\"\r\n                      }\r\n                    >\r\n                      {trend.toFixed(2)}%\r\n                    </span>\r\n                    {d(\"ThisMonth\")}\r\n                    {isPositiveTrend ? (\r\n                      <TrendingUp className=\"h-4 w-4\" />\r\n                    ) : (\r\n                      <TrendingDown className=\"h-4 w-4\" />\r\n                    )}\r\n                  </div>\r\n                  <div className=\"leading-none text-muted-foreground text-sm hover:cursor-text\">\r\n                    {d(\"PatrolCompletionRateDescription\")}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              className=\"-translate-y-2 flex-wrap gap-2 [&>*]:basis-1/4 [&>*]:justify-center\"\r\n            />\r\n          </RadialBarChart>\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\heat-map.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\language-select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\line-graph.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\map.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\mode-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\notification.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardDescription' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardFooter' is defined but never used. Allowed unused vars must match /^_/u.","line":28,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":56}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *   คอมโพเนนต์ Notification ใช้สำหรับแสดงและจัดการรายการแจ้งเตือนของผู้ใช้งาน รวมถึงการเปลี่ยนสถานะการแจ้งเตือน \r\n *   และแสดงรายการแจ้งเตือนล่าสุดในรูปแบบ Dropdown\r\n *\r\n * Input:\r\n * - ไม่มี props ที่รับเข้ามาโดยตรง\r\n * - ใช้ข้อมูลแจ้งเตือน (notifications) และข้อมูลผู้ใช้ (user) ที่ดึงมาจาก API\r\n *\r\n * Output:\r\n * - JSX ของ Dropdown ที่แสดงรายการแจ้งเตือนของผู้ใช้งาน\r\n * - Dropdown แสดงรายการแจ้งเตือนล่าสุดสูงสุด 8 รายการ\r\n * - ปุ่ม \"Delete All Notifications\" สำหรับลบรายการแจ้งเตือนทั้งหมด\r\n * - ปุ่ม \"Mark All As Read\" สำหรับเปลี่ยนสถานะแจ้งเตือนทั้งหมดให้เป็น \"อ่านแล้ว\"\r\n * - การคลิกแจ้งเตือนเปลี่ยนสถานะเป็น \"อ่านแล้ว\" และนำทางไปยัง URL ถ้ามี\r\n**/\r\n\r\n'use client'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuItem,\r\n    DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\nimport { Button } from '@/components/ui/button'\r\nimport { useLocale, useTranslations } from 'next-intl'\r\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { INotification, notificationType, IUser } from '@/app/type'\r\nimport { fetchData, formatTime, getNotificationToast } from '@/lib/utils'\r\nimport { useSocket } from '@/components/socket-provider'\r\nimport BadgeCustom from '@/components/badge-custom'\r\nimport { useRouter } from 'next/navigation'\r\nimport { timeAgo } from '@/lib/utils'\r\nimport { ScrollArea } from '@/components/ui/scroll-area'\r\nimport { toast } from '@/hooks/use-toast'\r\nimport {\r\n    SwipeableList,\r\n    SwipeableListItem,\r\n    SwipeAction,\r\n    TrailingActions,\r\n} from 'react-swipeable-list';\r\nimport 'react-swipeable-list/dist/styles.css';\r\n\r\nexport default function Notification() {\r\n    const t = useTranslations('General'); // ฟังก์ชันแปลข้อความจาก 'General'\r\n    const s = useTranslations(\"Status\");\r\n    const d = useTranslations('DateTime');\r\n    const n = useTranslations('Notification');\r\n    const a = useTranslations('Alert');\r\n    const z = useTranslations('Zone');\r\n\r\n    const prevUnreadCountRef = useRef<number>(0);\r\n    const locale = useLocale()\r\n    const [allNotifications, setAllNotifications] = useState<INotification[]>([])\r\n    const [user, setUser] = useState<IUser>()\r\n    const { socket, isConnected } = useSocket()\r\n    const [unreadCount, setUnreadCount] = useState(0);\r\n    const isMounted = useRef(false);\r\n\r\n    const router = useRouter()\r\n\r\n    function isValidDateFormat(date: string): boolean {\r\n        const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/;\r\n        return iso8601Regex.test(date) && !isNaN(Date.parse(date));\r\n    }\r\n\r\n    function formatMessage(message) {\r\n        const [key, ...dynamicParts] = message.split('-');\r\n        let content = dynamicParts.join('-');\r\n        if (isValidDateFormat(content)) {\r\n            content = formatTime(content, locale)\r\n        }\r\n        else if (content) {\r\n            content = z(content)\r\n        }\r\n\r\n        return { key, content };\r\n    }\r\n\r\n    const fetchNotifications = async () => {\r\n        try {\r\n            const data = await fetchData(\"get\", \"/notifications\", true);\r\n            if (data.status === 401) {\r\n                window.location.reload()\r\n                router.push(`/${locale}/refresh`)\r\n            }\r\n            setAllNotifications(data);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch notifications:\", error);\r\n        }\r\n    };\r\n\r\n    const fetchUser = async () => {\r\n        try {\r\n            const data = await fetchData(\"get\", \"/user\", true);\r\n            setUser(data);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch profile:\", error);\r\n        }\r\n    };\r\n\r\n    const updateNotification = async (id: number) => {\r\n        try {\r\n            await fetchData(\"put\", `/notification/${id}`, true);\r\n        } catch (error) {\r\n            console.error(\"Failed to update notification:\", error);\r\n        }\r\n    };\r\n\r\n    const removeNotification = async (id: number) => {\r\n        try {\r\n            setAllNotifications((prevNotifications) =>\r\n                prevNotifications.filter((notification) => notification.id !== id)\r\n            );\r\n            await fetchData(\"delete\", `/notification/${id}`, true);\r\n\r\n        } catch (error) {\r\n            console.error(\"Failed to delete notification:\", error);\r\n        }\r\n    };\r\n\r\n    const removeAllNotifications = async () => {\r\n        try {\r\n            const response = await fetchData(\"delete\", `/notifications`, true);\r\n            return response\r\n        } catch (error) {\r\n            console.error(\"Failed to delete notification:\", error);\r\n        }\r\n    };\r\n\r\n    const handleNotificationClick = (notification: INotification) => {\r\n        if (!notification.read) {\r\n            setAllNotifications(prevNotifications =>\r\n                prevNotifications.map(n =>\r\n                    n.id === notification.id ? { ...n, read: true } : n\r\n                )\r\n            );\r\n            updateNotification(notification.id); // ถ้ายังไม่ได้อ่านให้ update สถานะ\r\n        }\r\n        if (notification.url) {\r\n            router.push(`/${locale}/${notification.url}`); // ถ้ามี URL ให้ redirect ไป\r\n        }\r\n    };\r\n\r\n    const handleRemoveAllNotifications = async () => {\r\n        removeAllNotifications();\r\n        setAllNotifications([]);\r\n        toast({\r\n            variant: 'success',\r\n            title: a(\"DeleteAllNotificationTitle\"),\r\n            description: a(\"DeleteAllNotificationDescription\"),\r\n        });\r\n    };\r\n\r\n    const markAllAsRead = async () => {\r\n        try {\r\n            await fetchData(\"put\", \"/notifications/mark-all-read\", true); // เรียก API ที่สร้างใน Backend\r\n            setAllNotifications(prevNotifications =>\r\n                prevNotifications.map(n => ({ ...n, read: true }))\r\n            );\r\n        } catch (error) {\r\n            console.error(\"Failed to mark all notifications as read\", error);\r\n        }\r\n    };\r\n\r\n    const getRecentNotifications = () => {\r\n        // แบ่งแจ้งเตือนเป็น 2 กลุ่ม: ที่ยังไม่ได้อ่านและที่อ่านแล้ว\r\n        const unreadNotifications = allNotifications.filter(n => !n.read).sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\r\n        const readNotifications = allNotifications.filter(n => n.read).sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\r\n\r\n        // ดึง 8 แจ้งเตือนล่าสุด\r\n        const recentNotifications = [...unreadNotifications, ...readNotifications].slice(0, 8);\r\n\r\n        return recentNotifications;\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchNotifications();\r\n        fetchUser();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!isMounted.current) {\r\n            isMounted.current = true;\r\n            return;\r\n        }\r\n\r\n        if (socket && isConnected && user?.id) {\r\n            socket.emit('join_room', user.id);\r\n            // ฟังก์ชันรับ event 'new_notification'\r\n            socket.on('new_notification', (data: INotification) => {\r\n                setAllNotifications(prev => [...prev, data].sort((a, b) => \r\n                    new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\r\n                ));\r\n                const notification = formatMessage(data.message)\r\n                const toastData = getNotificationToast(notification.key)\r\n\r\n                if (toastData) {\r\n                    toast({\r\n                        variant: toastData.variant,\r\n                        title: a(toastData.title),\r\n                        description: a(toastData.description, { content: notification.content }),\r\n                    });\r\n                } else {\r\n                    console.error(`Notification not found for key: ${notification.key}`);\r\n                }\r\n            });\r\n\r\n            return () => {\r\n                socket.off('new_notification');\r\n            };\r\n        }\r\n        fetchNotifications();\r\n    }, [socket, isConnected, user?.id]);\r\n\r\n    useEffect(() => {\r\n        setUnreadCount(allNotifications.filter(notification => !notification.read).length);\r\n    }, [allNotifications]);\r\n\r\n    useEffect(() => {\r\n        const prevUnreadCount = prevUnreadCountRef.current;\r\n        // ตรวจสอบว่า unreadCount ปัจจุบัน > 0 และก่อนหน้าเป็น 0\r\n        if (unreadCount > 0 && prevUnreadCount === 0) {\r\n            toast({\r\n                variant: \"default\",\r\n                title: a(\"UnreadNotificationTitle\", { count: unreadCount }),\r\n                description: a(\"UnreadNotificationDescription\"),\r\n            });\r\n        }\r\n        // อัปเดตค่า previousUnreadCount เป็นค่าปัจจุบัน\r\n        prevUnreadCountRef.current = unreadCount;\r\n    }, [unreadCount]);\r\n\r\n    const trailingActions = (id: number) => (\r\n        <TrailingActions>\r\n            <SwipeAction\r\n                destructive={true}\r\n                onClick={() => removeNotification(id)}\r\n            >\r\n                <div className=\"flex items-center justify-center gap-1 px-24 w-full h-[110px] bg-destructive text-card rounded-r-md\">\r\n                    <span className=\"material-symbols-outlined\">\r\n                        delete\r\n                    </span>\r\n                    <p className='text-lg font-semibold'>{t(\"Delete\")}</p>\r\n                </div>\r\n            </SwipeAction>\r\n        </TrailingActions>\r\n    );\r\n\r\n    return (\r\n        <DropdownMenu>\r\n            <DropdownMenuTrigger>\r\n                <Button variant='ghost' className=\"w-[45px] h-[45px] text-input relative\">\r\n                    <span className=\"material-symbols-outlined\">notifications</span>\r\n                    {unreadCount > 0 && (\r\n                        <span className=\"absolute top-2 right-2 h-2 w-2 rounded-full bg-primary\" />\r\n                    )}\r\n                </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent align=\"start\" className='p-0'>\r\n                <Card className=\"flex flex-col w-[480px] h-[580px] border-none px-6 py-4 gap-4\" >\r\n                    <CardHeader className='p-0 flex gap-0'>\r\n                        <CardTitle className='flex flex-col'>\r\n                            <div className='flex text-2xl w-full justify-between items-center'>\r\n                                {t('Notifications')}\r\n                                <DropdownMenu>\r\n                                    <DropdownMenuTrigger onClick={(e) => e.stopPropagation()}>\r\n                                        <Button variant=\"ghost\" className=\"w-[45px] h-[45px]\">\r\n                                            <span className=\"material-symbols-outlined items-center text-muted-foreground\">\r\n                                                more_vert\r\n                                            </span>\r\n                                        </Button>\r\n                                    </DropdownMenuTrigger>\r\n\r\n                                    <DropdownMenuContent align=\"end\" className=\"p-0\">\r\n                                        <DropdownMenuItem onClick={() => handleRemoveAllNotifications()}>\r\n                                            <h1 className='text-destructive'>{t(\"DeleteAllNotifications\")}</h1>\r\n                                        </DropdownMenuItem>\r\n                                    </DropdownMenuContent>\r\n                                </DropdownMenu>\r\n                            </div>\r\n                            <p className='p-0 text-base font-normal text-muted-foreground'>{t('YouHaveUnreadMessages', { count: unreadCount })}</p>\r\n                        </CardTitle>\r\n                    </CardHeader>\r\n                    <div className='h-full overflow-y-auto flex flex-col gap-6'>\r\n                        <ScrollArea className=\"flex-1 p-0 pr-4\">\r\n                            <SwipeableList style={{ overflow: 'visible' }}>\r\n                                {getRecentNotifications().map((notification) => {\r\n                                    const { key, content } = formatMessage(notification.message);\r\n                                    return (\r\n                                        <SwipeableListItem\r\n                                            key={notification.id}\r\n                                            trailingActions={trailingActions(notification.id)}>\r\n                                            <Button\r\n                                                key={notification.id}\r\n                                                variant={'ghost'}\r\n                                                className=\"justify-between items-center w-full h-fit gap-6 px-6 py-4 truncate mb-4\"\r\n                                                onClick={() => handleNotificationClick(notification)}\r\n                                            >\r\n                                                <span className={`h-3 w-3 rounded-full ${notification.read ? 'bg-input' : 'bg-primary'}`} />\r\n                                                <div className=\"flex flex-col justify-start w-full truncate gap-1\">\r\n                                                    <textarea\r\n                                                        className=\"text-sm font-normal text-card-foreground text-start line-clamp-2 bg-transparent resize-none outline-none cursor-pointer\"\r\n                                                        readOnly\r\n                                                    >\r\n                                                        {n(key, { content: content })}\r\n                                                    </textarea>\r\n                                                    <div className=\"flex items-center justify-between\">\r\n                                                        <p className=\"text-xs font-normal text-muted-foreground text-start\">\r\n                                                            {timeAgo(notification.timestamp, d)}\r\n                                                        </p>\r\n                                                        {(() => {\r\n                                                            let variant: \"green\" | \"red\" | \"yellow\" | \"blue\" | \"default\" | \"purple\" | \"secondary\" | \"mint\" | \"orange\" | \"cyan\" | undefined;\r\n                                                            switch (notification.type as notificationType) {\r\n                                                                case \"information\":\r\n                                                                    variant = \"blue\";\r\n                                                                    break;\r\n                                                                case \"request\":\r\n                                                                    variant = \"orange\";\r\n                                                                    break;\r\n                                                                default:\r\n                                                                    variant = \"purple\";\r\n                                                                    break;\r\n                                                            }\r\n                                                            return (\r\n                                                                <BadgeCustom variant={variant}>\r\n                                                                    {s(notification.type)}\r\n                                                                </BadgeCustom>\r\n                                                            );\r\n                                                        })()}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Button>\r\n                                        </SwipeableListItem>\r\n                                    );\r\n                                })}\r\n                            </SwipeableList>\r\n                        </ScrollArea>\r\n                        <Button variant={'primary'} size={'lg'} className=\"w-full\"\r\n                            onClick={markAllAsRead}>\r\n                            {t('MarkAllAsRead')}\r\n                        </Button>\r\n                    </div>\r\n\r\n                </Card>\r\n            </DropdownMenuContent>\r\n        </DropdownMenu>\r\n    )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\patrol-card.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isClicked' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":80,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsClicked' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":80,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isHovered' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":81,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsHovered' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":81,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isConnected' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":91,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used. Allowed unused args must match /^_/u.","line":443,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":443,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *   คอมโพเนนต์ PatrolCard ใช้สำหรับแสดงข้อมูลของการตรวจสอบสถานที่ โดยแสดงข้อมูลเช่น วันที่, สถานะ, รายการตรวจสอบ, ผู้ตรวจสอบ และอื่นๆ\r\n * Input:\r\n * - id: รหัสการตรวจสอบ\r\n * - date: วันที่ของการตรวจสอบ\r\n * - status: สถานะของการตรวจสอบ\r\n * - preset: รายการตรวจสอบ\r\n * - itemCounts: จำนวนรายการตรวจสอบ\r\n * - inspectors: ผู้ตรวจสอบ\r\n * - onRemoveSuccess: Callback หลังลบสำเร็จ\r\n * Output:\r\n * - JSX ของ Card ที่แสดงข้อมูลของ Patrol\r\n **/\r\n\r\n\"use client\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  HoverCard,\r\n  HoverCardContent,\r\n  HoverCardTrigger,\r\n} from \"@/components/ui/hover-card\";\r\nimport { patrolStatus, IUser, IPreset, IPatrol, IPatrolResult } from \"@/app/type\";\r\nimport {\r\n  countPatrolResult,\r\n  formatPatrolId,\r\n  formatTime,\r\n  getInitials,\r\n  getPatrolStatusVariant,\r\n} from \"@/lib/utils\";\r\nimport { fetchData } from \"@/lib/utils\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport { UserTooltip } from \"./user-tooltip\";\r\nimport { PopoverContent, PopoverTrigger } from \"./ui/popover\";\r\nimport { Popover } from \"@radix-ui/react-popover\";\r\nimport { TextTooltip } from \"./text-tooltip\";\r\nimport { useSocket } from \"./socket-provider\";\r\n\r\nexport interface IPatrolCard {\r\n  id: number;\r\n  date: string;\r\n  status: patrolStatus;\r\n  preset: IPreset;\r\n  itemCounts: number;\r\n  results: IPatrolResult[];\r\n  inspectors: IUser[];\r\n  onRemoveSuccess;\r\n}\r\n\r\nexport function PatrolCard({\r\n  id,\r\n  date,\r\n  status,\r\n  preset,\r\n  itemCounts,\r\n  results,\r\n  inspectors = [],\r\n  onRemoveSuccess,\r\n}: IPatrolCard) {\r\n  const [isClicked, setIsClicked] = useState(false);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [items, setItems] = useState(0);\r\n  const [fails, setFails] = useState(0);\r\n  const [defects, setDefects] = useState(0);\r\n  const triggerContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [pendingAction, setPendingAction] = useState<(() => void) | null>(null);\r\n  const { socket, isConnected } = useSocket();\r\n\r\n  const router = useRouter();\r\n  const locale = useLocale();\r\n\r\n  const getPatrolData = async () => {\r\n    try {\r\n      let countItems = itemCounts;\r\n      let countFails = countPatrolResult(results).fail;\r\n      let countDefects = countPatrolResult(results).defect;\r\n\r\n      if (status === \"completed\") {\r\n        const resultFetch: Partial<IPatrol> = await fetchData(\r\n          \"get\",\r\n          `/patrol/${id}?result=true`,\r\n          true\r\n        );\r\n        if (resultFetch?.results) {\r\n          for (const patrolResult of resultFetch.results) {\r\n            if (patrolResult.status === false) {\r\n              countFails++;\r\n              if (patrolResult.defects && patrolResult.defects.length !== 0) {\r\n                countDefects += patrolResult.defects.length;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      setItems(countItems);\r\n      setFails(countFails);\r\n      setDefects(countDefects);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch patrol data:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPatrolData();\r\n    setMounted(true);\r\n  }, [results]);\r\n\r\n  const t = useTranslations(\"General\");\r\n  const a = useTranslations(\"Alert\");\r\n\r\n  const handleDetail = () => {\r\n    router.push(`/${locale}/patrol/${id}/detail`);\r\n  };\r\n\r\n  const handleDialogResult = (result: boolean) => {\r\n    setIsDialogOpen(false);\r\n    if (result && pendingAction) {\r\n      pendingAction(); // Execute the pending action\r\n      setPendingAction(null); // Clear the pending action\r\n    }\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const handleRemovePatrol = () => {\r\n    setPendingAction(() => () => removePatrol());\r\n    handleOpenDialog();\r\n  };\r\n\r\n  const removePatrol = async () => {\r\n    if (status !== \"pending\") {\r\n      toast({\r\n        variant: \"error\",\r\n        title: a(\"PatrolRemoveErrorTitle\"),\r\n        description: a(\"PatrolRemoveErrorDescription\"),\r\n      });\r\n      return;\r\n    }\r\n    try {\r\n      await fetchData(\"delete\", `/patrol/${id}`, true);\r\n      socket.emit(\"delete_patrol\", id);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    if (onRemoveSuccess) {\r\n      onRemoveSuccess(id); // เรียก Callback หลังลบสำเร็จ\r\n    }\r\n  };\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const openType = useRef<\"hover\" | \"click\" | null>(null);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  const handleMouseEnter = () => {\r\n    if (openType.current !== \"click\") {\r\n      timeoutRef.current = setTimeout(() => {\r\n        openType.current = \"hover\";\r\n        setOpen(true);\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n    if (openType.current === \"hover\") {\r\n      setOpen(false);\r\n      openType.current = null;\r\n    }\r\n  };\r\n  // Modify the existing wheel handler\r\n  const handleWheel = useCallback(() => {\r\n    handleClose();\r\n  }, []);\r\n\r\n  const handleClick = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    // เคลียร์ timeout ของ hover ทันทีเมื่อมีการคลิก\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = null;\r\n    }\r\n    openType.current = \"click\";\r\n    setOpen(true); // เปิด Popover โดยตรง\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    openType.current = null;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      if (openType.current === \"hover\") {\r\n        handleClose();\r\n      } else if (openType.current === \"click\") {\r\n        if (window.innerWidth <= 768) {\r\n          handleClose();\r\n        }\r\n      }\r\n    };\r\n    handleWheel;\r\n\r\n    window.addEventListener(\"scroll\", handleScroll, {\r\n      capture: true,\r\n      passive: true,\r\n    });\r\n    window.addEventListener(\"wheel\", handleWheel, { passive: true });\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", handleScroll, true);\r\n      window.removeEventListener(\"wheel\", handleWheel);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      handleClose();\r\n    };\r\n\r\n    // Detect both window scroll and Scroll Area scroll\r\n    const scrollArea = triggerContainerRef.current?.closest(\r\n      \"[data-radix-scroll-area-viewport], .scroll-area\" // Add your Scroll Area's class/attribute\r\n    );\r\n\r\n    if (scrollArea) {\r\n      scrollArea.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    window.addEventListener(\"scroll\", handleScroll, { passive: true });\r\n\r\n    return () => {\r\n      if (scrollArea) {\r\n        scrollArea.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n      window.removeEventListener(\"scroll\", handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  const TooltipContent = () => {\r\n    return (\r\n      <div >\r\n        <div className=\"flex items-center justify-center gap-1\">\r\n          <span className=\"material-symbols-outlined\">person_search</span>\r\n          <p className=\"text-lg font-semibold\">{t(\"InspectorList\")}</p>\r\n        </div>\r\n        {inspectors.map((inspector, idx) => (\r\n          <div\r\n            key={idx}\r\n            className=\"flex items-center w-full py-2 gap-1 border-b-2 border-secondary\"\r\n          >\r\n            <UserTooltip user={inspector}>\r\n              <Avatar className=\"custom-shadow ms-[-10px] me-2.5\">\r\n                <AvatarImage\r\n                  src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector?.profile?.image?.path}`}\r\n                />\r\n                <AvatarFallback id={inspector.id.toString()}>\r\n                  {getInitials(inspector.profile.name)}\r\n                </AvatarFallback>\r\n              </Avatar>\r\n            </UserTooltip>\r\n            <p className=\"text-lg truncate\">{inspector.profile.name}</p>\r\n          </div>\r\n        ))}\r\n        <div className=\"flex items-center justify-between w-full text-muted-foreground\">\r\n          <p className=\"text-lg font-semibold\">{t(\"Total\")}</p>\r\n          <p className=\"text-lg font-semibold\">{inspectors.length}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (!mounted) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Card\r\n      className=\"flex flex-col custom-shadow border-none w-full px-6 py-4 h-fit gap-4  hover:bg-secondary cursor-pointer\"\r\n      onClick={() => handleDetail()}\r\n    >\r\n      <CardHeader className=\"flex flex-row gap-0 p-0 justify-between\">\r\n        <div className=\"flex flex-col justify-between items-start gap-4 truncate\">\r\n          <CardDescription className=\"text-lg font-semibold text-muted-foreground\">\r\n            {formatTime(date, locale, false)}\r\n          </CardDescription>\r\n          <TextTooltip object={preset.title}>\r\n            <CardTitle className=\"text-card-foreground text-2xl truncate w-[300px]\">\r\n              {preset.title}\r\n            </CardTitle>\r\n          </TextTooltip>\r\n        </div>\r\n        <BadgeCustom\r\n          variant={getPatrolStatusVariant(status).variant}\r\n          iconName={getPatrolStatusVariant(status).iconName}\r\n          showIcon={true}\r\n          hideText={true}\r\n        />\r\n      </CardHeader>\r\n      <CardContent className=\"flex flex-col gap-2 p-0\">\r\n        <div className=\"flex text-muted-foreground items-center gap-1\">\r\n          <span className=\"material-symbols-outlined\">description</span>\r\n          <p className=\"text-lg font-normal\">{formatPatrolId(id)}</p>\r\n        </div>\r\n        <Popover\r\n          open={open}\r\n          onOpenChange={(isOpen) => {\r\n            if (!isOpen) handleClose()\r\n          }}\r\n        >\r\n          <HoverCard\r\n            open={open && openType.current === 'hover'}\r\n            onOpenChange={(isHoverOpen) => {\r\n              if (!isHoverOpen && openType.current === 'hover') handleClose();\r\n            }}\r\n          >\r\n            <div\r\n              ref={triggerContainerRef}\r\n              onMouseEnter={handleMouseEnter}\r\n              onMouseLeave={handleMouseLeave}\r\n            >\r\n              <HoverCardTrigger asChild>\r\n                <PopoverTrigger asChild>\r\n                  <div className=\"cursor-pointer\" onClick={handleClick}>\r\n                    <div className=\"flex text-muted-foreground items-center\">\r\n                      <span className=\"material-symbols-outlined me-1\">\r\n                        person_search\r\n                      </span>\r\n                      {inspectors.length > 0 && (\r\n                        <div className=\"flex items-center me-1 truncate max-w-[190px]\">\r\n                          <p className=\"text-xl me-2.5 truncate\">\r\n                            {inspectors[0].profile.name}\r\n                          </p>\r\n                        </div>\r\n                      )}\r\n                      {inspectors.map((inspector, idx) => {\r\n                        return (\r\n                          <Avatar key={idx} className=\"custom-shadow ms-[-10px]\">\r\n                            <AvatarImage\r\n                              src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${inspector?.profile?.image?.path}`}\r\n                            />\r\n                            <AvatarFallback id={inspector.id.toString()}>\r\n                              {getInitials(inspector.profile.name)}\r\n                            </AvatarFallback>\r\n                          </Avatar>\r\n                        );\r\n                      })}\r\n\r\n                      {inspectors.length > 5 && (\r\n                        <Avatar className=\"custom-shadow flex items-center justify-center ms-[-10px]\">\r\n                          <AvatarImage src=\"\" />\r\n                          <span className=\"absolute text-card-foreground text-base font-semibold\">\r\n                            +{inspectors.length - 5}\r\n                          </span>\r\n                          <AvatarFallback id={\"0\"}></AvatarFallback>\r\n                        </Avatar>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </PopoverTrigger>\r\n              </HoverCardTrigger>\r\n\r\n              <HoverCardContent\r\n                className=\"w-[300px] px-6 py-4\"\r\n                zIndex={0}\r\n                side=\"bottom\"\r\n                align=\"start\"\r\n                onClick={(e) => e.stopPropagation()}\r\n              >\r\n                <TooltipContent />\r\n              </HoverCardContent>\r\n              <PopoverContent\r\n                className=\"w-[300px] z-[100] px-6 py-4\"\r\n                side=\"bottom\"\r\n                align=\"start\"\r\n                onInteractOutside={(e) => {\r\n                  const target = e.target as HTMLElement;\r\n                  const isUserTooltipContent = target?.closest?.('[data-radix-tooltip-content]');\r\n                  const isUserTooltipTrigger = target?.closest?.('.user-tooltip');\r\n\r\n                  if (isUserTooltipContent || isUserTooltipTrigger) {\r\n                    e.preventDefault();\r\n                  }\r\n                }}\r\n              >\r\n                <TooltipContent />\r\n              </PopoverContent>\r\n            </div>\r\n          </HoverCard>\r\n        </Popover>\r\n      </CardContent>\r\n      <CardFooter className=\"p-0 gap-0\">\r\n        <div className=\"flex gap-2 items-center w-full\">\r\n          <div className=\"flex gap-1 text-primary items-center\">\r\n            <span className=\"material-symbols-outlined\">checklist</span>\r\n            <p className=\"text-xl font-semibold\">{items}</p>\r\n          </div>\r\n          <div className=\"flex gap-1 text-orange items-center\">\r\n            <span className=\"material-symbols-outlined\">close</span>\r\n            <p className=\"text-xl font-semibold\">{fails}</p>\r\n          </div>\r\n          <div className=\"flex gap-1 text-destructive items-center\">\r\n            <span className=\"material-symbols-outlined\">error</span>\r\n            <p className=\"text-xl font-semibold\">{defects}</p>\r\n          </div>\r\n          <div className=\"ml-auto items-center\">\r\n            <DropdownMenu>\r\n              <DropdownMenuTrigger onClick={(e) => e.stopPropagation()}>\r\n                <Button variant=\"ghost\" className=\"w-[45px] h-[45px]\">\r\n                  <span className=\"material-symbols-outlined items-center text-input\">\r\n                    more_vert\r\n                  </span>\r\n                </Button>\r\n              </DropdownMenuTrigger>\r\n\r\n              <DropdownMenuContent align=\"end\" className=\"p-0\">\r\n                <DropdownMenuItem\r\n                  onClick={(e) => {\r\n                    handleDetail();\r\n                  }}\r\n                >\r\n                  <h1>{t(\"Detail\")}</h1>\r\n                </DropdownMenuItem>\r\n                <DropdownMenuItem\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleRemovePatrol();\r\n                  }}\r\n                >\r\n                  <h1 className=\"text-destructive cursor-pointer\">\r\n                    {t(\"Delete\")}\r\n                  </h1>\r\n                </DropdownMenuItem>\r\n              </DropdownMenuContent>\r\n            </DropdownMenu>\r\n          </div>\r\n          {isDialogOpen && (\r\n            <AlertCustom\r\n              title={a(\"PatrolRemoveConfirmTitle\")}\r\n              description={a(\"PatrolRemoveConfirmDescription\")}\r\n              primaryButtonText={t(\"Confirm\")}\r\n              primaryIcon=\"check\"\r\n              secondaryButtonText={t(\"Cancel\")}\r\n              backResult={handleDialogResult}\r\n            ></AlertCustom>\r\n          )}\r\n        </div>\r\n      </CardFooter>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport function CreatePatrolCard() {\r\n  return (\r\n    <Card className=\"bg-accent-gradient border-none flex justify-center items-center min-h-[261px] w-full h-full hover:bg-accent-gradient-hover cursor-pointer custom-shadow\">\r\n      <span className=\"material-symbols-outlined text-card text-8xl\">\r\n        note_add\r\n      </span>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\patrol-checklist.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IUser' is defined but never used. Allowed unused vars must match /^_/u.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCustom' is defined but never used. Allowed unused vars must match /^_/u.","line":49,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *   คอมโพเนนต์ PatrolChecklist ใช้สำหรับแสดงรายการตรวจสอบของ Patrol\r\n * Input:\r\n * - user: ข้อมูลของผู้ใช้\r\n * - patrolChecklist: ข้อมูลของ PatrolChecklist\r\n * - disabled: สถานะการใช้งานของปุ่ม\r\n * - handleResult: ฟังก์ชันที่ใช้สำหรับเก็บผลการตรวจสอบ\r\n * - results: ผลการตรวจสอบ\r\n * - patrolResult: ผลการตรวจสอบของ Patrol\r\n * - response: ฟังก์ชันที่ใช้สำหรับเก็บข้อมูลของ Defect\r\n * Output:\r\n * - JSX ของ PatrolChecklist ที่แสดงรายการตรวจสอบและผลการตรวจสอบของ Patrol\r\n * - มีปุ่มสำหรับเก็บผลการตรวจสอบ\r\n **/\r\n\r\n\"use client\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport { useSocket } from \"@/components/socket-provider\";\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from \"@/components/ui/accordion\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport {\r\n  IItem,\r\n  itemType,\r\n  IItemZone,\r\n  IPatrolChecklist,\r\n  IPatrolResult,\r\n  IUser,\r\n  IDefect,\r\n  IComment,\r\n  patrolStatus,\r\n} from \"@/app/type\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { fetchData, getInitials, getItemTypeVariant } from \"@/lib/utils\";\r\nimport { useParams } from \"next/navigation\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport { Skeleton } from \"./ui/skeleton\";\r\nimport { formatTime } from \"@/lib/utils\";\r\nimport AlertDefect from \"./alert-defect\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport { UserTooltip } from \"./user-tooltip\";\r\nimport { TextTooltip } from \"./text-tooltip\";\r\n\r\ninterface IPatrolChecklistProps {\r\n  patrolStatus: patrolStatus;\r\n  patrolChecklist: IPatrolChecklist;\r\n  disabled: boolean;\r\n  handleResult: (result: IPatrolResult) => void;\r\n  patrolResults: IPatrolResult[];\r\n  response?: (defect: IDefect) => void;\r\n}\r\n\r\nexport default function PatrolChecklist({\r\n  patrolStatus,\r\n  patrolChecklist,\r\n  disabled,\r\n  handleResult,\r\n  patrolResults,\r\n  response,\r\n}: IPatrolChecklistProps) {\r\n  const { socket } = useSocket();\r\n  const [mounted, setMounted] = useState<boolean>(false);\r\n  const [comments, setComments] = useState<{ [key: string]: string }>({});\r\n  const [patrolResultState, setPatrolResultState] =\r\n    useState<IPatrolResult[]>(patrolResults);\r\n  const a = useTranslations(\"Alert\");\r\n  const t = useTranslations(\"General\");\r\n  const s = useTranslations(\"Status\");\r\n  const z = useTranslations(\"Zone\");\r\n  const param = useParams();\r\n  const locale = useLocale();\r\n\r\n  const handleCreateComment = async (\r\n    message: string,\r\n    patrolResultId: number,\r\n    supervisorId: number\r\n  ) => {\r\n    const data = {\r\n      message: message,\r\n      patrolResultId: patrolResultId,\r\n      supervisorId: supervisorId,\r\n    };\r\n\r\n    try {\r\n      const comment = await fetchData(\r\n        \"post\",\r\n        `/patrol/${param.id}/comment`,\r\n        true,\r\n        data\r\n      );\r\n\r\n      if (!message) {\r\n        toast({\r\n          variant: \"error\",\r\n          title: a(\"PatrolMissingCreateCommentTitle\"),\r\n          description: a(\"PatrolMissingCreateCommentDescription\"),\r\n        });\r\n      } else {\r\n        toast({\r\n          variant: \"default\",\r\n          title: a(\"PatrolCreateCommentTitle\"),\r\n          description: a(\"PatrolCreateCommentDescription\"),\r\n        });\r\n      }\r\n\r\n      const newPatrolResultState = patrolResultState.map((pr) => {\r\n        if (pr.id === patrolResultId) {\r\n          const updatedPatrolResult = {\r\n            ...pr,\r\n            comments: [...(pr.comments || []), comment],\r\n          };\r\n      \r\n          if (socket && pr.patrolId) {\r\n            socket.emit(\"update_patrol_result\", {\r\n              patrolId: pr.patrolId,\r\n              result: updatedPatrolResult,\r\n            });\r\n          }\r\n          handleResult(updatedPatrolResult);\r\n\r\n      \r\n          return updatedPatrolResult;\r\n        }\r\n        return pr;\r\n      });\r\n      \r\n      setPatrolResultState(newPatrolResultState);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error creating Comment:\", error);\r\n    }\r\n  };\r\n\r\n  const handleCommentChange = (\r\n    itemId: number,\r\n    zoneId: number,\r\n    value: string\r\n  ) => {\r\n    setComments((prev) => ({\r\n      ...prev,\r\n      [`${itemId}-${zoneId}`]: value,\r\n    }));\r\n  };\r\n\r\n  const getExistingResult = (itemId: number, zoneId: number) => {\r\n    const result = patrolResultState.find(\r\n      (res) => res.itemId === itemId && res.zoneId === zoneId\r\n    );\r\n    return result;\r\n  };\r\n\r\n  const fetchRealtimeData = (defect: IDefect) => {\r\n    response(defect);\r\n  };\r\n\r\n  const handleClick = (\r\n    id: number,\r\n    inspectorId: number,\r\n    itemId: number,\r\n    zoneId: number,\r\n    status: boolean\r\n  ) => {\r\n    if (!disabled) {\r\n      handleResult({ id, inspectorId, itemId, zoneId, status });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (patrolResults && patrolResults.length !== 0) {\r\n      setPatrolResultState(patrolResults);\r\n    }\r\n  }, [patrolResults]);\r\n\r\n  useEffect(() => {\r\n    if (patrolChecklist) {\r\n      setMounted(true);\r\n    }\r\n  }, []);\r\n\r\n  if (!mounted) {\r\n    return (\r\n      <Skeleton className=\"flex h-16 items-center\">\r\n        <Skeleton className=\"flex h-10 ms-4 w-56 bg-card\"></Skeleton>\r\n      </Skeleton>\r\n    );\r\n  }\r\n\r\n  const checkResultStatusChecklist = (checklistId: number): boolean => {\r\n    const checklistResults = patrolResults.filter(\r\n      (result) =>\r\n        patrolChecklist.checklist.id === checklistId &&\r\n        patrolChecklist.checklist.items.some(\r\n          (item) =>\r\n            item.id === result.itemId &&\r\n            item.itemZones.some(\r\n              (itemZone) => itemZone.zone.id === result.zoneId\r\n            )\r\n        )\r\n    );\r\n\r\n    return checklistResults.every((result) => result.status !== null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-card rounded-md px-6 py-4\">\r\n      <Accordion type=\"single\" collapsible defaultValue=\"item-1\">\r\n        <AccordionItem value=\"item-1\" className=\"border-none\">\r\n          <AccordionTrigger className=\"flex flex-row  hover:no-underline text-2xl font-bold p-0\">\r\n            <div\r\n              key={patrolChecklist.checklist.id}\r\n              className=\"flex flex-row items-center gap-3\"\r\n            >\r\n              {checkResultStatusChecklist(\r\n                patrolChecklist.checklist.id\r\n              ) ? null : (\r\n                <span className=\"material-symbols-outlined text-destructive\">\r\n                  error\r\n                </span>\r\n              )}\r\n              <p>{patrolChecklist.checklist.title}</p>\r\n            </div>\r\n          </AccordionTrigger>\r\n          <AccordionContent className=\"p-0\">\r\n            <div className=\"flex items-center gap-2 mb-2 mt-2\">\r\n              <div className=\"flex items-center gap-1 text-muted-foreground\">\r\n                <span className=\"material-symbols-outlined\">person_search</span>\r\n                <p className=\"text-lg font-semibold\">{t(\"inspector\")}</p>\r\n              </div>\r\n              <div className=\"flex items-center gap-1\">\r\n                <UserTooltip user={patrolChecklist.inspector}>\r\n                  <Avatar className=\"custom-shadow h-[35px] w-[35px]\">\r\n                    <AvatarImage\r\n                      src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${patrolChecklist.inspector.profile.image?.path}`}\r\n                    />\r\n                    <AvatarFallback\r\n                      id={patrolChecklist.inspector.id.toString()}\r\n                    >\r\n                      {getInitials(patrolChecklist.inspector.profile.name)}\r\n                    </AvatarFallback>\r\n                  </Avatar>\r\n                </UserTooltip>\r\n                <p className=\"text-card-foreground text-lg\">\r\n                  {patrolChecklist.inspector.profile.name}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              {patrolChecklist.checklist.items?.map((item: IItem) => (\r\n                <Accordion type=\"single\" collapsible>\r\n                  <AccordionItem value=\"item-1\" className=\"border-none\">\r\n                    <AccordionTrigger className=\"hover:no-underline\">\r\n                      <div className=\"flex items-center justify-between w-full pe-2\">\r\n                        <p className=\"text-xl font-semibold\">{item.name}</p>\r\n                        <BadgeCustom\r\n                          variant={\r\n                            getItemTypeVariant(item.type as itemType).variant\r\n                          }\r\n                          iconName={\r\n                            getItemTypeVariant(item.type as itemType).iconName\r\n                          }\r\n                          showIcon={true}\r\n                          shape=\"square\"\r\n                        >\r\n                          {s(item.type)}\r\n                        </BadgeCustom>\r\n                      </div>\r\n                    </AccordionTrigger>\r\n                    <AccordionContent className=\"flex flex-col gap-4\">\r\n                      {item.itemZones.flatMap((itemZone: IItemZone) => {\r\n                        const existingResult = getExistingResult(\r\n                          item.id,\r\n                          itemZone.zone.id\r\n                        );\r\n\r\n                        const supervisor = itemZone.zone.supervisor;\r\n\r\n                        return (\r\n                          <div\r\n                            key={itemZone.zone.id}\r\n                            className=\"bg-background rounded-md px-4 py-2\"\r\n                          >\r\n                            <div className=\"flex flex-row justify-between sm:items-end lg:items-center\">\r\n                              <div className=\"flex flex-col w-full\">\r\n                                <div className=\"flex sm:flex-col sm:items-start lg:flex-row lg:items-center gap-2\">\r\n                                  <div className=\"flex flex-row items-center gap-1\">\r\n                                    <span className=\"material-symbols-outlined text-muted-foreground\">\r\n                                      location_on\r\n                                    </span>\r\n                                    <p className=\"font-semibold text-base text-muted-foreground\">\r\n                                      {t(\"Zone\")}\r\n                                    </p>\r\n                                  </div>\r\n                                  <p className=\"text-base\">\r\n                                    {z(itemZone.zone.name)}\r\n                                  </p>\r\n                                </div>\r\n\r\n                                <div className=\"flex sm:flex-col sm:items-start lg:flex-row lg:items-center w-full gap-2\">\r\n                                  <div className=\"flex items-center text-muted-foreground gap-1\">\r\n                                    <span className=\"material-symbols-outlined\">\r\n                                      engineering\r\n                                    </span>\r\n                                    <p className=\"text-base font-semibold\">\r\n                                      {t(\"supervisor\")}\r\n                                    </p>\r\n                                  </div>\r\n\r\n                                  <div className=\"flex items-center gap-1\">\r\n                                    <UserTooltip user={supervisor}>\r\n                                      <Avatar className=\"custom-shadow h-[35px] w-[35px]\">\r\n                                        <AvatarImage\r\n                                          src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${supervisor.profile.image?.path}`}\r\n                                        />\r\n                                        <AvatarFallback\r\n                                          id={supervisor.id.toString()}\r\n                                        >\r\n                                          {getInitials(\r\n                                            supervisor.profile?.name\r\n                                          )}\r\n                                        </AvatarFallback>\r\n                                      </Avatar>\r\n                                    </UserTooltip>\r\n                                    <p className=\"text-card-foreground text-base truncate\">\r\n                                      {supervisor.profile?.name}\r\n                                    </p>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"flex gap-2\">\r\n                                <Button\r\n                                  variant={\r\n                                    existingResult?.status === true\r\n                                      ? \"success\"\r\n                                      : \"secondary\"\r\n                                  }\r\n                                  className={`w-[155px] ${\r\n                                    existingResult?.status === null\r\n                                      ? \"bg-secondary text-card-foreground\"\r\n                                      : \"\"\r\n                                  } ${\r\n                                    existingResult?.status === true\r\n                                      ? \"bg-green hover:bg-green text-card\"\r\n                                      : \"\"\r\n                                  } ${\r\n                                    existingResult?.status === false\r\n                                      ? \"bg-secondary hover:bg-secondary\"\r\n                                      : \"\"\r\n                                  } ${\r\n                                    disabled ||\r\n                                    (existingResult?.defects &&\r\n                                      existingResult.defects.length > 0) ||\r\n                                    (existingResult?.comments &&\r\n                                      existingResult.comments.length > 0)\r\n                                      ? \" cursor-not-allowed opacity-50\"\r\n                                      : \"\"\r\n                                  }\r\n                                                                    `}\r\n                                  disabled={\r\n                                    disabled ||\r\n                                    (existingResult?.defects &&\r\n                                      existingResult.defects.length > 0) ||\r\n                                    (existingResult?.comments &&\r\n                                      existingResult.comments.length > 0)\r\n                                  }\r\n                                  onClick={() => {\r\n                                    if (\r\n                                      (patrolStatus === \"on_going\" &&\r\n                                        !existingResult?.status === true) ||\r\n                                      existingResult?.status === null\r\n                                    ) {\r\n                                      handleClick(\r\n                                        existingResult.id,\r\n                                        patrolChecklist.inspector.id,\r\n                                        existingResult.itemId,\r\n                                        existingResult.zoneId,\r\n                                        true\r\n                                      );\r\n                                    }\r\n                                  }}\r\n                                >\r\n                                  <span className=\"material-symbols-outlined\">\r\n                                    check\r\n                                  </span>\r\n                                  <p>{t(\"Yes\")}</p>\r\n                                </Button>\r\n                                <Button\r\n                                  variant={\r\n                                    existingResult?.status === false\r\n                                      ? \"fail\"\r\n                                      : \"secondary\"\r\n                                  }\r\n                                  className={`w-[155px] ${\r\n                                    existingResult?.status === null\r\n                                      ? \"bg-secondary text-card-foreground\"\r\n                                      : \"\"\r\n                                  } ${\r\n                                    existingResult?.status === false\r\n                                      ? \"bg-destructive hover:bg-destructive text-card\"\r\n                                      : \"\"\r\n                                  } ${\r\n                                    existingResult?.status === true\r\n                                      ? \"bg-secondary hover:bg-secondary\"\r\n                                      : \"\"\r\n                                  } ${\r\n                                    disabled ||\r\n                                    (existingResult?.defects &&\r\n                                      existingResult.defects.length > 0) ||\r\n                                    (existingResult?.comments &&\r\n                                      existingResult.comments.length > 0)\r\n                                      ? \" cursor-not-allowed opacity-50\"\r\n                                      : \"\"\r\n                                  }\r\n                                                                    `}\r\n                                  disabled={\r\n                                    disabled ||\r\n                                    (existingResult?.defects &&\r\n                                      existingResult.defects.length > 0) ||\r\n                                    (existingResult?.comments &&\r\n                                      existingResult.comments.length > 0)\r\n                                  }\r\n                                  onClick={() => {\r\n                                    if (\r\n                                      (patrolStatus === \"on_going\" &&\r\n                                        !existingResult?.status === false) ||\r\n                                      existingResult?.status === null\r\n                                    ) {\r\n                                      handleClick(\r\n                                        existingResult.id,\r\n                                        patrolChecklist.inspector.id,\r\n                                        existingResult.itemId,\r\n                                        existingResult.zoneId,\r\n                                        false\r\n                                      );\r\n                                    }\r\n                                  }}\r\n                                >\r\n                                  <span className=\"material-symbols-outlined\">\r\n                                    close\r\n                                  </span>\r\n                                  <p>{t(\"No\")}</p>\r\n                                </Button>\r\n                              </div>\r\n                            </div>\r\n\r\n                            {existingResult?.status === false && (\r\n                              <div className=\"flex flex-col items-start gap-4 mt-2\">\r\n                                <AlertDefect\r\n                                  userId={patrolChecklist.inspector.id}\r\n                                  item={item}\r\n                                  type={\"report\"}\r\n                                  result={existingResult}\r\n                                  patrolResults={patrolResults}\r\n                                  response={(defect: IDefect) =>\r\n                                    fetchRealtimeData(defect)\r\n                                  }\r\n                                />\r\n\r\n                                <div className=\"flex flex-col items-start w-full gap-2\">\r\n                                  {patrolResultState\r\n                                    .flatMap((pr) => pr.comments ?? [])\r\n                                    .map((comment: IComment) =>\r\n                                      comment.patrolResultId ===\r\n                                      existingResult.id ? (\r\n                                        <div\r\n                                          key={comment.timestamp}\r\n                                          className=\"flex flex-row items-center bg-secondary rounded-md w-full px-6 py-4 gap-2\"\r\n                                        >\r\n                                          <div\r\n                                            className={`flex justify-center items-center w-3 h-3 rounded-full ${\r\n                                              !comment.status\r\n                                                ? \"bg-primary\"\r\n                                                : \"bg-green\"\r\n                                            }`}\r\n                                          />\r\n                                          <p className=\"text-muted-foreground text-xl font-semibold\">\r\n                                            {formatTime(\r\n                                              comment.timestamp,\r\n                                              locale\r\n                                            )}\r\n                                          </p>\r\n                                          <div className=\"flex items-end\">\r\n                                            <TextTooltip\r\n                                              object={comment.message}\r\n                                            >\r\n                                              <p className=\"text-xl truncate w-[500px]\">\r\n                                                {comment.message}\r\n                                              </p>\r\n                                            </TextTooltip>\r\n                                          </div>\r\n                                        </div>\r\n                                      ) : null\r\n                                    )}\r\n                                  <div>\r\n                                    {existingResult?.comments?.length > 0 ||\r\n                                    existingResult?.defects?.length > 0 ? (\r\n                                      null\r\n                                    ) : (\r\n                                      <div className=\"text-destructive\">{a(\"NoCommentsOrDeFectsFound\")}</div>\r\n                                    )}\r\n                                  </div>\r\n\r\n                                  <Textarea\r\n                                    key={`${item.id}-${itemZone.zone.id}`}\r\n                                    className=\"min-h-[120px] bg-secondary border-none text-xl\"\r\n                                    placeholder={`${t(\"Comment\")}...`}\r\n                                    disabled={disabled}\r\n                                    value={\r\n                                      comments[\r\n                                        `${item.id}-${itemZone.zone.id}`\r\n                                      ] || \"\"\r\n                                    }\r\n                                    onChange={(e) =>\r\n                                      handleCommentChange(\r\n                                        item.id,\r\n                                        itemZone.zone.id,\r\n                                        e.target.value\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                </div>\r\n\r\n                                <div className=\"flex justify-end w-full mt-2\">\r\n                                  <Button\r\n                                    variant={\"primary\"}\r\n                                    size={\"lg\"}\r\n                                    disabled={disabled}\r\n                                    onClick={() => {\r\n                                      handleCreateComment(\r\n                                        comments[\r\n                                          `${item.id}-${itemZone.zone.id}`\r\n                                        ],\r\n                                        existingResult.id,\r\n                                        supervisor.id\r\n                                      );\r\n                                      setComments((prev) => ({\r\n                                        ...prev,\r\n                                        [`${item.id}-${itemZone.zone.id}`]: \"\",\r\n                                      }));\r\n                                    }}\r\n                                  >\r\n                                    <span className=\"material-symbols-outlined me-2\">\r\n                                      send\r\n                                    </span>\r\n                                    {t(\"Send\")}\r\n                                  </Button>\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </AccordionContent>\r\n                  </AccordionItem>\r\n                </Accordion>\r\n              ))}\r\n            </div>\r\n          </AccordionContent>\r\n        </AccordionItem>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\patrol-timer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":52,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *   คอมโพเนนต์ PatrolTimer ใช้สำหรับแสดงเวลาที่ใช้ในการตรวจสอบของ Patrol\r\n * Input: \r\n * - launchDate: วันเวลาที่เริ่มต้นการตรวจสอบของ Patrol\r\n * - patrolStatus: สถานะของ Patrol ซึ่งมีค่าเป็น \"on_going\" หรือ \"completed\"\r\n * - patrolDuration: ระยะเวลาที่ใช้ในการตรวจสอบของ Patrol ในกรณีที่ patrolStatus เป็น \"completed\"\r\n * Output:\r\n * - JSX ของ PatrolTimer ที่แสดงเวลาที่ใช้ในการตรวจสอบของ Patrol\r\n * - โดยจะแสดงเวลาที่ใช้ในการตรวจสอบของ Patrol ในรูปแบบ \"DD Days HH Hours MM Minutes SS Seconds\"\r\n **/\r\n\r\n'use client'\r\nimport { useEffect, useState } from \"react\";\r\nimport { Skeleton } from \"./ui/skeleton\";\r\n\r\ninterface IPatrolTimer {\r\n    days: string;\r\n    hours: string;\r\n    minutes: string;\r\n    seconds: string;\r\n}\r\n\r\nconst getTimeElapsed = (startTime: number): IPatrolTimer => {\r\n    const difference = new Date().getTime() - startTime;\r\n\r\n    if (difference <= 0) {\r\n        return { days: \"00\", hours: \"00\", minutes: \"00\", seconds: \"00\" };\r\n    }\r\n\r\n    const days = String(Math.floor(difference / (1000 * 60 * 60 * 24))).padStart(2, '0');\r\n    const hours = String(Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))).padStart(2, '0');\r\n    const minutes = String(Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60))).padStart(2, '0');\r\n    const seconds = String(Math.floor((difference % (1000 * 60)) / 1000)).padStart(2, '0');\r\n\r\n    return { days, hours, minutes, seconds };\r\n};\r\n\r\nconst formatDuration = (duration: string): IPatrolTimer => {\r\n    const match = duration.match(/(?:(\\d+)d\\s*)?(?:(\\d+)h\\s*)?(?:(\\d+)m\\s*)?(?:(\\d+)s)?/);\r\n\r\n    const days = match?.[1] ? match[1].padStart(2, '0') : \"00\";\r\n    const hours = match?.[2] ? match[2].padStart(2, '0') : \"00\";\r\n    const minutes = match?.[3] ? match[3].padStart(2, '0') : \"00\";\r\n    const seconds = match?.[4] ? match[4].padStart(2, '0') : \"00\";\r\n\r\n    return { days, hours, minutes, seconds };\r\n};\r\n\r\nconst PatrolTimer = ({ launchDate, patrolStatus, patrolDuration }: { launchDate: string, patrolStatus: string, patrolDuration: string }) => {\r\n    const [timeElapsed, setTimeElapsed] = useState<IPatrolTimer>({ days: \"00\", hours: \"00\", minutes: \"00\", seconds: \"00\" });\r\n    const [startTime, setStartTime] = useState<number>(new Date(launchDate).getTime());\r\n    const [mounted, setMounted] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        setMounted(true);\r\n        setStartTime(new Date(launchDate).getTime());\r\n\r\n        if (patrolStatus === \"completed\") {\r\n            setTimeElapsed(formatDuration(patrolDuration));\r\n            return; // หยุดที่นี่เมื่อ patrolStatus เป็น completed\r\n        }\r\n\r\n        if (patrolStatus === \"on_going\") {\r\n            setTimeElapsed(getTimeElapsed(new Date(launchDate).getTime()));\r\n\r\n            const interval = setInterval(() => {\r\n                setTimeElapsed(getTimeElapsed(new Date(launchDate).getTime()));\r\n            }, 1000);\r\n\r\n            return () => clearInterval(interval);\r\n        }\r\n    }, [patrolStatus, launchDate, patrolDuration]);\r\n\r\n    if (!mounted) {\r\n        return <Skeleton />;\r\n    }\r\n\r\n    return (\r\n        <div className='flex flex-row items-center text-2xl font-semibold gap-2'>\r\n            {patrolStatus === \"on_going\" ? (\r\n                <>\r\n                    <span className=\"material-symbols-outlined text-card-foreground w-[22px] h-[22px]\">\r\n                        timer\r\n                    </span>\r\n                    {timeElapsed.days !== \"00\" && <p>{timeElapsed.days} Days</p>}\r\n                    {(timeElapsed.hours !== \"00\" || timeElapsed.days !== \"00\") && <p>{timeElapsed.hours} Hours</p>}\r\n                    <p>{timeElapsed.minutes} Minutes</p>\r\n                    <p>{timeElapsed.seconds} Seconds</p>\r\n                </>\r\n            ) : patrolStatus === \"completed\" && patrolDuration ? (\r\n                <>\r\n                    <span className=\"material-symbols-outlined text-card-foreground w-[22px] h-[22px]\">\r\n                        timer\r\n                    </span>\r\n                    {formatDuration(patrolDuration).days !== \"00\" && <p>{formatDuration(patrolDuration).days} Days</p>}\r\n                    {(formatDuration(patrolDuration).hours !== \"00\" || formatDuration(patrolDuration).days !== \"00\") && <p>{formatDuration(patrolDuration).hours} Hours</p>}\r\n                    <p>{formatDuration(patrolDuration).minutes} Minutes</p>\r\n                    <p>{formatDuration(patrolDuration).seconds} Seconds</p>\r\n                </>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PatrolTimer;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\pie-graph.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardFooter' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { Pie, PieChart, LabelList } from \"recharts\";\r\n\r\nimport {\r\n  CardContent,\r\n  CardFooter,\r\n} from \"@/components/ui/card\";\r\nimport {\r\n  ChartConfig,\r\n  ChartContainer,\r\n  ChartLegend,\r\n  ChartTooltip,\r\n} from \"@/components/ui/chart\";\r\nimport { ICommonDefectItem } from \"@/app/type\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport NotFound from \"@/components/not-found\";\r\n\r\n\r\ninterface IDonutGraphProps {\r\n  chartData: ICommonDefectItem[];\r\n}\r\n\r\nexport function PieGraph({ chartData }: IDonutGraphProps) {\r\n  const d = useTranslations(\"Dashboard\");\r\n  const chartConfig = React.useMemo(() => {\r\n    return chartData.reduce((acc, item) => {\r\n      acc[item.name] = {\r\n        label: item.name,\r\n        color: item.fill,\r\n      };\r\n      return acc;\r\n    }, {} as ChartConfig);\r\n  }, [chartData]);\r\n\r\n\r\n  const totalReports = React.useMemo(() => {\r\n    return chartData.reduce((acc, curr) => acc + curr.amounts, 0);\r\n  }, []);\r\n\r\n  if (!chartData || chartData.length === 0) {\r\n    return (\r\n      <div className=\"flex flex-col items-center justify-center h-64\">\r\n        <NotFound\r\n          icon=\"monitoring\"\r\n          title=\"NoDataAvailable\"\r\n          description=\"NoDataAvailableDescription\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"flex flex-col\">\r\n      <CardContent className=\"flex-1 pb-0\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          className=\"mx-auto aspect-square max-h-[350px]\"\r\n        >\r\n          <PieChart width={300} height={350}>\r\n            <ChartTooltip\r\n              cursor={false}\r\n              content={({ payload }) => {\r\n                if (!payload || payload.length === 0) return null;\r\n\r\n                return (\r\n                  <div className=\"bg-card-foreground px-2.5 py-1.5 custom-shadow rounded-md\">\r\n                    {payload.map((entry, index) => {\r\n                      const percent = ((parseFloat(entry.value.toString()) / totalReports) * 100).toFixed(2);\r\n                      return (\r\n                        <div key={index} className=\"flex items-center gap-6\">\r\n                          <div className=\"flex items-center gap-2 text-sm text-border\">\r\n                            <span\r\n                              className=\"inline-block w-2.5 h-2.5 rounded-[2px]\"\r\n                              style={{ backgroundColor: entry.payload.fill }}\r\n                            />\r\n                            <p>{entry.name}</p>\r\n                          </div>\r\n                          <p className=\"text-sm text-card font-semibold\">{percent}%</p>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                );\r\n              }}\r\n            />\r\n            <Pie\r\n              data={chartData}\r\n              dataKey=\"amounts\"\r\n              nameKey=\"name\"\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              outerRadius={90}\r\n              className=\"hover:cursor-pointer\"\r\n            >\r\n              <LabelList\r\n                dataKey=\"amounts\"\r\n                className=\"fill-card\"\r\n                position=\"inside\"\r\n                stroke=\"none\"\r\n                fontSize={12}\r\n                formatter={(value: number) => value.toLocaleString()}\r\n              />\r\n            </Pie>\r\n            <ChartLegend\r\n              content={({ payload }) => (\r\n                <div className=\"flex flex-col gap-1 justify-center\">\r\n                  {payload?.map((entry, index) => (\r\n                    <div key={`legend-item-${index}`} className=\"flex items-center gap-1 hover:cursor-pointer\">\r\n                      <span\r\n                        className=\"inline-block w-3 h-3 rounded-sm\"\r\n                        style={{ backgroundColor: entry.color }}\r\n                      ></span>\r\n                      <span className=\"text-sm\">{entry.value}</span>\r\n                    </div>\r\n                  ))}\r\n                  <div className=\"mt-2 text-center leading-none text-muted-foreground text-sm hover:cursor-text\">\r\n                    {d(\"CommonDefectsDescription\")}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              className=\"-translate-y-2 flex-wrap gap-2 [&>*]:basis-1/4 [&>*]:justify-center\"\r\n            />\r\n          </PieChart>\r\n        </ChartContainer>\r\n      </CardContent>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\profile-dropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\radial-chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrendingUp' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ChartTooltipContent' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":64,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":64,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1805,1839],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\r\nimport { TrendingUp } from \"lucide-react\";\r\nimport {\r\n  Label,\r\n  PolarGrid,\r\n  PolarRadiusAxis,\r\n  RadialBar,\r\n  RadialBarChart,\r\n} from \"recharts\";\r\nimport { CardContent, CardFooter } from \"@/components/ui/card\";\r\nimport {\r\n  ChartConfig,\r\n  ChartContainer,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n} from \"@/components/ui/chart\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport NotFound from \"@/components/not-found\";\r\n\r\nexport function RadialChart({ duration }) {\r\n  if (!duration || duration === null) {\r\n    return (\r\n      <div className=\"flex flex-col items-center justify-center h-64\">\r\n        <NotFound\r\n          icon=\"monitoring\"\r\n          title=\"NoDataAvailable\"\r\n          description=\"NoDataAvailableDescription\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  const t = useTranslations(\"General\");\r\n  const d = useTranslations(\"Dashboard\");\r\n\r\n  const chartConfig = {\r\n    duration: {\r\n      label: \"Duration\",\r\n      color: \"hsl(var(--chart-1))\",\r\n    },\r\n    timeRangeShort: {\r\n      label: d(\"timeRangeShort\"),\r\n      color: \"hsl(var(--green))\",\r\n    },\r\n    timeRangeMedium: {\r\n      label: d(\"timeRangeMedium\"),\r\n      color: \"hsl(var(--yellow))\",\r\n    },\r\n    timeRangeLong: {\r\n      label: d(\"timeRangeLong\"),\r\n      color: \"hsl(var(--destructive))\",\r\n    },\r\n  } satisfies ChartConfig;\r\n\r\n  const hoursMatch = duration.match(/(\\d+)h/);\r\n  const minutesMatch = duration.match(/(\\d+)m/);\r\n  const secondsMatch = duration.match(/(\\d+)s/);\r\n\r\n  const hours = hoursMatch ? parseInt(hoursMatch[1], 10) : 0;\r\n  const minutes = minutesMatch ? parseInt(minutesMatch[1], 10) : 0;\r\n  const seconds = secondsMatch ? parseInt(secondsMatch[1], 10) : 0;\r\n\r\n  const totalDuration = hours + minutes / 60 + seconds / 3600;\r\n  const formattedDuration = totalDuration.toFixed(2);\r\n  console.log(\"duration\", duration);\r\n\r\n  let fillColor;\r\n  if (totalDuration < 2) {\r\n    fillColor = \"var(--color-timeRangeShort)\";\r\n  } else if (totalDuration >= 2 && totalDuration <= 3) {\r\n    fillColor = \"var(--color-timeRangeMedium)\";\r\n  } else {\r\n    fillColor = \"var(--color-timeRangeLong)\";\r\n  }\r\n\r\n  const chartData = [{ duration: formattedDuration, fill: fillColor }];\r\n\r\n  function calculateEndAngle(): number {\r\n    return Math.min((totalDuration / 12) * 360, 360);\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col\">\r\n      <CardContent className=\"flex-1 pb-0\">\r\n        <ChartContainer\r\n          config={chartConfig}\r\n          className=\"mx-auto aspect-square max-h-[250px]\"\r\n        >\r\n          <RadialBarChart\r\n            data={chartData}\r\n            startAngle={0}\r\n            endAngle={calculateEndAngle()}\r\n            innerRadius={80}\r\n            outerRadius={110}\r\n          >\r\n            <ChartTooltip\r\n              cursor={true}\r\n              content={({ payload }) => {\r\n                if (!payload || payload.length === 0) return null;\r\n\r\n                return (\r\n                  <div className=\"bg-card-foreground px-2.5 py-1.5 cursor-pointer custom-shadow rounded-md\">\r\n                    <div className=\"flex items-center gap-6\">\r\n                      <div className=\"flex items-center gap-2 text-sm text-border\">\r\n                        <span\r\n                          className=\"inline-block w-2.5 h-2.5 rounded-[2px]\"\r\n                          style={{ backgroundColor: fillColor }}\r\n                        />\r\n                        <p>{d(\"Duration\")}</p>\r\n                      </div>\r\n                      <p className=\"text-sm text-card font-semibold\">\r\n                        {d(\"DurationToolTip\", { hours, minutes, seconds })}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }}\r\n            />\r\n            <PolarGrid\r\n              gridType=\"circle\"\r\n              radialLines={false}\r\n              stroke=\"none\"\r\n              className=\"first:fill-muted last:fill-background cursor-pointer\"\r\n              polarRadius={[86, 74]}\r\n            />\r\n            <RadialBar dataKey=\"duration\" background cornerRadius={10} />\r\n            <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>\r\n              <Label\r\n                content={({ viewBox }) => {\r\n                  if (viewBox && \"cx\" in viewBox && \"cy\" in viewBox) {\r\n                    return (\r\n                      <text\r\n                        x={viewBox.cx}\r\n                        y={viewBox.cy}\r\n                        textAnchor=\"middle\"\r\n                        dominantBaseline=\"middle\"\r\n                      >\r\n                        <tspan\r\n                          x={viewBox.cx}\r\n                          y={viewBox.cy}\r\n                          className=\"fill-foreground text-4xl font-bold\"\r\n                        >\r\n                          {formattedDuration}\r\n                        </tspan>\r\n                        <tspan\r\n                          x={viewBox.cx}\r\n                          y={(viewBox.cy || 0) + 24}\r\n                          className=\"fill-muted-foreground\"\r\n                        >\r\n                          {t(\"Hour\")}\r\n                        </tspan>\r\n                      </text>\r\n                    );\r\n                  }\r\n                }}\r\n              />\r\n            </PolarRadiusAxis>\r\n          </RadialBarChart>\r\n        </ChartContainer>\r\n      </CardContent>\r\n      <CardFooter className=\"flex-col gap-2 text-sm \">\r\n        <div className=\"flex gap-4 justify-center hover:cursor-pointer\">\r\n          <div key={`legend-item-1`} className=\"flex items-center gap-1\">\r\n            <span\r\n              className=\"inline-block w-3 h-3 rounded-sm\"\r\n              style={{ backgroundColor: chartConfig.timeRangeShort.color }}\r\n            ></span>\r\n            <span className=\"text-sm\">{chartConfig.timeRangeShort.label}</span>\r\n          </div>\r\n          <div key={`legend-item-2`} className=\"flex items-center gap-1\">\r\n            <span\r\n              className=\"inline-block w-3 h-3 rounded-sm\"\r\n              style={{ backgroundColor: chartConfig.timeRangeMedium.color }}\r\n            ></span>\r\n            <span className=\"text-sm\">{chartConfig.timeRangeMedium.label}</span>\r\n          </div>\r\n          <div key={`legend-item-3`} className=\"flex items-center gap-1\">\r\n            <span\r\n              className=\"inline-block w-3 h-3 rounded-sm\"\r\n              style={{ backgroundColor: chartConfig.timeRangeLong.color }}\r\n            ></span>\r\n            <span className=\"text-sm\">{chartConfig.timeRangeLong.label}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"leading-none text-muted-foreground\">\r\n          {d(\"PatrolDurationDescription\")}\r\n        </div>\r\n      </CardFooter>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\report-defect.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IImage' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IZone' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n *   คอมโพเนนต์ ReportDefect ใช้ในการแสดงข้อมูลของ Defect ที่ถูกรายงานในระบบ\r\n * Input:\r\n * - defect: ข้อมูลของ Defect ที่ได้รับจาก API\r\n * Output:\r\n * - JSX ของ ReportDefect ที่แสดงข้อมูลของ Defect ที่ถูกรายงานในระบบ\r\n * - มีข้อมูลของ Defect และมีปุ่มสำหรับการแก้ไขข้อมูลของ Defect\r\n **/\r\n\r\n\"use client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { defectStatus, IDefect, IImage, IZone } from \"@/app/type\";\r\nimport BadgeCustom from \"@/components/badge-custom\";\r\nimport Image from \"next/image\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from \"@/components/ui/accordion\";\r\nimport {\r\n  Carousel,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselNext,\r\n  CarouselPrevious,\r\n  type CarouselApi,\r\n} from \"@/components/ui/carousel\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport {\r\n  fetchData,\r\n  formatPatrolId,\r\n  formatTime,\r\n  getDefectStatusVariant,\r\n  getInitials,\r\n  getItemTypeVariant,\r\n} from \"@/lib/utils\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\r\nimport AlertDefect from \"./alert-defect\";\r\nimport { useLocale } from \"next-intl\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport Map from \"@/components/map\";\r\nimport { AlertCustom } from \"./alert-custom\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\";\r\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\";\r\nimport { UserTooltip } from \"./user-tooltip\";\r\n\r\ninterface IReportDefect {\r\n  defect: IDefect;\r\n  page: \"patrol-view-detail\" | \"patrol-defect\" | \"patrol-view-report\";\r\n  response: (defect: IDefect) => void;\r\n}\r\n\r\nexport default function ReportDefect({\r\n  defect,\r\n  page,\r\n  response,\r\n}: IReportDefect) {\r\n  const s = useTranslations(\"Status\");\r\n  const t = useTranslations(\"General\");\r\n  const a = useTranslations(\"Alert\");\r\n\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [pendingAction, setPendingAction] = useState<(() => void) | null>(null);\r\n\r\n  const handleDialogResult = (result: boolean) => {\r\n    setIsDialogOpen(false);\r\n    if (result && pendingAction) {\r\n      pendingAction(); // Execute the pending action\r\n      setPendingAction(null); // Clear the pending action\r\n    }\r\n  };\r\n\r\n  const handleOpenDialog = () => {\r\n    setIsDialogOpen(true);\r\n  };\r\n\r\n  const beforeImage =\r\n    defect.images\r\n      .sort((a, b) => b.image.id - a.image.id) // เรียงจาก id ล่าสุดไปเก่าสุด\r\n      .filter((image) => image.image.user.id === defect.userId)\r\n      .map((image: any) => ({\r\n        path: image.image.path,\r\n      })) || null;\r\n\r\n  const afterImage =\r\n    defect.images\r\n      .sort((a, b) => b.image.id - a.image.id) // เรียงจาก id ล่าสุดไปเก่าสุด\r\n      .filter((image) => image.image.user.id !== defect.userId)\r\n      .map((image: any) => ({\r\n        path: image.image.path,\r\n      })) || null;\r\n\r\n  const [isBeforeCarouselOpen, setIsBeforeCarouselOpen] = useState(false);\r\n  const [isAfterCarouselOpen, setIsAfterCarouselOpen] = useState(false);\r\n  const [beforeSlideIndex, setBeforeSlideIndex] = useState(0);\r\n  const [afterSlideIndex, setAfterSlideIndex] = useState(0);\r\n  const [beforeApi, setBeforeApi] = useState<CarouselApi | null>(null);\r\n  const [afterApi, setAfterApi] = useState<CarouselApi | null>(null);\r\n\r\n  const [alertBoxTitle, setAlertBoxTitle] = useState();\r\n  const [alertBoxDescription, setAlertBoxDescription] = useState();\r\n  const router = useRouter();\r\n  const locale = useLocale();\r\n\r\n  // Handle before image click\r\n  const handleBeforeImageClick = () => {\r\n    setIsBeforeCarouselOpen(true);\r\n  };\r\n\r\n  // Handle after image click\r\n  const handleAfterImageClick = () => {\r\n    setIsAfterCarouselOpen(true);\r\n  };\r\n\r\n  // Close before carousel\r\n  const handleCloseBeforeCarousel = () => {\r\n    setIsBeforeCarouselOpen(false);\r\n  };\r\n\r\n  // Close after carousel\r\n  const handleCloseAfterCarousel = () => {\r\n    setIsAfterCarouselOpen(false);\r\n  };\r\n\r\n  const handleReworkOrVerifyDefect = async (\r\n    id: number,\r\n    status: defectStatus,\r\n    supervisorId: number\r\n  ) => {\r\n    let title;\r\n    let description;\r\n    if (status === \"pending_inspection\") {\r\n      title = \"ConfirmReworkTitle\";\r\n      description = \"ConfirmReworkDescription\";\r\n    } else if (status === \"completed\") {\r\n      title = \"ConfirmCompleteTitle\";\r\n      description = \"ConfirmCompleteDescription\";\r\n    }\r\n\r\n    setPendingAction(() => () => {\r\n      reworkOrVerifyDefect(id, status, supervisorId);\r\n    });\r\n    setAlertBoxTitle(title);\r\n    setAlertBoxDescription(description);\r\n    handleOpenDialog();\r\n  };\r\n\r\n  const reworkOrVerifyDefect = async (\r\n    id: number,\r\n    status: defectStatus,\r\n    supervisorId: number\r\n  ) => {\r\n    const data = {\r\n      status: status,\r\n      supervisorId: supervisorId,\r\n    };\r\n\r\n    try {\r\n      let title;\r\n      let description;\r\n      if (data.status === \"pending_inspection\") {\r\n        title = \"ReworkDefectTitle\";\r\n        description = \"ReworkDefectDescription\";\r\n      } else if (status === \"completed\") {\r\n        title = \"CompleteDefectTitle\";\r\n        description = \"CompleteDefectDescription\";\r\n      }\r\n      const updateStatusDefect = await fetchData(\r\n        \"put\",\r\n        `/defect/${id}`,\r\n        true,\r\n        data\r\n      );\r\n      response(updateStatusDefect);\r\n      toast({\r\n        variant: \"success\",\r\n        title: a(title),\r\n        description: a(description),\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error creating defect:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (beforeApi) {\r\n      beforeApi.on(\"select\", () => {\r\n        setBeforeSlideIndex(beforeApi.selectedScrollSnap());\r\n      });\r\n    }\r\n  }, [beforeApi]);\r\n\r\n  useEffect(() => {\r\n    if (beforeApi && beforeSlideIndex !== null) {\r\n      beforeApi.scrollTo(beforeSlideIndex);\r\n    }\r\n  }, [beforeSlideIndex, beforeApi]);\r\n\r\n  useEffect(() => {\r\n    if (afterApi) {\r\n      afterApi.on(\"select\", () => {\r\n        setAfterSlideIndex(afterApi.selectedScrollSnap());\r\n      });\r\n    }\r\n  }, [afterApi]);\r\n\r\n  useEffect(() => {\r\n    if (afterApi && afterSlideIndex !== null) {\r\n      afterApi.scrollTo(afterSlideIndex);\r\n    }\r\n  }, [afterSlideIndex, afterApi]);\r\n\r\n  const fetchRealtimeData = (defect: IDefect) => {\r\n    response(defect);\r\n  };\r\n\r\n  const navigateToPatrol = (patrolId: number) => {\r\n    router.push(`/${locale}/patrol/${patrolId}/detail`);\r\n  };\r\n\r\n  return (\r\n    <Accordion type=\"single\" collapsible>\r\n      <AccordionItem\r\n        value=\"item-1\"\r\n        className=\"bg-card rounded-md w-full px-4 py-2 border-none\"\r\n      >\r\n        <AccordionTrigger className=\"hover:no-underline\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <span className=\"material-symbols-outlined text-muted-foreground cursor-default \">\r\n              schedule\r\n            </span>\r\n            <span className=\"text-lg font-bold text-muted-foreground cursor-default \">\r\n              {formatTime(defect.startTime, locale)}\r\n            </span>\r\n            <h2 className=\"text-lg font-bold text-card-foreground cursor-default \">\r\n              {defect.name}\r\n            </h2>\r\n          </div>\r\n        </AccordionTrigger>\r\n\r\n        <div className=\"flex justify-between items-center mb-4 mt-2\">\r\n          <div className=\"flex space-x-2\">\r\n            {(() => {\r\n              const { iconName, variant } = getDefectStatusVariant(\r\n                defect.status\r\n              );\r\n              return (\r\n                <BadgeCustom\r\n                  variant={variant}\r\n                  showIcon={true}\r\n                  iconName={iconName}\r\n                >\r\n                  {s(defect.status)}\r\n                </BadgeCustom>\r\n              );\r\n            })()}\r\n            {(() => {\r\n              const { iconName, variant } = getItemTypeVariant(defect.type);\r\n              return (\r\n                <BadgeCustom\r\n                  variant={variant}\r\n                  showIcon={true}\r\n                  shape={\"square\"}\r\n                  iconName={iconName}\r\n                >\r\n                  {s(defect.type)}\r\n                </BadgeCustom>\r\n              );\r\n            })()}\r\n          </div>\r\n        </div>\r\n\r\n        {/* หลังจากกดเปิด */}\r\n        <AccordionContent>\r\n          <div className=\"flex flex-col p-1\">\r\n            {/* supervisor */}\r\n            <div className=\"flex flex-row justify-between w-full h-9 mb-4\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <div className=\"flex items-center gap-1 text-muted-foreground\">\r\n                  <span className=\"material-symbols-outlined\">engineering</span>\r\n                  <p className=\"text-lg font-semibold\">{t(\"supervisor\")}</p>\r\n                </div>\r\n                <div className=\"flex items-center gap-1\">\r\n                  <UserTooltip user={defect.supervisor}>\r\n                    <Avatar className=\"custom-shadow h-[35px] w-[35px]\">\r\n                      <AvatarImage\r\n                        src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${defect.supervisor.profile.image?.path}`}\r\n                      />\r\n                      <AvatarFallback id={defect.supervisor.id.toString()}>\r\n                        {getInitials(defect.supervisor.profile.name)}\r\n                      </AvatarFallback>\r\n                    </Avatar>\r\n                  </UserTooltip>\r\n\r\n                  <p className=\"text-card-foreground text-lg\">\r\n                    {defect.supervisor.profile.name}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                {defect.status === (\"reported\" as defectStatus) && (\r\n                  <AlertDefect\r\n                    defect={defect}\r\n                    type={page == \"patrol-view-detail\" ? \"report\" : \"edit\"}\r\n                    response={(defect: IDefect) => fetchRealtimeData(defect)}\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Patrol */}\r\n            {page === \"patrol-defect\" && (\r\n              <div className=\"flex flex-col mb-4\">\r\n                <div className=\"flex flex-row mb-1\">\r\n                  <div className=\"flex flex-row pr-2 items-center pt-1\">\r\n                    <span className=\"material-symbols-outlined text-muted-foreground cursor-default user-select-none mr-1\">\r\n                      task\r\n                    </span>\r\n                    <p className=\"text-base font-semibold text-muted-foreground  cursor-default user-select-none\">\r\n                      Patrol\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n\r\n                <Button\r\n                  className=\"w-fit h-fit bg-secondary\"\r\n                  variant=\"ghost\"\r\n                  onClick={() =>\r\n                    navigateToPatrol(defect.patrolResult.patrol.id)\r\n                  }\r\n                >\r\n                  <div className=\"flex flex-col items-start py-4 px-6\">\r\n                    <p className=\"text-xl font-semibold text-card-foreground mb-2 cursor-default user-select-none \">\r\n                      {defect.patrolResult.patrol.preset.title}\r\n                    </p>\r\n\r\n                    <div className=\"flex flex-row items-center\">\r\n                      <span className=\"material-symbols-outlined text-muted-foreground cursor-default user-select-none pr-2\">\r\n                        description\r\n                      </span>\r\n                      <p className=\"text-muted-foreground cursor-default user-select-none\">\r\n                        {formatPatrolId(defect.patrolResult.patrol.id)}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </Button>\r\n              </div>\r\n            )}\r\n\r\n            {/* Detail */}\r\n            <div className=\"flex flex-col mb-4\">\r\n              <div className=\"flex flex-row mb-1\">\r\n                <div className=\"flex flex-row pr-2 items-center pt-1\">\r\n                  <span className=\"material-symbols-outlined text-muted-foreground cursor-default user-select-none mr-1\">\r\n                    data_info_alert\r\n                  </span>\r\n                  <p className=\"text-base font-semibold text-muted-foreground cursor-default user-select-none\">\r\n                    Detail\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <Textarea\r\n                  className=\"text-xl text-text w-full h-40 border-none bg-secondary pointer-events-none\"\r\n                  placeholder=\"Description\"\r\n                  value={defect.description}\r\n                  readOnly\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Zone */}\r\n            <div className=\"flex flex-col mb-4\">\r\n              <div className=\"flex flex-row mb-1\">\r\n                <div className=\"flex flex-row pr-2 items-center pt-1\">\r\n                  <span className=\"material-symbols-outlined text-muted-foreground cursor-default user-select-none mr-1\">\r\n                    location_on\r\n                  </span>\r\n                  <p className=\"text-base font-semibold text-muted-foreground cursor-default user-select-none\">\r\n                    Zone\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"p-2 rounded-md bg-secondary map-container cursor-default user-select-none \">\r\n                <Map\r\n                  disable={true}\r\n                  initialSelectedZones={[defect.patrolResult.zoneId]}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Before After */}\r\n            <div className=\"grid grid-cols-2 gap-4 w-full h-full mb-4\">\r\n              {/* before */}\r\n              <div className=\"flex flex-col w-full min-h-full\">\r\n                <div className=\"flex items-center\">\r\n                  <p className=\"text-base font-semibold text-muted-foreground mb-1 cursor-default user-select-none\">\r\n                    {t(\"Before\")}\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"flex flex-col justify-between gap-4\">\r\n                  <div className=\"flex sm:max-h-[263px] xl:min-h-[500px] xl:max-h-[700px]\">\r\n                    <AspectRatio\r\n                      ratio={4 / 3}\r\n                      className=\"bg-secondary rounded-md sm:max-h-[263px] xl:min-h-[500px] xl:max-h-[700px]\"\r\n                    >\r\n                      <div\r\n                        className=\"flex items-center justify-center cursor-default user-select-none w-full h-full\"\r\n                        onClick={() => handleBeforeImageClick()}\r\n                      >\r\n                        {beforeImage &&\r\n                        beforeImage.length > 0 &&\r\n                        beforeImage[beforeSlideIndex].path ? ( // ใช้ beforeSlideIndex ที่อัปเดต\r\n                          <Image\r\n                            src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${beforeImage[beforeSlideIndex].path}`} // ใช้ path จาก state\r\n                            alt=\"First Image\"\r\n                            width={800}\r\n                            height={600}\r\n                            className=\"rounded-md object-cover cursor-pointer w-full h-full\"\r\n                            unoptimized\r\n                          />\r\n                        ) : (\r\n                          <div className=\"flex flex-col items-center justify-center text-center space-y-4\">\r\n                            <span className=\"material-symbols-outlined text-border text-4xl\">\r\n                              hourglass_empty\r\n                            </span>\r\n                            <p className=\"text-muted-foreground text-lg font-medium\">\r\n                              {t(\"WaitingForResults\")}\r\n                            </p>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </AspectRatio>\r\n                  </div>\r\n\r\n                  {/* Thumbnail images slider */}\r\n                  <ScrollArea className=\"min-w-full whitespace-nowrap\">\r\n                    <div className=\"flex w-max space-x-4 pb-4\">\r\n                      {beforeImage &&\r\n                        beforeImage.length > 0 &&\r\n                        beforeImage.map((image, index) => (\r\n                          <div\r\n                            key={index}\r\n                            onClick={() => setBeforeSlideIndex(index)}\r\n                            className={`flex justify-center w-[128px] h-[128px] cursor-pointer rounded-md ${\r\n                              beforeSlideIndex === index\r\n                                ? \"border border-destructive\"\r\n                                : \"\"\r\n                            }`}\r\n                          >\r\n                            <Image\r\n                              src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${image.path}`}\r\n                              alt={`Thumbnail ${index}`}\r\n                              width={128}\r\n                              height={128}\r\n                              className=\"object-cover rounded-md\"\r\n                              unoptimized\r\n                            />\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                    <ScrollBar orientation=\"horizontal\" />\r\n                  </ScrollArea>\r\n\r\n                  {isBeforeCarouselOpen &&\r\n                    beforeImage &&\r\n                    beforeImage.length > 0 && (\r\n                      <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n                        <div className=\"relative\">\r\n                          <Carousel\r\n                            setApi={setBeforeApi}\r\n                            className=\"sm:max-w-screen-sm xl:max-w-[1600px]\"\r\n                          >\r\n                            <CarouselContent>\r\n                              {beforeImage.map((image, index) => (\r\n                                <CarouselItem key={index}>\r\n                                  <div className=\"flex justify-center\">\r\n                                    <Card className=\"bg-card border-none\">\r\n                                      <CardContent className=\"flex items-center justify-center h-[400px] w-full md:h-[500px] xl:h-[700px] overflow-hidden p-4\">\r\n                                        <div className=\"flex items-center justify-center h-full w-full\">\r\n                                          <Image\r\n                                            className=\"object-contain w-full h-full\"\r\n                                            src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${image.path}`}\r\n                                            alt={`${image.path}`}\r\n                                            width={800}\r\n                                            height={600}\r\n                                            priority\r\n                                            unoptimized\r\n                                          />\r\n                                        </div>\r\n                                      </CardContent>\r\n                                    </Card>\r\n                                  </div>\r\n                                </CarouselItem>\r\n                              ))}\r\n                            </CarouselContent>\r\n                            <CarouselPrevious />\r\n                            <CarouselNext />\r\n                          </Carousel>\r\n                          <div className=\"flex justify-center mt-4\">\r\n                            {beforeImage.map((_, index) => (\r\n                              <button\r\n                                key={index}\r\n                                onClick={() => setBeforeSlideIndex(index)} // ใช้ index ในการเลือก slide\r\n                                className={`h-3 w-3 rounded-full mx-1 ${\r\n                                  beforeSlideIndex === index\r\n                                    ? \"bg-white\"\r\n                                    : \"bg-gray-400\"\r\n                                }`}\r\n                                aria-label={`Slide ${index + 1}`}\r\n                              />\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                        <button\r\n                          onClick={handleCloseBeforeCarousel}\r\n                          className=\"absolute top-4 right-4 text-white\"\r\n                        >\r\n                          Close\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                </div>\r\n              </div>\r\n\r\n              {/* after */}\r\n              <div className=\"flex flex-col w-full min-h-full\">\r\n                <div className=\"flex items-center\">\r\n                  <p className=\"text-base font-semibold text-muted-foreground mb-1 cursor-default user-select-none\">\r\n                    {t(\"After\")}\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"flex flex-col justify-between gap-4\">\r\n                  <div className=\"flex sm:max-h-[263px] xl:min-h-[500px] xl:max-h-[700px]\">\r\n                    <AspectRatio\r\n                      ratio={4 / 3}\r\n                      className=\"bg-secondary rounded-md sm:max-h-[263px] xl:min-h-[500px] xl:max-h-[700px]\"\r\n                    >\r\n                      <div\r\n                        className=\"flex items-center justify-center cursor-default user-select-none w-full h-full\"\r\n                        onClick={() => handleAfterImageClick()}\r\n                      >\r\n                        {afterImage &&\r\n                        afterImage.length > 0 &&\r\n                        afterImage[afterSlideIndex].path ? ( // ใช้ afterSlideIndex ที่อัปเดต\r\n                          <Image\r\n                            src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${afterImage[afterSlideIndex].path}`} // ใช้ path จาก state\r\n                            alt=\"Second Image\"\r\n                            width={800}\r\n                            height={600}\r\n                            className=\"rounded-md object-cover cursor-pointer w-full h-full\"\r\n                            unoptimized\r\n                          />\r\n                        ) : (\r\n                          <div className=\"flex flex-col items-center justify-center text-center space-y-4\">\r\n                            <span className=\"material-symbols-outlined text-border text-4xl\">\r\n                              hourglass_empty\r\n                            </span>\r\n                            <p className=\"text-muted-foreground text-lg font-medium\">\r\n                              {t(\"WaitingForResults\")}\r\n                            </p>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </AspectRatio>\r\n                  </div>\r\n\r\n                  {/* Thumbnail images slider */}\r\n                  <ScrollArea className=\"min-w-full w-full whitespace-nowrap\">\r\n                    <div className=\"flex w-max space-x-4 pb-4\">\r\n                      {afterImage &&\r\n                        afterImage.length > 0 &&\r\n                        afterImage.map((image, index) => (\r\n                          <div\r\n                            key={index}\r\n                            onClick={() => setAfterSlideIndex(index)}\r\n                            className={`flex justify-center min-w-[128px] h-[128px] cursor-pointer rounded-md ${\r\n                              afterSlideIndex === index\r\n                                ? \"border border-destructive\"\r\n                                : \"\"\r\n                            }`}\r\n                          >\r\n                            <Image\r\n                              src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${image.path}`}\r\n                              alt={`Thumbnail ${index}`}\r\n                              width={128}\r\n                              height={128}\r\n                              className=\"object-cover rounded-md\"\r\n                              unoptimized\r\n                            />\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                    <ScrollBar orientation=\"horizontal\" />\r\n                  </ScrollArea>\r\n\r\n                  {isAfterCarouselOpen &&\r\n                    afterImage &&\r\n                    afterImage.length > 0 && (\r\n                      <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n                        <div className=\"relative\">\r\n                          <Carousel\r\n                            setApi={setAfterApi}\r\n                            className=\"sm:max-w-screen-sm xl:max-w-[1600px]\"\r\n                          >\r\n                            <CarouselContent>\r\n                              {afterImage.map((image, index) => (\r\n                                <CarouselItem key={index}>\r\n                                  <div className=\"flex justify-center\">\r\n                                    <Card className=\"bg-card border-none\">\r\n                                      <CardContent className=\"flex items-center justify-center h-[400px] w-full md:h-[500px] xl:h-[700px] overflow-hidden p-4\">\r\n                                        <div className=\"flex items-center justify-center h-full w-full\">\r\n                                          <Image\r\n                                            className=\"object-contain w-full h-full\"\r\n                                            src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${image.path}`}\r\n                                            alt={`${image.path}`}\r\n                                            width={800}\r\n                                            height={600}\r\n                                            priority\r\n                                            unoptimized\r\n                                          />\r\n                                        </div>\r\n                                      </CardContent>\r\n                                    </Card>\r\n                                  </div>\r\n                                </CarouselItem>\r\n                              ))}\r\n                            </CarouselContent>\r\n                            <CarouselPrevious />\r\n                            <CarouselNext />\r\n                          </Carousel>\r\n                          <div className=\"flex justify-center mt-4\">\r\n                            {afterImage.map((_, index) => (\r\n                              <button\r\n                                key={index}\r\n                                onClick={() => setAfterSlideIndex(index)} // ใช้ index ในการเลือก slide\r\n                                className={`h-3 w-3 rounded-full mx-1 ${\r\n                                  afterSlideIndex === index\r\n                                    ? \"bg-white\"\r\n                                    : \"bg-gray-400\"\r\n                                }`}\r\n                                aria-label={`Slide ${index + 1}`}\r\n                              />\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                        <button\r\n                          onClick={handleCloseAfterCarousel}\r\n                          className=\"absolute top-4 right-4 text-white\"\r\n                        >\r\n                          Close\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {isDialogOpen && (\r\n              <AlertCustom\r\n                title={a(alertBoxTitle)}\r\n                description={a(alertBoxDescription)}\r\n                primaryButtonText={t(\"Confirm\")}\r\n                primaryIcon=\"check\"\r\n                primaryVariant=\"destructive\"\r\n                secondaryButtonText={t(\"Cancel\")}\r\n                backResult={handleDialogResult}\r\n              ></AlertCustom>\r\n            )}\r\n            <div>\r\n              {defect.status === \"resolved\" && page === \"patrol-defect\" && (\r\n                <div className=\"flex space-x-2 justify-end\">\r\n                  <Button\r\n                    variant=\"destructive\"\r\n                    size={\"lg\"}\r\n                    onClick={() =>\r\n                      handleReworkOrVerifyDefect(\r\n                        defect.id,\r\n                        \"pending_inspection\",\r\n                        defect.supervisor.id\r\n                      )\r\n                    }\r\n                  >\r\n                    <span className=\"material-symbols-outlined mr-2 text-[20px]\">\r\n                      cancel\r\n                    </span>\r\n                    Rework\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"success\"\r\n                    size={\"lg\"}\r\n                    onClick={() =>\r\n                      handleReworkOrVerifyDefect(\r\n                        defect.id,\r\n                        \"completed\",\r\n                        defect.supervisor.id\r\n                      )\r\n                    }\r\n                  >\r\n                    <span className=\"material-symbols-outlined mr-2 text-[20px]\">\r\n                      check_circle\r\n                    </span>\r\n                    Verify\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </AccordionContent>\r\n      </AccordionItem>\r\n    </Accordion>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\socket-indicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\socket-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\tab-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\text-tooltip.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IUser' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Avatar' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AvatarFallback' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AvatarImage' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatTime' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getInitials' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getUserVariant' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Skeleton' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BadgeCustom' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserTooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'t' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":25,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'locale' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":26,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactNode, useCallback, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"./ui/tooltip\";\r\nimport { IUser } from \"@/app/type\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"./ui/avatar\";\r\nimport { formatTime, getInitials, getUserVariant } from \"@/lib/utils\";\r\nimport { Skeleton } from \"./ui/skeleton\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport BadgeCustom from \"./badge-custom\";\r\nimport { UserTooltip } from \"./user-tooltip\";\r\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"./ui/hover-card\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"./ui/popover\";\r\n\r\nexport interface IUserTooltip {\r\n  object: any;\r\n  children: ReactNode;\r\n}\r\n\r\nexport function TextTooltip({ object, children }: IUserTooltip) {\r\n  const triggerContainerRef = useRef<HTMLDivElement>(null);\r\n  const t = useTranslations(\"General\");\r\n  const locale = useLocale();\r\n  const [open, setOpen] = useState(false);\r\n  const openType = useRef<\"hover\" | \"click\" | null>(null);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  const handleMouseEnter = () => {\r\n    if (openType.current !== \"click\") {\r\n      timeoutRef.current = setTimeout(() => {\r\n        openType.current = \"hover\";\r\n        setOpen(true);\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n    if (openType.current === \"hover\") {\r\n      setOpen(false);\r\n      openType.current = null;\r\n    }\r\n  };\r\n  // Modify the existing wheel handler\r\n  const handleWheel = useCallback(() => {\r\n    handleClose();\r\n  }, []);\r\n\r\n  const handleClick = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    // เคลียร์ timeout ของ hover ทันทีเมื่อมีการคลิก\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = null;\r\n    }\r\n    openType.current = \"click\";\r\n    setOpen(true); // เปิด Popover โดยตรง\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    openType.current = null;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      if (openType.current === \"hover\") {\r\n        handleClose();\r\n      } else if (openType.current === \"click\") {\r\n        if (window.innerWidth <= 768) {\r\n          handleClose();\r\n        }\r\n      }\r\n    };\r\n    handleWheel;\r\n\r\n    window.addEventListener(\"scroll\", handleScroll, {\r\n      capture: true,\r\n      passive: true,\r\n    });\r\n    window.addEventListener(\"wheel\", handleWheel, { passive: true });\r\n\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", handleScroll, true);\r\n      window.removeEventListener(\"wheel\", handleWheel);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      handleClose();\r\n    };\r\n\r\n    // Detect both window scroll and Scroll Area scroll\r\n    const scrollArea = triggerContainerRef.current?.closest(\r\n      \"[data-radix-scroll-area-viewport], .scroll-area\" // Add your Scroll Area's class/attribute\r\n    );\r\n\r\n    if (scrollArea) {\r\n      scrollArea.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    window.addEventListener(\"scroll\", handleScroll, { passive: true });\r\n\r\n    return () => {\r\n      if (scrollArea) {\r\n        scrollArea.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n      window.removeEventListener(\"scroll\", handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  const TooltipContent = ({ object }: { object: any }) => {\r\n    return (\r\n        <div className=\"flex flex-col gap-2 w-auto h-auto text-sm max-w-[500px] max-h-[500px] overflow-auto\">\r\n        {JSON.stringify(object, null, 2)\r\n          .split(\"\\n\")\r\n          .map((line, index) => (\r\n            <p key={index} className=\"break-words whitespace-pre-wrap\">\r\n              {line}\r\n            </p>\r\n          ))}\r\n      </div>\r\n      \r\n    );\r\n  };\r\n\r\n  return (\r\n    <Popover\r\n      open={open}\r\n      onOpenChange={(isOpen) => {\r\n        if (!isOpen) handleClose();\r\n      }}\r\n    >\r\n      <HoverCard\r\n        open={open && openType.current === \"hover\"}\r\n        onOpenChange={(isHoverOpen) => {\r\n          if (!isHoverOpen && openType.current === \"hover\") handleClose();\r\n        }}\r\n      >\r\n        <div\r\n          ref={triggerContainerRef}\r\n          onMouseEnter={handleMouseEnter}\r\n          onMouseLeave={handleMouseLeave}\r\n        >\r\n          <HoverCardTrigger asChild>\r\n            <PopoverTrigger asChild>\r\n              <div className=\"cursor-pointer\" onClick={handleClick}>\r\n                {children}\r\n              </div>\r\n            </PopoverTrigger>\r\n          </HoverCardTrigger>\r\n\r\n          <HoverCardContent\r\n            className=\"w-full px-2.5 py-1.5 bg-card-foreground text-card\"\r\n            zIndex={0}\r\n            side=\"bottom\"\r\n            align=\"start\"\r\n            onClick={(e) => e.stopPropagation()}\r\n          ></HoverCardContent>\r\n          <PopoverContent\r\n            className=\"w-full z-[100] px-2.5 py-1.5 bg-card-foreground text-card\"\r\n            side=\"bottom\"\r\n            align=\"start\"\r\n            onInteractOutside={(e) => {\r\n              const target = e.target as HTMLElement;\r\n              const isUserTooltipContent = target?.closest?.(\r\n                \"[data-radix-tooltip-content]\"\r\n              );\r\n              const isUserTooltipTrigger = target?.closest?.(\".user-tooltip\");\r\n\r\n              if (isUserTooltipContent || isUserTooltipTrigger) {\r\n                e.preventDefault();\r\n              }\r\n            }}\r\n          >\r\n            <TooltipContent object={object} />\r\n          </PopoverContent>\r\n        </div>\r\n      </HoverCard>\r\n    </Popover>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\textfield.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":61,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":30,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'props' is defined but never used. Allowed unused args must match /^_/u.","line":63,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\user-dropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\user-tooltip.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'object' is defined but never used. Allowed unused args must match /^_/u.","line":121,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":121,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n * Input:\r\n\r\n * Output:\r\n **/\r\n\r\nimport { ReactNode, useEffect, useRef } from \"react\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"./ui/tooltip\";\r\nimport { IUser } from \"@/app/type\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"./ui/avatar\";\r\nimport { getInitials, getUserVariant } from \"@/lib/utils\";\r\nimport { Skeleton } from \"./ui/skeleton\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport BadgeCustom from \"./badge-custom\";\r\nimport { useState } from \"react\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"./ui/popover\";\r\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"./ui/hover-card\";\r\n\r\nexport interface IUserTooltip {\r\n  user: IUser;\r\n  children: ReactNode;\r\n}\r\n\r\nexport function UserTooltip({ user, children }: IUserTooltip) {\r\n  const triggerContainerRef = useRef<HTMLDivElement>(null);\r\n  const t = useTranslations(\"General\");\r\n  const [open, setOpen] = useState(false);\r\n  const openType = useRef<'hover' | 'click' | null>(null);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  const handleMouseEnter = () => {\r\n    if (openType.current !== 'click') {\r\n      timeoutRef.current = setTimeout(() => {\r\n        openType.current = 'hover';\r\n        setOpen(true);\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n    if (openType.current === 'hover') {\r\n      setOpen(false);\r\n      openType.current = null;\r\n    }\r\n  };\r\n\r\n  const handleClick = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    // เคลียร์ timeout ของ hover ทันทีเมื่อมีการคลิก\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = null;\r\n    }\r\n    openType.current = 'click';\r\n    setOpen(true); // เปิด Popover โดยตรง\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    openType.current = null;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      if (openType.current === 'hover') {\r\n        handleClose();\r\n      } else if (openType.current === 'click') {\r\n        if (window.innerWidth <= 768) {\r\n          handleClose();\r\n        }\r\n      }\r\n    };\r\n    const handleWheel = () => {\r\n      handleClose();\r\n    };\r\n\r\n    window.addEventListener('scroll', handleScroll, { capture: true, passive: true });\r\n    window.addEventListener('wheel', handleWheel, { passive: true });\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll, true);\r\n      window.removeEventListener('wheel', handleWheel);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      handleClose();\r\n    };\r\n\r\n    // Detect both window scroll and Scroll Area scroll\r\n    const scrollArea = triggerContainerRef.current?.closest(\r\n      '[data-radix-scroll-area-viewport], .scroll-area' // Add your Scroll Area's class/attribute\r\n    );\r\n\r\n    if (scrollArea) {\r\n      scrollArea.addEventListener('scroll', handleScroll);\r\n    }\r\n\r\n    window.addEventListener('scroll', handleScroll, { passive: true });\r\n\r\n    return () => {\r\n      if (scrollArea) {\r\n        scrollArea.removeEventListener('scroll', handleScroll);\r\n      }\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []);\r\n\r\n\r\n  const TooltipContent = ({ object }: { object: any }) => {\r\n    return (\r\n      <div className=\"flex justify-start items-start\">\r\n        {/* Avatar Section */}\r\n        <div className=\"pr-4\">\r\n          {user.profile.name ? (\r\n            <Avatar className=\"custom-shadow h-[60px] w-[60px]\">\r\n              <AvatarImage\r\n                src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${user.profile.image?.path}`}\r\n              />\r\n              <AvatarFallback id={user.id.toString()} className=\"text-lg\">\r\n                {getInitials(user.profile.name)}\r\n              </AvatarFallback>\r\n            </Avatar>\r\n          ) : (\r\n            <Skeleton className=\"w-[22px] h-[22px] rounded-full bg-input\" />\r\n          )}\r\n        </div>\r\n\r\n        {/* User Info Section */}\r\n        <div className=\"text-card-foreground flex flex-col w-[280px]\">\r\n          {user.profile.name ? (\r\n            <div className=\"flex flex-col gap-2\">\r\n              <div className=\"text-lg font-semibold truncate w-full\">\r\n                {user.profile.name}\r\n              </div>\r\n              <div>\r\n                <p\r\n                  className={`text-sm text-muted-foreground truncate ${user.email ? \"\" : \"text-red-500\"\r\n                    }`}\r\n                >\r\n                  {user.email ? user.email : \"no email provided\"}\r\n                </p>\r\n                <p\r\n                  className={`text-sm text-muted-foreground truncate${user.profile.tel ? \"\" : \"text-red-500\"\r\n                    }`}\r\n                >\r\n                  {user.profile.tel ? user.profile.tel : \"no tel provided\"}\r\n                </p>\r\n              </div>\r\n              <BadgeCustom\r\n                variant={getUserVariant(user.role).variant}\r\n                iconName={getUserVariant(user.role).iconName}\r\n                showIcon={true}\r\n                shape=\"square\"\r\n              >\r\n                {t(getUserVariant(user.role).variantName)}\r\n              </BadgeCustom>\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-destructive\">\r\n              <div className=\"truncate w-full\">{user.username}</div>\r\n              <div className=\"text-[14px]\">{t(\"NoProfileProvided\")}</div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Popover\r\n      open={open}\r\n      onOpenChange={(isOpen) => {\r\n        if (!isOpen) handleClose()\r\n      }}\r\n    >\r\n      <HoverCard\r\n        open={open && openType.current === 'hover'}\r\n        onOpenChange={(isHoverOpen) => {\r\n          if (!isHoverOpen && openType.current === 'hover') handleClose();\r\n        }}\r\n      >\r\n        <div\r\n          ref={triggerContainerRef}\r\n          onMouseEnter={handleMouseEnter}\r\n          onMouseLeave={handleMouseLeave}\r\n        >\r\n          <HoverCardTrigger asChild>\r\n            <PopoverTrigger asChild>\r\n              <div className=\"cursor-pointer\" onClick={handleClick}>\r\n                {children}\r\n              </div>\r\n            </PopoverTrigger>\r\n          </HoverCardTrigger>\r\n\r\n          <HoverCardContent\r\n            className=\"w-full px-6 py-4\"\r\n            zIndex={9999}\r\n            side=\"bottom\"\r\n            align=\"start\"\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            <TooltipContent object={user} />\r\n          </HoverCardContent>\r\n          <PopoverContent\r\n            className=\"w-full z-[100] px-6 py-4\"\r\n            side=\"bottom\"\r\n            align=\"start\"\r\n            onInteractOutside={(e) => {\r\n              const target = e.target as HTMLElement;\r\n              const isUserTooltipContent = target?.closest?.('[data-radix-tooltip-content]');\r\n              const isUserTooltipTrigger = target?.closest?.('.user-tooltip');\r\n\r\n              if (isUserTooltipContent || isUserTooltipTrigger) {\r\n                e.preventDefault();\r\n              }\r\n            }}\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            <TooltipContent object={user} />\r\n          </PopoverContent>\r\n        </div>\r\n      </HoverCard>\r\n    </Popover>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\version-tooltip.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IUser' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getUserVariant' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BadgeCustom' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleWheel' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":48,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReactNode, useCallback, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"./ui/tooltip\";\r\nimport { IUser } from \"@/app/type\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"./ui/avatar\";\r\nimport { formatTime, getInitials, getUserVariant } from \"@/lib/utils\";\r\nimport { Skeleton } from \"./ui/skeleton\";\r\nimport { useLocale, useTranslations } from \"next-intl\";\r\nimport BadgeCustom from \"./badge-custom\";\r\nimport { UserTooltip } from \"./user-tooltip\";\r\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"./ui/hover-card\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"./ui/popover\";\r\n\r\nexport interface IUserTooltip {\r\n  object: any;\r\n  children: ReactNode;\r\n}\r\n\r\nexport function VersionTooltip({ object, children }: IUserTooltip) {\r\n  const triggerContainerRef = useRef<HTMLDivElement>(null);\r\n  const t = useTranslations(\"General\");\r\n  const locale = useLocale();\r\n  const [open, setOpen] = useState(false);\r\n  const openType = useRef<'hover' | 'click' | null>(null);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  const handleMouseEnter = () => {\r\n    if (openType.current !== 'click') {\r\n      timeoutRef.current = setTimeout(() => {\r\n        openType.current = 'hover';\r\n        setOpen(true);\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n    if (openType.current === 'hover') {\r\n      setOpen(false);\r\n      openType.current = null;\r\n    }\r\n  };\r\n  // Modify the existing wheel handler\r\n  const handleWheel = useCallback(() => {\r\n    handleClose();\r\n  }, []);\r\n  \r\n  const handleClick = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    // เคลียร์ timeout ของ hover ทันทีเมื่อมีการคลิก\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = null;\r\n    }\r\n    openType.current = 'click';\r\n    setOpen(true); // เปิด Popover โดยตรง\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    openType.current = null;\r\n  };\r\n  \r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      // Original first effect's logic\r\n      if (openType.current === 'hover') {\r\n        handleClose();\r\n      } else if (openType.current === 'click' && window.innerWidth <= 768) {\r\n        handleClose();\r\n      }\r\n      \r\n      // Second effect's logic\r\n      handleClose();\r\n    };\r\n  \r\n    const handleWheel = () => {\r\n      handleClose();\r\n    };\r\n  \r\n    // Find scroll area parent\r\n    const scrollArea = triggerContainerRef.current?.closest(\r\n      '[data-radix-scroll-area-viewport], .scroll-area'\r\n    );\r\n  \r\n    // Add event listeners\r\n    if (scrollArea) {\r\n      scrollArea.addEventListener('scroll', handleScroll);\r\n    }\r\n    window.addEventListener('scroll', handleScroll, { passive: true });\r\n    window.addEventListener('wheel', handleWheel, { passive: true });\r\n  \r\n    return () => {\r\n      // Cleanup listeners\r\n      if (scrollArea) {\r\n        scrollArea.removeEventListener('scroll', handleScroll);\r\n      }\r\n      window.removeEventListener('scroll', handleScroll);\r\n      window.removeEventListener('wheel', handleWheel);\r\n    };\r\n  }, []); // Keep dependency array empty since all functions are stable\r\n\r\n\r\n\r\n  const TooltipContent = ({ object }: { object: any }) => {\r\n    return (\r\n      <div className=\"flex flex-col gap-4\">\r\n        <span className=\"text-card-foreground text-lg font-bold flex items-center\">\r\n          <span className=\"material-symbols-outlined mr-1\">history</span>\r\n          {t(\"Version\")} {object.version}\r\n        </span>\r\n        <div className=\"flex flex-col justify-start items-start\">\r\n          {object.user.profile ? (\r\n            <div className=\"flex flex-row justify-center items-center gap-2 text-muted-foreground\">\r\n              <div className=\"text-muted-foreground text-base font-semibold w-fit\">\r\n                {t(\"UpdateBy\")}\r\n              </div>\r\n              <UserTooltip user={object.user}>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Avatar>\r\n                    <AvatarImage\r\n                      src={`${process.env.NEXT_PUBLIC_UPLOAD_URL}/${object.user.profile.image?.path}`}\r\n                    />\r\n                    <AvatarFallback id={object.user.id.toString()}>\r\n                      {getInitials(object.user.profile.name)}\r\n                    </AvatarFallback>\r\n                  </Avatar>\r\n                  {object.user.profile.name}\r\n                </div>\r\n              </UserTooltip>\r\n            </div>\r\n          ) : (\r\n            <Skeleton className=\"h-12 w-12 rounded-full\" />\r\n          )}\r\n          <div className=\"flex gap-2 text-muted-foreground\">\r\n            <div className=\"text-muted-foreground text-base font-semibold\">{t(\"UpdateAt\")}</div>\r\n            {formatTime(object.updatedAt, locale)}\r\n          </div>\r\n        </div>\r\n        <div className=\"flex justify-between w-full\">\r\n          <div className=\"font-bold text-lg text-muted-foreground\">\r\n            {t(\"Total\")}\r\n          </div>\r\n          <div className=\"font-bold text-lg text-muted-foreground\">\r\n            {object.version} {t(\"Version\")}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Popover\r\n      open={open}\r\n      onOpenChange={(isOpen) => {\r\n        if (!isOpen) handleClose()\r\n      }}\r\n    >\r\n      <HoverCard\r\n        open={open && openType.current === 'hover'}\r\n        onOpenChange={(isHoverOpen) => {\r\n          if (!isHoverOpen && openType.current === 'hover') handleClose();\r\n        }}\r\n      >\r\n        <div\r\n          ref={triggerContainerRef}\r\n          onMouseEnter={handleMouseEnter}\r\n          onMouseLeave={handleMouseLeave}\r\n        >\r\n          <HoverCardTrigger asChild>\r\n            <PopoverTrigger asChild>\r\n              <div className=\"cursor-pointer\" onClick={handleClick}>\r\n                {children}\r\n              </div>\r\n            </PopoverTrigger>\r\n          </HoverCardTrigger>\r\n\r\n          <HoverCardContent\r\n            className=\"w-full px-6 py-4\"\r\n            zIndex={0}\r\n            side=\"bottom\"\r\n            align=\"start\"\r\n            onBlur={() => handleClose()}\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            <TooltipContent object={object} />\r\n          </HoverCardContent>\r\n          <PopoverContent\r\n            className=\"w-full z-[100] px-6 py-4\"\r\n            side=\"bottom\"\r\n            align=\"start\"\r\n            onBlur={() => handleClose()}\r\n            onInteractOutside={(e) => {\r\n              const target = e.target as HTMLElement;\r\n              const isUserTooltipContent = target?.closest?.('[data-radix-tooltip-content]');\r\n              const isUserTooltipTrigger = target?.closest?.('.user-tooltip');\r\n\r\n              if (isUserTooltipContent || isUserTooltipTrigger) {\r\n                e.preventDefault();\r\n              }\r\n            }}\r\n          >\r\n            <TooltipContent object={object} />\r\n          </PopoverContent>\r\n        </div>\r\n      </HoverCard>\r\n    </Popover>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\components\\zone-tooltip.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IUser' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Avatar' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AvatarFallback' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AvatarImage' is defined but never used. Allowed unused vars must match /^_/u.","line":16,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getInitials' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getUserVariant' is defined but never used. Allowed unused vars must match /^_/u.","line":17,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Skeleton' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'BadgeCustom' is defined but never used. Allowed unused vars must match /^_/u.","line":20,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'object' is defined but never used. Allowed unused args must match /^_/u.","line":120,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * คำอธิบาย:\r\n * Input:\r\n\r\n * Output:\r\n **/\r\n\r\nimport { ReactNode, useEffect, useRef } from \"react\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"./ui/tooltip\";\r\nimport { IUser, IZone } from \"@/app/type\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"./ui/avatar\";\r\nimport { getInitials, getUserVariant } from \"@/lib/utils\";\r\nimport { Skeleton } from \"./ui/skeleton\";\r\nimport { useTranslations } from \"next-intl\";\r\nimport BadgeCustom from \"./badge-custom\";\r\nimport { useState } from \"react\";\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"./ui/popover\";\r\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"./ui/hover-card\";\r\nimport { ScrollArea } from \"./ui/scroll-area\";\r\n\r\nexport interface IZoneTooltip {\r\n  zonesName?: IZone[] | string[];\r\n  zones?: IZone[];\r\n  children: ReactNode;\r\n}\r\n\r\nexport function ZoneTooltip({ zonesName,zones, children }: IZoneTooltip) {\r\n  const t = useTranslations(\"General\");\r\n  const z = useTranslations(\"Zone\");\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const openType = useRef<\"hover\" | \"click\" | null>(null);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  const handleMouseEnter = () => {\r\n    if (openType.current !== \"click\") {\r\n      timeoutRef.current = setTimeout(() => {\r\n        openType.current = \"hover\";\r\n        setOpen(true);\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\r\n    if (openType.current === \"hover\") {\r\n      setOpen(false);\r\n      openType.current = null;\r\n    }\r\n  };\r\n\r\n  const handleClick = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    // เคลียร์ timeout ของ hover ทันทีเมื่อมีการคลิก\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n      timeoutRef.current = null;\r\n    }\r\n    openType.current = \"click\";\r\n    setOpen(true); // เปิด Popover โดยตรง\r\n  };\r\n\r\n \r\n\r\n  \r\n  const triggerContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    openType.current = null;\r\n  };\r\n  \r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      // Original first effect's logic\r\n      if (openType.current === 'hover') {\r\n        handleClose();\r\n      } else if (openType.current === 'click' && window.innerWidth <= 768) {\r\n        handleClose();\r\n      }\r\n      \r\n      // Second effect's logic\r\n      handleClose();\r\n    };\r\n  \r\n    const handleWheel = () => {\r\n      handleClose();\r\n    };\r\n  \r\n    // Find scroll area parent\r\n    const scrollArea = triggerContainerRef.current?.closest(\r\n      '[data-radix-scroll-area-viewport], .scroll-area'\r\n    );\r\n  \r\n    // Add event listeners\r\n    if (scrollArea) {\r\n      scrollArea.addEventListener('scroll', handleScroll);\r\n    }\r\n    window.addEventListener('scroll', handleScroll, { passive: true });\r\n    window.addEventListener('wheel', handleWheel, { passive: true });\r\n  \r\n    return () => {\r\n      // Cleanup listeners\r\n      if (scrollArea) {\r\n        scrollArea.removeEventListener('scroll', handleScroll);\r\n      }\r\n      window.removeEventListener('scroll', handleScroll);\r\n      window.removeEventListener('wheel', handleWheel);\r\n    };\r\n  }, []); // Keep dependency array empty since all functions are stable\r\n\r\n\r\n\r\n  const TooltipContent =({ object }: { object: any }) => {\r\n    return (\r\n      <div className=\"custom-shadow rounded-md px-2.5 py-1.5 w-fit flex flex-col items-start justify-start\">\r\n        <h3 className=\"text-sm font-semibold text-muted-foreground mb-2\">\r\n          {t(\"Zone\")}\r\n        </h3>\r\n        <ScrollArea className=\"h-32 rounded-md\">\r\n          {(zonesName ?? zones)?.map((zone, index, arr) => (\r\n            <div key={index} className=\"text-sm text-left\">\r\n              -{\" \"}\r\n              <span className={zone.userId || zonesName ? \"\" : \"text-destructive\"}>\r\n              {z(zone.name || zone)}\r\n                {index < arr.length - 1 && \", \"}\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </ScrollArea>\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <Popover\r\n      open={open}\r\n      onOpenChange={(isOpen) => {\r\n        if (!isOpen) handleClose();\r\n      }}\r\n    >\r\n      <HoverCard\r\n        open={open && openType.current === \"hover\"}\r\n        onOpenChange={(isHoverOpen) => {\r\n          if (!isHoverOpen && openType.current === \"hover\") handleClose();\r\n        }}\r\n      >\r\n        <div ref={triggerContainerRef} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\r\n          <HoverCardTrigger asChild>\r\n            <PopoverTrigger asChild>\r\n              <div className=\"cursor-pointer\" onClick={handleClick}>\r\n                {children}\r\n              </div>\r\n            </PopoverTrigger>\r\n          </HoverCardTrigger>\r\n\r\n          <HoverCardContent\r\n            className=\"w-full p-0 bg-card-foreground text-card\"\r\n            zIndex={9999}\r\n            side=\"bottom\"\r\n            align=\"start\"\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n          </HoverCardContent>\r\n          <PopoverContent\r\n            className=\"w-full p-0 bg-card-foreground text-card\"\r\n            side=\"bottom\"\r\n            align=\"start\"\r\n            onInteractOutside={(e) => {\r\n              const target = e.target as HTMLElement;\r\n              const isUserTooltipContent = target?.closest?.(\r\n                \"[data-radix-tooltip-content]\"\r\n              );\r\n              const isUserTooltipTrigger = target?.closest?.(\".user-tooltip\");\r\n\r\n              if (isUserTooltipContent || isUserTooltipTrigger) {\r\n                e.preventDefault();\r\n              }\r\n            }}\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            <TooltipContent object={zonesName} />\r\n          </PopoverContent>\r\n        </div>\r\n      </HoverCard>\r\n    </Popover>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\constants\\menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\constants\\zone-criteria.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\context\\patrol-context.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IPatrolChecklist' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Skeleton' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ReactNode' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useRef' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":76,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":82},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useDebugValue' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":84,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":97},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'boolean' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'IpVersion' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AlertCustom' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":21}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'zone' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":300,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":300,"endColumn":32,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IDefect, IPatrol, IPatrolChecklist, IPatrolResult, IUser } from \"@/app/type\";\r\nimport Loading from \"@/components/loading\";\r\nimport { useSocket } from \"@/components/socket-provider\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { fetchData } from \"@/lib/utils\";\r\nimport { notFound, useParams } from \"next/navigation\";\r\nimport React, { createContext, useContext, useState, ReactNode, useEffect, useRef, useDebugValue } from \"react\";\r\nimport { boolean, IpVersion } from \"zod\";\r\nimport { AlertCustom } from \"@/components/alert-custom\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { useTranslations } from \"next-intl\";\r\n\r\ninterface IPatrolContext {\r\n    patrol: IPatrol | null;\r\n    patrolResults: IPatrolResult[];\r\n    user: IUser | null;\r\n    lock: boolean;\r\n    isAlertOpen: boolean;\r\n    handleResult: (patrolResult: IPatrolResult) => void;\r\n    handleUpdateResult: (patrolResult: IPatrolResult[]) => void;\r\n    toggleLock: () => void;\r\n    handleStartPatrol: () => void;\r\n    handleFinishPatrol: () => void;\r\n    fetchRealtimeData: (defect: IDefect, actionType: string) => void;\r\n    calculateProgress: () => number;\r\n    handleOpenDialog: () => void\r\n    handleCloseDialog: () => void\r\n    itemCounts: (patrol: IPatrol, results: IPatrolResult[]) => void\r\n    mounted: boolean;\r\n    canFinish: boolean;\r\n    defects: IDefect[]\r\n    countItems: number\r\n    countFails: number\r\n    countDefects: number\r\n    patrolUser: IUser[]\r\n    isHovered: boolean\r\n    handleMouseLeave: () => void\r\n    handleMouseEnter: () => void\r\n    formatZone: (patrol: IPatrol) => string\r\n    formatTimeDate: (dateStr: string) => string\r\n    formatId: (id: number) => string\r\n    formatDate: (dateStr: string) => string\r\n}\r\n\r\nconst PatrolContext = createContext<IPatrolContext | undefined>(undefined);\r\n\r\nexport const PatrolProvider: React.FC<{ children: React.ReactNode }> = ({\r\n    children,\r\n}) => {\r\n    const [patrol, setPatrol] = useState<IPatrol | null>(null);\r\n    const [defects, setDefects] = useState<IDefect[]>([]);\r\n    const [patrolResults, setPatrolResults] = useState<IPatrolResult[]>([]);\r\n    const [user, setUser] = useState<IUser | null>(null);\r\n    const { socket, isConnected } = useSocket();\r\n    const [lock, setLock] = useState(false);\r\n    const [mounted, setMounted] = useState(false);\r\n    const params = useParams();\r\n    const a = useTranslations(\"Alert\");\r\n\r\n    const [patrolUser, setPatrolUser] = useState<IUser[] | null>([])\r\n    const [isAlertOpen, setIsAlertOpen] = useState(false);\r\n    const [isHovered, setIsHovered] = useState(false);\r\n\r\n    const [countItems, setCountItems] = useState(0);\r\n    const [countFails, setCountFails] = useState(0);\r\n    const [countDefects, setCountDefects] = useState(0);\r\n\r\n    const itemCounts = (patrol: IPatrol, results: IPatrolResult[]) => {\r\n        let itemCounts = 0\r\n        patrol?.patrolChecklists.forEach(patrolChecklist => {\r\n            // นับจำนวน item แต่ละประเภท\r\n            patrolChecklist.checklist.items.forEach(item => {\r\n                item.itemZones.forEach(() => {\r\n                    itemCounts++\r\n                })\r\n            });\r\n        });\r\n\r\n        let countItems = itemCounts;\r\n        let countFails = 0;\r\n        let countDefects = 0;\r\n\r\n        if (patrol?.status !== \"pending\" && patrol?.status !== \"scheduled\") {\r\n            if (results) {\r\n                for (const patrolResult of results) {\r\n                    if (patrolResult.status === false) {\r\n                        countFails++;\r\n                        if (patrolResult.defects && patrolResult.defects.length !== 0) {\r\n                            countDefects += patrolResult.defects.length;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        setCountItems(countItems)\r\n        setCountFails(countFails)\r\n        setCountDefects(countDefects)\r\n\r\n        return { countItems, countFails, countDefects }\r\n    }\r\n\r\n\r\n    const formatDate = (dateStr: string): string => {\r\n        const date = new Date(dateStr);\r\n        return date.toLocaleDateString('en-GB');\r\n    };\r\n\r\n    const formatId = (id: number): string => {\r\n        return `P${id.toString().padStart(4, '0')}`;\r\n    };\r\n\r\n    const formatTimeDate = (dateStr: string): string => {\r\n        const date = new Date(dateStr);\r\n        const hours = date.getHours().toString().padStart(2, '0');\r\n        const minutes = date.getMinutes().toString().padStart(2, '0');\r\n        return `${hours}.${minutes}`;\r\n    };\r\n\r\n    const formatZone = (patrol: IPatrol) => {\r\n        const zones = new Set<string>();\r\n        patrol.patrolChecklists.forEach((checklist: any) => {\r\n            checklist.checklist.items.forEach((item: any) => {\r\n                item.itemZones.forEach((zoneObj: any) => {\r\n                    const zoneName = zoneObj.zone.name;\r\n                    if (typeof zoneName === \"string\") {\r\n                        zones.add(zoneName);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n        return Array.from(zones)\r\n            .map(\r\n                (zone) =>\r\n                    zone\r\n                        .split(\"_\") // แยกคำตาม `_`\r\n                        .map(\r\n                            (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\r\n                        ) // ตัวอักษรตัวแรกพิมพ์ใหญ่\r\n                        .join(\" \") // รวมคำด้วยช่องว่าง\r\n            )\r\n            .join(\", \"); // รวมรายการด้วยเครื่องหมายคอมมา\r\n    };\r\n\r\n    const handleMouseEnter = () => {\r\n        setIsHovered(true);\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setIsHovered(false);\r\n    };\r\n\r\n    const handleOpenDialog = () => {\r\n        setIsAlertOpen(true);\r\n    };\r\n\r\n    const handleCloseDialog = () => {\r\n        setIsAlertOpen(false)\r\n    }\r\n\r\n    const totalResults = patrolResults?.length || 0\r\n    const checkedResults =\r\n        patrolResults?.filter((res) => res.status !== null).length || 0;\r\n    const canFinish = checkedResults === totalResults;\r\n\r\n    const getPatrolData = async () => {\r\n        if (params.id) {\r\n            try {\r\n                const data = await fetchData(\"get\", `/patrol/${params.id}?preset=true&result=true`, true);\r\n                setPatrol(data);\r\n                // ดึงข้อมูลจาก localStorage เมื่อ patrol.id มีค่า\r\n                const savedResults = localStorage.getItem(`patrolResults_${patrol.id}`);\r\n                let mergedResults = [...data.results]; // เริ่มต้นด้วยข้อมูลจาก server\r\n                if (savedResults) {\r\n                    const savedResultsParsed = JSON.parse(savedResults);\r\n\r\n                    // รวมข้อมูลจาก localStorage เข้ากับข้อมูลจาก server\r\n                    savedResultsParsed.forEach((savedResult: IPatrolResult) => {\r\n                        const existingIndex = mergedResults.findIndex((r) => r.id === savedResult.id);\r\n\r\n                        if (existingIndex !== -1) {\r\n                            // ถ้ามีผลลัพธ์ใน server ที่มี id เดียวกัน, ให้รวมข้อมูล (ไม่ทับ)\r\n                            mergedResults[existingIndex] = {\r\n                                ...mergedResults[existingIndex],\r\n                                ...savedResult,\r\n                            };\r\n                        } else {\r\n                            // ถ้าไม่มี, ให้เพิ่มผลลัพธ์จาก localStorage ไป\r\n                            mergedResults.push(savedResult);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // อัปเดต state ด้วยข้อมูลที่รวมกัน\r\n                setPatrolResults(mergedResults);\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch patrol data:\", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const getDefectData = async () => {\r\n        try {\r\n            const defectFetch = await fetchData(\"get\", `/patrol/${params.id}/defects`, true);\r\n            setDefects(defectFetch);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch defects data:\", error);\r\n        }\r\n    };\r\n\r\n    const calculateProgress = () => {\r\n        if (!patrol) return 0;\r\n        const checkedResults = patrolResults.filter(\r\n            (res) => res.status !== null && (res.status === false ? (res.comments?.length > 0 || res.defects?.length > 0) : true)\r\n        ).length;\r\n        if (totalResults === 0) return 0;\r\n        return (checkedResults / totalResults) * 100;\r\n    };\r\n\r\n    const toggleLock = () => setLock((prev) => !prev);\r\n\r\n    const handleResult = (patrolResult: IPatrolResult) => {\r\n        setPatrolResults((prevResults) => {\r\n            const existingIndex = prevResults.findIndex(\r\n                (r) => r.id === patrolResult.id\r\n            );\r\n\r\n            let updatedResults;\r\n            if (existingIndex !== -1) {\r\n                updatedResults = [...prevResults];\r\n                updatedResults[existingIndex] = {\r\n                    ...updatedResults[existingIndex],\r\n                    ...patrolResult,\r\n                };\r\n            } else {\r\n                updatedResults = [...prevResults, patrolResult];\r\n            }\r\n            if (socket && patrol?.id) {\r\n                socket.emit(\"update_patrol_result\", {\r\n                    patrolId: patrol.id,\r\n                    result: patrolResult\r\n                });\r\n            }\r\n\r\n            return updatedResults\r\n        });\r\n    };\r\n\r\n    const handleUpdateResult =(patrolResult: IPatrolResult[]) => {\r\n        setPatrolResults(patrolResult)\r\n    };\r\n    \r\n    const handleStartPatrol = async () => {\r\n        setIsAlertOpen(false)\r\n\r\n        if (!patrol) return;\r\n        const patrolId = patrol.id;\r\n        const data = {\r\n            status: patrol?.status,\r\n            checklists: patrol?.patrolChecklists,\r\n        };\r\n\r\n        try {\r\n            const startPatrol = await fetchData(\r\n                \"put\",\r\n                `/patrol/${patrolId}/start`,\r\n                true,\r\n                data\r\n            );\r\n            socket.emit(\"start_patrol\", {\r\n                patrolId: patrol.id,\r\n                patrolData: startPatrol,\r\n            });\r\n            setPatrol(startPatrol)\r\n            setPatrolResults(startPatrol.results)\r\n            toast({\r\n                variant: \"default\",\r\n                title: a(\"PatrolStartTitle\"),\r\n                description: a(\"PatrolStartDescription\"),\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Error starting patrol:\", error);\r\n        }\r\n    };\r\n\r\n    const handleFinishPatrol = async () => {\r\n        if (!patrol) return;\r\n\r\n        const data = {\r\n            status: patrol.status,\r\n            checklists: patrol.patrolChecklists,\r\n            results: patrolResults,\r\n            startTime: patrol.startTime\r\n        };\r\n\r\n        let resultCount = 0;\r\n        for (const checklist of patrol.patrolChecklists) {\r\n            for (const item of checklist.checklist.items) {\r\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                for (const zone of item.itemZones) {\r\n                    resultCount++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (data.results.length === resultCount) {\r\n            try {\r\n                localStorage.removeItem(`patrolResults_${patrol.id}`);\r\n                const finishPatrol = await fetchData(\r\n                    \"put\",\r\n                    `/patrol/${patrol.id}/finish`,\r\n                    true,\r\n                    data\r\n                );\r\n                socket.emit(\"finish_patrol\", {\r\n                    patrolId: patrol.id,\r\n                    patrolData: finishPatrol\r\n                });\r\n                setPatrol(finishPatrol)\r\n\r\n                toast({\r\n                    variant: \"default\",\r\n                    title: a(\"PatrolFinishTitle\"),\r\n                    description: a(\"PatrolFinishDescription\"),\r\n                });\r\n            } catch (error) {\r\n                console.error(\"Error finishing patrol:\", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const getUserData = async () => {\r\n        try {\r\n            const userfetch = await fetchData(\"get\", \"/user?profile=true&image=true\", true);\r\n            setUser(userfetch);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch profile data:\", error);\r\n        }\r\n    };\r\n\r\n    const getPatrolUserData = async () => {\r\n        try {\r\n            const patrolUserFetch = await fetchData(\"get\", `/patrol/${params.id}/user`, true);\r\n            setPatrolUser(patrolUserFetch);\r\n        } catch (error) {\r\n            console.error(\"Failed to fetch profile data:\", error);\r\n        }\r\n    };\r\n\r\n    const fetchRealtimeData = (defect: IDefect, actionType: string) => {\r\n        if (actionType === \"create\") {\r\n            setDefects((prevDefects) => {\r\n                // ตรวจสอบว่ามี defects ก่อนหน้าหรือไม่\r\n                if (prevDefects && prevDefects.length > 0) {\r\n                    return [...prevDefects, defect]; // เพิ่ม defect ไปต่อท้าย\r\n                } else {\r\n                    return [defect]; // ถ้าไม่มี defect ก่อนหน้า ให้เริ่มต้นใหม่ด้วย defect ตัวแรก\r\n                }\r\n            });\r\n        } else {\r\n            setDefects((prevDefects) =>\r\n                prevDefects.map((d) => (d.id === defect.id ? defect : d))\r\n            );\r\n        }\r\n        // อัปเดต patrolResults\r\n        setPatrolResults((prevResults) => {\r\n            return prevResults.map((patrolResult) => {\r\n                if (patrolResult.id === defect.patrolResultId) {\r\n                    const updatedPatrolResult = {\r\n                        ...patrolResult,\r\n                        defects: [...patrolResult.defects, defect],\r\n                    };\r\n\r\n                    // ส่งเฉพาะ `patrolResult` ที่อัปเดตไปยังเซิร์ฟเวอร์\r\n                    if (socket && patrolResult.id) {\r\n                        socket.emit(\"update_patrol_result\", {\r\n                            patrolId: patrolResult.patrolId,\r\n                            result: updatedPatrolResult,\r\n                        });\r\n                    }\r\n\r\n                    return updatedPatrolResult;\r\n                }\r\n                return patrolResult;\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                await getUserData();\r\n                await getPatrolData();\r\n                await getDefectData()\r\n                await getPatrolUserData()\r\n            } catch (error) {\r\n                console.error(\"Error loading data: \", error);\r\n            } finally {\r\n                setMounted(true);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [patrol?.id])\r\n\r\n    useEffect(() => {\r\n        if (patrol && patrol.status !== 'on_going') {\r\n            localStorage.removeItem(`patrolResults_${patrol.id}`);\r\n        }\r\n    }, [patrol])\r\n\r\n    useEffect(() => {\r\n        if (patrol?.id && patrolResults && patrol.status === 'on_going') {\r\n            // บันทึกข้อมูล patrolResults ลง localStorage ด้วย key patrolResults_<patrol.id>\r\n            localStorage.setItem(\r\n                `patrolResults_${patrol.id}`,\r\n                JSON.stringify(patrolResults)\r\n            );\r\n        }\r\n    }, [patrolResults, patrol]);\r\n\r\n    useEffect(() => {\r\n        if (socket && isConnected && patrol?.id && user?.id) {\r\n            socket.emit(\"join_patrol\", patrol.id);\r\n\r\n            // รับข้อมูลเริ่มต้นเมื่อเข้าร่วมห้อง\r\n            const handleInitialData = (initialResults: IPatrolResult[]) => {\r\n                setPatrolResults(prev => {\r\n                    const merged = [...prev];\r\n                    initialResults.forEach(result => {\r\n                        const existingIndex = merged.findIndex(r => r.id === result.id);\r\n                        if (existingIndex !== -1) {\r\n                            merged[existingIndex] = {\r\n                                ...merged[existingIndex],\r\n                                ...result\r\n                            };\r\n                        } else {\r\n                            merged.push(result);\r\n                        }\r\n                    });\r\n                    return merged;\r\n                });\r\n            };\r\n\r\n            // รับข้อมูลอัปเดตแบบ real-time\r\n            const handleResultUpdate = (incomingResult: IPatrolResult) => { // รับทีละรายการ\r\n                setPatrolResults((prev) => {\r\n                    const existingIndex = prev.findIndex(r => r.id === incomingResult.id);\r\n                    if (existingIndex !== -1) {\r\n                        const updated = [...prev];\r\n                        updated[existingIndex] = { ...updated[existingIndex], ...incomingResult };\r\n                        return updated;\r\n                    }\r\n                    return [...prev, incomingResult];\r\n                });\r\n            };\r\n\r\n            const handlePatrolStarted = (data: { patrolId: string; patrolData: IPatrol }) => {\r\n                setPatrol(data.patrolData);\r\n                setPatrolResults(data.patrolData.results);\r\n            };\r\n\r\n            const handlePatrolFinished = (data: { patrolId: string; patrolData: IPatrol }) => {\r\n                localStorage.removeItem(`patrolResults_${data.patrolId}`);\r\n                const fetchData = async () => {\r\n                    await getPatrolData()\r\n                };\r\n                fetchData();\r\n            };\r\n\r\n            socket.on(\"initial_patrol_data\", handleInitialData);\r\n            socket.on(\"patrol_started\", handlePatrolStarted);\r\n            socket.on(\"patrol_result_update\", handleResultUpdate);\r\n            socket.on(\"patrol_finished\", handlePatrolFinished);\r\n\r\n            return () => {\r\n                socket.off(\"initial_patrol_data\", handleInitialData);\r\n                socket.off(\"patrol_started\", handlePatrolStarted);\r\n                socket.off(\"patrol_result_update\", handleResultUpdate);\r\n                socket.off(\"patrol_finished\", handlePatrolFinished);\r\n            };\r\n        }\r\n    }, [socket, isConnected, patrol?.id, user?.id]);\r\n\r\n    if (!mounted) {\r\n        return <Loading />;\r\n    }\r\n\r\n    if (mounted && !patrolResults) {\r\n        return notFound();\r\n    }\r\n\r\n    return (\r\n        <PatrolContext.Provider\r\n            value={{\r\n                patrol,\r\n                patrolResults,\r\n                // results,\r\n                handleUpdateResult,\r\n                user,\r\n                lock,\r\n                isAlertOpen,\r\n                mounted,\r\n                canFinish,\r\n                defects,\r\n                countItems,\r\n                countFails,\r\n                countDefects,\r\n                patrolUser,\r\n                isHovered,\r\n                formatDate,\r\n                formatId,\r\n                formatTimeDate,\r\n                formatZone,\r\n                handleMouseEnter,\r\n                handleMouseLeave,\r\n                itemCounts,\r\n                toggleLock,\r\n                calculateProgress,\r\n                handleResult,\r\n                handleStartPatrol,\r\n                fetchRealtimeData,\r\n                handleFinishPatrol,\r\n                handleOpenDialog,\r\n                handleCloseDialog,\r\n            }}\r\n        >\r\n            {children}\r\n        </PatrolContext.Provider>\r\n    );\r\n}\r\n\r\nexport const usePatrol = () => {\r\n    const context = useContext(PatrolContext);\r\n    if (!context) {\r\n        throw new Error('usePatrol must be used within a PatrolProvider');\r\n    }\r\n    return context;\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\eslint-report.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type. Allowed unused vars must match /^_/u.","line":22,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":22,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\lib\\utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalPass' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":211,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalComments' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":219,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":219,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalDefects' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":230,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":230,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { clsx, type ClassValue } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\nimport { IPatrol, IPatrolResult, defectStatus, patrolStatus, itemType, IToast, role } from \"@/app/type\";\r\nimport { badgeVariants } from \"@/components/badge-custom\";\r\nimport { LoginSchema } from '@/app/type';\r\nimport axios, { AxiosRequestConfig } from \"axios\";\r\nimport { z } from \"zod\";\r\n\r\n\r\nconst ExcelJS = require(\"exceljs\");\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\nexport async function login(values: z.infer<typeof LoginSchema>) {\r\n  const validatedFields = LoginSchema.safeParse(values)\r\n  if (!validatedFields.success) {\r\n    return { error: \"Invalid field!\" }\r\n  }\r\n  try {\r\n    const csrfResponse = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/csrf-token`, { withCredentials: true });\r\n    const csrfToken = csrfResponse.data.csrfToken;\r\n\r\n    const response = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/login`,\r\n      values,\r\n      {\r\n        headers: {\r\n          \"X-CSRF-Token\": csrfToken,\r\n        },\r\n        withCredentials: true\r\n      })\r\n    return response.data\r\n  } catch (error: any) {\r\n    return { error: error.response?.data?.message || \"Login failed\" };\r\n  }\r\n}\r\n\r\nexport async function logout() {\r\n  try {\r\n    const csrfResponse = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/csrf-token`, { withCredentials: true });\r\n    const csrfToken = csrfResponse.data.csrfToken;\r\n    await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/logout`, {}, {\r\n      headers: {\r\n        \"X-CSRF-Token\": csrfToken,\r\n      },\r\n      withCredentials: true\r\n    })\r\n  } catch (error: any) {\r\n    throw new Error(\"Logout failed\", error);\r\n  }\r\n}\r\n\r\nexport async function fetchData(\r\n  type: \"get\" | \"delete\" | \"post\" | \"put\",\r\n  endpoint: string,\r\n  credential: boolean,\r\n  value?: any,\r\n  form?: boolean\r\n) {\r\n  try {\r\n    const csrfResponse = await axios.get(`${process.env.NEXT_PUBLIC_API_URL}/csrf-token`, { withCredentials: true });\r\n    const csrfToken = csrfResponse.data.csrfToken;\r\n    const config: AxiosRequestConfig = {\r\n      withCredentials: credential,\r\n      headers: {\r\n        \"X-CSRF-Token\": csrfToken,\r\n        \"Content-Type\": form ? \"multipart/form-data\" : \"application/json\",\r\n      },\r\n    };\r\n\r\n    let response;\r\n    if (type === \"get\" || type === \"delete\") {\r\n      response = await axios[type](`${process.env.NEXT_PUBLIC_API_URL}${endpoint}`, config);\r\n    } else if (type === \"post\" || type === \"put\") {\r\n      response = await axios[type](`${process.env.NEXT_PUBLIC_API_URL}${endpoint}`, value, config);\r\n    }\r\n\r\n    return response?.data; // Return the response body\r\n  } catch (error: any) {\r\n    console.error(\"Failed to fetch data:\", error);\r\n\r\n    // Return more detailed error information\r\n    if (error.response) {\r\n      return {\r\n        error: true,\r\n        status: error.response.status,\r\n        data: error.response.data,\r\n      };\r\n    }\r\n\r\n    // For unexpected errors\r\n    return {\r\n      error: true,\r\n      message: error.message || \"Unexpected error occurred\",\r\n    };\r\n  }\r\n}\r\n\r\nexport const exportData = async (patrol: IPatrol, result: IPatrolResult[]) => {\r\n  try {\r\n    const workbook = new ExcelJS.Workbook();\r\n    const worksheet = workbook.addWorksheet(\"Patrol Report\");\r\n\r\n    const formatDateTime = (dateTime) => {\r\n      const date = new Date(dateTime);\r\n      // ฟอร์แมตวันที่\r\n      const formattedDate = date.toLocaleDateString('en-GB');\r\n      // ฟอร์แมตเวลา\r\n      const formattedTime = date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: false });\r\n      return `${formattedDate} ${formattedTime}`;\r\n    };\r\n\r\n    // Funtion สำหรับการจัดรูปแบบของข้อมูลชื่อโซน เช่น quality_control_zone จัดรูปแบบเป็น Quality Control Zone\r\n    const formatZoneName = (zoneName) => {\r\n      return zoneName\r\n        .split(\"_\")\r\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(\" \");\r\n    }\r\n\r\n    // เพิ่มข้อมูล Patrol ที่ด้านบนของเอกสาร\r\n    const rows = [\r\n      [\"Date:\", formatDateTime(patrol.date)],\r\n      [\"Start Time:\", formatDateTime(patrol.startTime)],\r\n      [\"End Time:\", formatDateTime(patrol.endTime)],\r\n      [\"Status:\", patrol.status],\r\n      [\"Preset Title:\", patrol.preset.title],\r\n      [\"Preset Version:\", patrol.preset.version],\r\n      [\"Preset Description:\", patrol.preset.description],\r\n      [] // เพิ่มบรรทัดว่าง\r\n    ];\r\n\r\n    // เพิ่มข้อมูลทีละแถว และตั้งค่า alignment\r\n    rows.forEach((data) => {\r\n      const row = worksheet.addRow(data);\r\n      row.font = { size: 12 }\r\n      row.alignment = { horizontal: \"left\" }; // จัดให้เซลล์แรกชิดซ้าย\r\n    });\r\n\r\n    // ขนาดของ Column\r\n    worksheet.columns = [\r\n      { width: 30 },\r\n      { width: 25 },\r\n      { width: 25 },\r\n      { width: 25 },\r\n      { width: 25 },\r\n    ];\r\n\r\n    let totalFails = 0;\r\n    let totalComments = 0;\r\n    let totalDefects = 0;\r\n    let totalPass = 0;\r\n\r\n    // วนลูปผ่าน patrolChecklist\r\n    for (const patrolChecklist of patrol.patrolChecklists) {\r\n      const inspectorName = patrolChecklist.inspector.profile.name;\r\n      const checklist = patrolChecklist.checklist;\r\n\r\n      // เพิ่มชื่อ Checklist\r\n      const titleRow = worksheet.addRow([checklist.title + \" By \" + inspectorName]);\r\n      // หาตำแหน่งของโรวปัจจุบัน\r\n      const titleRowIdx = worksheet.rowCount;\r\n      // Merge โดยใส่ค่า (ตน.ปัจจุบัน, ตน.เริ่มต้น, ตน.ปัจจุบัน, ตน.สิ้นสุด)\r\n      worksheet.mergeCells(titleRowIdx, 0, titleRowIdx, 5);\r\n      // ตั้งค่าโรวให้ตัวหนา จัดกึ่งกลาง และเพิ่มขอบ\r\n      titleRow.getCell(1).font = { bold: true, color: { argb: 'FFFFFFFF' }, size: 14 };\r\n      titleRow.getCell(1).alignment = { horizontal: \"center\", vertical: \"middle\" };\r\n      titleRow.getCell(1).border = {\r\n        top: { style: 'thin', color: { argb: 'FF000000' } },\r\n        left: { style: 'thin', color: { argb: 'FF000000' } },\r\n        bottom: { style: 'thin', color: { argb: 'FF000000' } },\r\n        right: { style: 'thin', color: { argb: 'FF000000' } },\r\n      };\r\n      // ตั้งค่าสีพื้นหลังให้แถวหัว\r\n      titleRow.getCell(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFF0000' } }; // พื้นหลังสีแดง\r\n\r\n      // ตั้งค่าคอลัมน์พร้อมกับหัวข้อและคีย์\r\n      const headerRow = worksheet.addRow([\"Item Name\", \"Zone Name\", \"Status\", \"Annotation\", \"\"]);\r\n      const headerRowIdx = worksheet.rowCount;\r\n      worksheet.mergeCells(headerRowIdx , 4, headerRowIdx, 5);\r\n\r\n      // จัดกึ่งกลางหัวตาราง ตัวหนา มีกรอบ\r\n      headerRow.eachCell((cell) => {\r\n        cell.alignment = { horizontal: 'center', vertical: 'middle' };\r\n        cell.font = { bold: true, size: 12 };\r\n        cell.border = {\r\n          top: { style: 'thin' },\r\n          left: { style: 'thin' },\r\n          bottom: { style: 'thin' },\r\n          right: { style: 'thin' }\r\n        };\r\n        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF1F1F1' } };  // พื้นหลังสีเทาอ่อน\r\n      });\r\n\r\n      // Loop Items ใน Checklist\r\n      for (const item of checklist.items) {\r\n        // Loop Zones ใน Item\r\n        for (const itemZone of item.itemZones) {\r\n          const zoneName = formatZoneName(itemZone.zone.name);\r\n          const resultItem = result.find(\r\n              (r) => r.itemId === item.id && r.zoneId === itemZone.zone.id\r\n          );\r\n  \r\n          let statusText = \"N/A\";\r\n          let annotationDetails = [];\r\n  \r\n          if (resultItem) {\r\n            if (resultItem.status === true) {\r\n                statusText = \"Passed\";\r\n                totalPass++;\r\n            } else if (resultItem.status === false) {\r\n                statusText = \"Failed\";\r\n                totalFails++;\r\n            }\r\n\r\n            if (resultItem.comments?.length > 0) {\r\n              statusText = \"Commented\";\r\n              totalComments += resultItem.comments.length;\r\n              totalFails--;\r\n\r\n              // Loop เก็บข้อมูล Commends เข้าใน Annotations\r\n              for (const comment of resultItem.comments) {\r\n                  annotationDetails.push([formatDateTime(comment.timestamp), comment.message]);\r\n              }\r\n            }\r\n\r\n            if (resultItem.defects?.length > 0) {\r\n              statusText = \"Defected\";\r\n              totalDefects += resultItem.defects.length;\r\n              totalFails--;\r\n\r\n              // Loop เก็บข้อมูล Defects เข้าใน Annotations\r\n              for (const defect of resultItem.defects) {\r\n                annotationDetails.push([formatDateTime(defect.startTime), defect.description]);\r\n              }\r\n            }\r\n          }\r\n    \r\n          // เพิ่มข้อมูลของแต่ละ Rows\r\n          const startRow = worksheet.rowCount + 1;\r\n          worksheet.addRow([item.name, zoneName, statusText, \"-\"]);\r\n  \r\n          // ถ้ามี Comments หรือ Defects จะเพิ่ม Annotation rows\r\n          if (annotationDetails.length > 0) {\r\n            // กำหนด Subrows ของ Annotation ของ Commend\r\n            if (statusText === \"Commented\") {\r\n              worksheet.getCell(`D${startRow}`).value = \"Comments DateTime\"; \r\n              worksheet.getCell(`E${startRow}`).value = \"Comments Detail\";\r\n              worksheet.getCell(`D${startRow}`).font = { bold: true };\r\n              worksheet.getCell(`E${startRow}`).font = { bold: true };\r\n            // กำหนด Subrows ของ Annotation ของ Defect\r\n            } else if (statusText === \"Defected\") {\r\n              worksheet.getCell(`D${startRow}`).value = \"Defects DateTime\"; \r\n              worksheet.getCell(`E${startRow}`).value = \"Defects Detail\";\r\n              worksheet.getCell(`D${startRow}`).font = { bold: true };\r\n              worksheet.getCell(`E${startRow}`).font = { bold: true };\r\n            }\r\n            // Loop แสดงข้อมูลของ Annotations\r\n            for (const [timestamp, detail] of annotationDetails) {\r\n                const annotationRow = worksheet.addRow([\"\", \"\", \"\", timestamp, detail]);\r\n                annotationRow.eachCell(cell => {\r\n                    cell.alignment = { horizontal: 'left', vertical: 'middle', wrapText: true };\r\n                    cell.border = { top: { style: 'thin' }, bottom: { style: 'thin' }, left: { style: 'thin' }, right: { style: 'thin' } };\r\n                });\r\n            }\r\n          }else {\r\n            // Merge columns D และ E ของ Annotation\r\n            const annotationRowIndex = worksheet.rowCount;\r\n            worksheet.mergeCells(`D${annotationRowIndex}:E${annotationRowIndex}`);\r\n        \r\n            worksheet.getCell(`D${annotationRowIndex}`).alignment = { \r\n                horizontal: 'center', vertical: 'middle', wrapText: true \r\n            };\r\n        \r\n            worksheet.getCell(`D${annotationRowIndex}`).border = { \r\n                top: { style: 'thin' }, \r\n                bottom: { style: 'thin' }, \r\n                left: { style: 'thin' }, \r\n                right: { style: 'thin' } \r\n            };\r\n          }\r\n\r\n          // Merge Item Name, Zone Name, และ Status เมื่อ Annotations มีหลาย Rows\r\n          const endRow = worksheet.rowCount;\r\n          if (endRow > startRow) {\r\n            worksheet.mergeCells(`A${startRow}:A${endRow}`);\r\n            worksheet.mergeCells(`B${startRow}:B${endRow}`);\r\n            worksheet.mergeCells(`C${startRow}:C${endRow}`);\r\n          }\r\n\r\n          for (let row = startRow; row <= endRow; row++) {\r\n            worksheet.getRow(row).eachCell(cell => {\r\n                cell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };\r\n                cell.border = { top: { style: 'thin' }, bottom: { style: 'thin' }, left: { style: 'thin' }, right: { style: 'thin' } };\r\n            });\r\n          }\r\n        }\r\n      }\r\n      const columnCount = headerRow.cellCount;\r\n      const blankRow = worksheet.addRow(Array(columnCount).fill(\"\")); // แถวว่างเพื่อเว้นช่อง\r\n      blankRow.eachCell((cell) => {\r\n        cell.border = { top: { style: 'thin' } };\r\n      });\r\n    }\r\n\r\n    // เพิ่มสรุปที่ด้านล่าง\r\n    const sumRow = worksheet.addRow([\"Summary\"]);\r\n    // หาตำแหน่งของโรวปัจจุบัน\r\n    const sumRowIdx = worksheet.rowCount;\r\n    // Merge โดยใส่ค่า (ตน.ปัจจุบัน, ตน.เริ่มต้น, ตน.ปัจจุบัน, ตน.สิ้นสุด)\r\n    worksheet.mergeCells(sumRowIdx, 0, sumRowIdx, 4);\r\n    // ตั้งค่าโรวให้ตัวหนา จัดกึ่งกลาง และเพิ่มขอบ\r\n    sumRow.getCell(1).font = { bold: true, color: { argb: 'FFFFFFFF' }, size: 14 };\r\n    sumRow.getCell(1).alignment = { horizontal: \"center\", vertical: \"middle\" };\r\n    sumRow.getCell(1).border = {\r\n      top: { style: 'thin' },\r\n      left: { style: 'thin' },\r\n      bottom: { style: 'thin' },\r\n      right: { style: 'thin' },\r\n    };\r\n    sumRow.getCell(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '008000' } }; // พื้นหลังสีเขียว\r\n\r\n    // สร้าง Array เพื่อเก็บข้อมูลจำนวนของแต่ละสถานะในแต่ละโซน\r\n    const zoneStatusCount = [];\r\n\r\n    // สร้างตัวแปรสำหรับผลรวมของทุกโซน\r\n    let totalPassed = 0;\r\n    let totalCommented = 0;\r\n    let totalDefected = 0;\r\n\r\n    // วนลูปผ่าน Zone Name และ Status เพื่อเก็บข้อมูลใน zoneStatusCount\r\n    for (const patrolChecklist of patrol.patrolChecklists) {\r\n      for (const item of patrolChecklist.checklist.items) {\r\n        for (const itemZone of item.itemZones) {\r\n          const zoneName = formatZoneName(itemZone.zone.name);\r\n          const resultItem = result.find(\r\n            (r) => r.itemId === item.id && r.zoneId === itemZone.zone.id\r\n          );\r\n\r\n          let statusText = \"N/A\"; // กำหนดค่าเริ่มต้น\r\n          if (resultItem) {\r\n            if (resultItem.status === true) {\r\n              statusText = \"Passed\";\r\n            } else if (resultItem.status === false) {\r\n              statusText = \"Failed\";\r\n            }\r\n\r\n            if (resultItem.defects && resultItem.defects.length > 0) {\r\n              statusText = \"Defected\";\r\n            }\r\n\r\n            if (resultItem.comments && resultItem.comments.length > 0) {\r\n              statusText = \"Commented\";\r\n            }\r\n          }\r\n\r\n          // หาโซนใน zoneStatusCount หรือเพิ่มใหม่\r\n          let zoneEntry = zoneStatusCount.find(entry => entry.zoneName === zoneName);\r\n          if (!zoneEntry) {\r\n            zoneEntry = { zoneName, Passed: 0, Failed: 0, Commented: 0, Defected: 0, \"N/A\": 0 };\r\n            zoneStatusCount.push(zoneEntry);\r\n          }\r\n\r\n          // เพิ่มจำนวนสถานะในโซนที่กำหนด\r\n          zoneEntry[statusText] += 1;\r\n\r\n          // เพิ่มผลรวมสำหรับทุกโซน\r\n          if (statusText === \"Passed\") totalPassed += 1;\r\n          if (statusText === \"Commented\") totalCommented += 1;\r\n          if (statusText === \"Defected\") totalDefected += 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // เพิ่มส่วนหัวของตารางสำหรับสรุปผล\r\n    const zoneSummaryHeaderRow = worksheet.addRow([\"Zone Name\", \"Passed\", \"Commented\", \"Defected\"]);\r\n    zoneSummaryHeaderRow.eachCell((cell) => {\r\n      cell.font = { bold: true, size: 12 }; // ทำให้หัวตารางตัวหนา\r\n      cell.alignment = { horizontal: \"center\", vertical: \"middle\" }; // จัดกึ่งกลาง\r\n      cell.border = {\r\n        top: { style: 'thin' },\r\n        left: { style: 'thin' },\r\n        bottom: { style: 'thin' },\r\n        right: { style: 'thin' },\r\n      };\r\n      cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF1F1F1' } };  // พื้นหลังสีเทาอ่อน\r\n    });\r\n\r\n    // เพิ่มข้อมูลสรุปของแต่ละโซนลงในตาราง\r\n    zoneStatusCount.forEach(zoneEntry => {\r\n      const summaryRow = worksheet.addRow([\r\n        zoneEntry.zoneName,\r\n        zoneEntry.Passed,\r\n        zoneEntry.Commented,\r\n        zoneEntry.Defected,\r\n      ]);\r\n\r\n      summaryRow.eachCell((cell) => {\r\n        cell.alignment = { horizontal: \"center\", vertical: \"middle\" }; // จัดกึ่งกลาง\r\n        cell.font = { size: 12 };\r\n        cell.border = {\r\n          top: { style: 'thin' },\r\n          left: { style: 'thin' },\r\n          bottom: { style: 'thin' },\r\n          right: { style: 'thin' },\r\n        };\r\n      });\r\n    });\r\n\r\n    // เพิ่มแถวผลรวมของทุกโซน\r\n    const totalRow = worksheet.addRow([\r\n      \"Total\",\r\n      totalPassed,\r\n      totalCommented,\r\n      totalDefected\r\n    ]);\r\n\r\n    totalRow.eachCell((cell) => {\r\n      cell.font = { bold: true, size: 12 }; // ทำให้ผลรวมตัวหนา\r\n      cell.alignment = { horizontal: \"center\", vertical: \"middle\" }; // จัดกึ่งกลาง\r\n      cell.border = {\r\n        top: { style: 'thin' },\r\n        left: { style: 'thin' },\r\n        bottom: { style: 'thin' },\r\n        right: { style: 'thin' },\r\n      };\r\n      cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF1F1F1' } };  // พื้นหลังสีเทาอ่อน\r\n    });\r\n\r\n    worksheet.addRow([]);\r\n\r\n    // เพิ่มสรุปที่ด้านล่าง\r\n    const resultRow = worksheet.addRow([\"Result\"]);\r\n    // หาตำแหน่งของโรวปัจจุบัน\r\n    const resultRowIdx = worksheet.rowCount;\r\n    // Merge โดยใส่ค่า (ตน.ปัจจุบัน, ตน.เริ่มต้น, ตน.ปัจจุบัน, ตน.สิ้นสุด)\r\n    worksheet.mergeCells(resultRowIdx, 0, resultRowIdx, 2);\r\n    // ตั้งค่าโรวให้ตัวหนา จัดกึ่งกลาง และเพิ่มขอบ\r\n    resultRow.getCell(1).font = { bold: true, color: { argb: 'FFFFFFFF' }, size: 14 };\r\n    resultRow.getCell(1).alignment = { horizontal: \"center\", vertical: \"middle\" };\r\n    resultRow.getCell(1).border = {\r\n      top: { style: 'thin' },\r\n      left: { style: 'thin' },\r\n      bottom: { style: 'thin' },\r\n      right: { style: 'thin' },\r\n    };\r\n    resultRow.getCell(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: '00008B' } };  // พื้นหลังสีน้ำเงิน\r\n\r\n    // เพิ่มแถวสำหรับคำว่า Pass และ Fail\r\n    const passFailHeaderRow = worksheet.addRow([\"Pass\", \"Fail\"]);\r\n    passFailHeaderRow.eachCell((cell) => {\r\n      cell.font = { bold: true, size: 12 }; // ทำให้ตัวหนา\r\n      cell.alignment = { horizontal: \"center\", vertical: \"middle\" }; // จัดกึ่งกลาง\r\n      cell.border = {\r\n        top: { style: 'thin' },\r\n        left: { style: 'thin' },\r\n        bottom: { style: 'thin' },\r\n        right: { style: 'thin' },\r\n      };\r\n      cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF1F1F1' } };  // พื้นหลังสีเทาอ่อน\r\n    });\r\n\r\n    // เพิ่มแถวตัวเลขสำหรับ Pass และ Fail\r\n    const passFailCountRow = worksheet.addRow([\r\n      totalPassed, // จำนวน Pass\r\n      totalCommented + totalFails + totalDefected, // รวมจำนวน Fail\r\n    ]);\r\n\r\n    passFailCountRow.eachCell((cell) => {\r\n      cell.alignment = { horizontal: \"center\", vertical: \"middle\" }; // จัดกึ่งกลาง\r\n      cell.font = { size: 12 };\r\n      cell.border = {\r\n        top: { style: 'thin' },\r\n        left: { style: 'thin' },\r\n        bottom: { style: 'thin' },\r\n        right: { style: 'thin' },\r\n      };\r\n    });\r\n\r\n    // เขียน workbook เป็น buffer\r\n    const buffer = await workbook.xlsx.writeBuffer();\r\n\r\n    // สร้าง blob และดาวน์โหลดไฟล์\r\n    const blob = new Blob([buffer], {\r\n      type:\r\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n    });\r\n    const link = document.createElement(\"a\");\r\n    link.href = URL.createObjectURL(blob);\r\n    link.download = \"Patrol_Inspection_Report_\" + patrol.date.toString().split('T')[0] + \".xlsx\";\r\n\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  } catch (error) {\r\n    console.error(\"Error exporting data:\", error);\r\n    throw new Error(\r\n      `Could not export data: ${error instanceof Error ? error.message : \"Unknown error\"\r\n      }`\r\n    );\r\n  }\r\n};\r\n\r\nexport const getInitials = (name: string) => {\r\n  if (!name) return \"\";\r\n  const nameParts = name.split(\" \");\r\n\r\n  if (nameParts.length === 1) {\r\n    return nameParts[0].charAt(0).toUpperCase();\r\n  } else {\r\n    return (\r\n      nameParts[0].charAt(0).toUpperCase() +\r\n      nameParts[nameParts.length - 1].charAt(0).toUpperCase()\r\n    );\r\n  }\r\n};\r\n\r\nexport const sortData = (data: any, sort: { by: string; order: string }) => {\r\n  const sortedData = [...data];\r\n  if (sort.by === \"Doc No.\") {\r\n    sortedData.sort((a, b) =>\r\n      sort.order === \"Ascending\"\r\n        ? a.id - b.id  // เรียงจากน้อยไปมาก \r\n        : b.id - a.id  // เรียงจากมากไปน้อย \r\n    );\r\n  } else if (sort.by === \"Date\") {\r\n    sortedData.sort((a, b) =>\r\n      sort.order === \"Ascending\"\r\n        ? new Date(a.date).getTime() - new Date(b.date).getTime()\r\n        : new Date(b.date).getTime() - new Date(a.date).getTime()\r\n    );\r\n  } else if (sort.by === \"Status\") {\r\n    sortedData.sort((a, b) =>\r\n      sort.order === \"Ascending\"\r\n        ? String(a.status).localeCompare(String(b.status)) // เรียงจาก \"false\" -> \"true\"\r\n        : String(b.status).localeCompare(String(a.status)) // เรียงจาก \"true\" -> \"false\"\r\n    );\r\n  } else if (sort.by === \"DefectDate\") {\r\n    sortedData.sort((a, b) =>\r\n      sort.order === \"Ascending\"\r\n        ? new Date(a.startTime).getTime() - new Date(b.startTime).getTime()\r\n        : new Date(b.startTime).getTime() - new Date(a.startTime).getTime()\r\n    );\r\n  } else if (sort.by === \"CommentDate\") {\r\n    sortedData.sort((a, b) =>\r\n      sort.order === \"Ascending\"\r\n        ? new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\r\n        : new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\r\n    );\r\n  }\r\n  return sortedData\r\n}\r\n\r\n// Function to calculate time ago\r\nexport function timeAgo(timestamp: string, t: any): string {\r\n  const now = new Date();\r\n  const notificationDate = new Date(timestamp);\r\n  const seconds = Math.floor((now.getTime() - notificationDate.getTime()) / 1000);\r\n\r\n  const intervals: { [key: string]: number } = {\r\n    year: 31536000,\r\n    month: 2592000,\r\n    week: 604800,\r\n    day: 86400,\r\n    hour: 3600,\r\n    minute: 60,\r\n    second: 1\r\n  };\r\n\r\n  for (const key in intervals) {\r\n    const interval = intervals[key];\r\n    const result = Math.floor(seconds / interval);\r\n    if (result >= 1) {\r\n      return t(`${key}Ago`, { count: result });\r\n    }\r\n  }\r\n  return t('justNow');\r\n}\r\n\r\nexport const getPatrolStatusVariant = (status: patrolStatus) => {\r\n  let iconName: string\r\n  let variant: keyof typeof badgeVariants\r\n  switch (status) {\r\n    case \"completed\":\r\n      iconName = \"check\";\r\n      variant = \"green\";\r\n      break;\r\n    case \"on_going\":\r\n      iconName = \"cached\";\r\n      variant = \"purple\";\r\n      break;\r\n    case \"scheduled\":\r\n      iconName = \"event_available\";\r\n      variant = \"yellow\";\r\n      break;\r\n    default:\r\n      iconName = \"hourglass_top\";\r\n      variant = \"blue\";\r\n      break;\r\n  }\r\n  return { iconName, variant };\r\n};\r\n\r\nexport const getDefectStatusVariant = (status: defectStatus) => {\r\n  let iconName: string\r\n  let variant: keyof typeof badgeVariants\r\n  switch (status) {\r\n    case \"completed\":\r\n      iconName = 'check'\r\n      variant = 'green'\r\n      break;\r\n    case \"resolved\":\r\n      iconName = 'published_with_changes'\r\n      variant = 'blue'\r\n      break;\r\n    case \"in_progress\":\r\n      iconName = 'cached'\r\n      variant = 'yellow'\r\n      break;\r\n    case \"pending_inspection\":\r\n      iconName = 'pending_actions'\r\n      variant = 'red'\r\n      break;\r\n    default:\r\n      iconName = 'campaign'\r\n      variant = 'orange'\r\n      break;\r\n  }\r\n  return { iconName, variant };\r\n};\r\n\r\nexport const getItemTypeVariant = (type: itemType) => {\r\n  let iconName: string\r\n  let variant: keyof typeof badgeVariants\r\n  switch (type) {\r\n    case \"safety\":\r\n      iconName = 'verified_user'\r\n      variant = 'green'\r\n      break;\r\n    case \"environment\":\r\n      iconName = 'psychiatry'\r\n      variant = 'blue'\r\n      break;\r\n    default:\r\n      iconName = 'build'\r\n      variant = 'red'\r\n      break;\r\n  }\r\n  return { iconName, variant };\r\n};\r\n\r\nexport const getUserVariant = (role: role) => {\r\n  let iconName: string\r\n  let variant: keyof typeof badgeVariants\r\n  let variantName: string\r\n\r\n  switch (role) {\r\n    case \"supervisor\":\r\n      iconName = 'engineering'\r\n      variant = 'yellow'\r\n      variantName = 'supervisor'\r\n      break;\r\n    case \"inspector\":\r\n      iconName = 'person_search'\r\n      variant = 'red'\r\n      variantName = 'inspector'\r\n      break;\r\n    default:\r\n      iconName = 'manage_accounts'\r\n      variant = 'blue'\r\n      variantName = 'admin'\r\n      break;\r\n  }\r\n  return { iconName, variant, variantName };\r\n};\r\n\r\nexport function formatTime(timestamp: string, locale: string, showTime: boolean = true) {\r\n  let language = locale === \"th\" ? \"th-TH\" : \"en-GB\";\r\n\r\n  const date = new Date(timestamp).toLocaleDateString(language, {\r\n    day: \"2-digit\",\r\n    month: \"2-digit\",\r\n    year: \"numeric\",\r\n  });\r\n\r\n  if (!showTime) return date;\r\n\r\n  const time = new Date(timestamp).toLocaleTimeString(language, {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n    hour12: false,\r\n  });\r\n\r\n  return `${date} ${time}`;\r\n}\r\nexport function formatPatrolId(id: number): string {\r\n  let newId = id.toString().padStart(4, '0'); // ทำให้เป็นเลข 4 หลัก เติมศูนย์ข้างหน้า\r\n  return `P${newId}`; // ใส่ P ด้านหน้า\r\n}\r\n\r\nexport function getNotificationToast(key: string): IToast | null {\r\n  switch (key) {\r\n    case \"patrol_assigned\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"PatrolAssignTitle\",\r\n        description: \"PatrolAssignDescription\",\r\n      };\r\n    case \"report_defect\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"DefectReceiveTitle\",\r\n        description: \"DefectReceiveDescription\",\r\n      };\r\n    case \"new_comment\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"CommentReceiveTitle\",\r\n        description: \"CommentReceiveDescription\",\r\n      };\r\n    case \"update_supervisor\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"UpdateSupervisorTitle\",\r\n        description: \"UpdateSupervisorDescription\",\r\n      };\r\n    case \"start_patrol\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"StartPatrolTitle\",\r\n        description: \"StartPatrolDescription\",\r\n      };\r\n    case \"finish_patrol\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"FinishPatrolTitle\",\r\n        description: \"FinishPatrolDescription\",\r\n      };\r\n    case \"defect_resolved\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"DefectResolveInfoTitle\",\r\n        description: \"DefectResolveInfoDescription\",\r\n      };\r\n    case \"defect_accept\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"DefectAcceptInfoTitle\",\r\n        description: \"DefectAcceptInfoDescription\",\r\n      };\r\n    case \"defect_completed\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"DefectCompleteTitle\",\r\n        description: \"DefectCompleteDescription\",\r\n      };\r\n    case \"defect_pending_inspection\":\r\n      return {\r\n        variant: \"default\",\r\n        title: \"DefectPendingInspectionTitle\",\r\n        description: \"DefectPendingInspectionDescription\",\r\n      };\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nconst today = new Date();\r\n\r\nexport const getMonthRange = (month: string) => {\r\n  if (month === \"AllTime\") return { startDate: undefined, endDate: undefined };\r\n\r\n  const dateParts = month.split(\" \");\r\n  const year = parseInt(dateParts[1]);\r\n  const monthIndex = new Date(`${dateParts[0]} 1, ${year}`).getMonth();\r\n\r\n  const startDate = new Date(year, monthIndex, 1);\r\n  const endDate = new Date(year, monthIndex + 1, 0, 23, 59, 59, 999);\r\n  return { startDate, endDate };\r\n};\r\n\r\nconst monthFormatter = new Intl.DateTimeFormat(\"en-US\", { month: \"long\", year: \"numeric\" });\r\n\r\nexport const monthOptions = [\"AllTime\", ...Array.from({ length: 12 }, (_, i) => {\r\n  const date = new Date(today.getFullYear(), today.getMonth() - i, 1);\r\n  return monthFormatter.format(date);\r\n})];\r\n\r\nexport const countPatrolResult = (results: IPatrolResult[]) => {\r\n  let fail = 0;\r\n  let defect = 0;\r\n\r\n  results?.forEach((result) => {\r\n    if (result.status === false) {\r\n      fail++;\r\n    }\r\n\r\n    if (Array.isArray(result.defects) && result.defects.length > 0) {\r\n      defect++;\r\n    }\r\n  });\r\n\r\n  return { fail, defect };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\next.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\postcss.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\SE_3\\TEAM6-DENSY\\client\\tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]